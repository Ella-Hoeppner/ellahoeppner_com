{
"version":3,
"file":"module$node_modules$$pixi$graphics$dist$cjs$graphics.js",
"lineCount":86,
"mappings":"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",
"sources":["node_modules/@pixi/graphics/dist/cjs/graphics.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$graphics$dist$cjs$graphics\"] = function(global,require,module,exports) {\n/*!\n * @pixi/graphics - v6.1.1\n * Compiled Fri, 06 Aug 2021 03:30:25 UTC\n *\n * @pixi/graphics is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar core = require('@pixi/core');\nvar math = require('@pixi/math');\nvar utils = require('@pixi/utils');\nvar constants = require('@pixi/constants');\nvar display = require('@pixi/display');\n\n/**\n * Supported line joints in `PIXI.LineStyle` for graphics.\n *\n * @see PIXI.Graphics#lineStyle\n * @see https://graphicdesign.stackexchange.com/questions/59018/what-is-a-bevel-join-of-two-lines-exactly-illustrator\n *\n * @name LINE_JOIN\n * @memberof PIXI\n * @static\n * @enum {string}\n * @property {string} MITER - 'miter': make a sharp corner where outer part of lines meet\n * @property {string} BEVEL - 'bevel': add a square butt at each end of line segment and fill the triangle at turn\n * @property {string} ROUND - 'round': add an arc at the joint\n */\n(function (LINE_JOIN) {\n    LINE_JOIN[\"MITER\"] = \"miter\";\n    LINE_JOIN[\"BEVEL\"] = \"bevel\";\n    LINE_JOIN[\"ROUND\"] = \"round\";\n})(exports.LINE_JOIN || (exports.LINE_JOIN = {}));\n(function (LINE_CAP) {\n    LINE_CAP[\"BUTT\"] = \"butt\";\n    LINE_CAP[\"ROUND\"] = \"round\";\n    LINE_CAP[\"SQUARE\"] = \"square\";\n})(exports.LINE_CAP || (exports.LINE_CAP = {}));\n/**\n * Graphics curves resolution settings. If `adaptive` flag is set to `true`,\n * the resolution is calculated based on the curve's length to ensure better visual quality.\n * Adaptive draw works with `bezierCurveTo` and `quadraticCurveTo`.\n *\n * @static\n * @constant\n * @memberof PIXI\n * @name GRAPHICS_CURVES\n * @type {object}\n * @property {boolean} adaptive=true - flag indicating if the resolution should be adaptive\n * @property {number} maxLength=10 - maximal length of a single segment of the curve (if adaptive = false, ignored)\n * @property {number} minSegments=8 - minimal number of segments in the curve (if adaptive = false, ignored)\n * @property {number} maxSegments=2048 - maximal number of segments in the curve (if adaptive = false, ignored)\n */\nvar GRAPHICS_CURVES = {\n    adaptive: true,\n    maxLength: 10,\n    minSegments: 8,\n    maxSegments: 2048,\n    epsilon: 0.0001,\n    _segmentsCount: function (length, defaultSegments) {\n        if (defaultSegments === void 0) { defaultSegments = 20; }\n        if (!this.adaptive || !length || isNaN(length)) {\n            return defaultSegments;\n        }\n        var result = Math.ceil(length / this.maxLength);\n        if (result < this.minSegments) {\n            result = this.minSegments;\n        }\n        else if (result > this.maxSegments) {\n            result = this.maxSegments;\n        }\n        return result;\n    },\n};\n\n/**\n * Fill style object for Graphics.\n *\n * @class\n * @memberof PIXI\n */\nvar FillStyle = /** @class */ (function () {\n    function FillStyle() {\n        /**\n         * The hex color value used when coloring the Graphics object.\n         *\n         * @default 0xFFFFFF\n         */\n        this.color = 0xFFFFFF;\n        /** The alpha value used when filling the Graphics object. */\n        this.alpha = 1.0;\n        /**\n         * The texture to be used for the fill.\n         *\n         * @member {PIXI.Texture}\n         * @default 0\n         */\n        this.texture = core.Texture.WHITE;\n        /**\n         * The transform applied to the texture.\n         *\n         * @member {PIXI.Matrix}\n         * @default null\n         */\n        this.matrix = null;\n        /** If the current fill is visible. */\n        this.visible = false;\n        this.reset();\n    }\n    /**\n     * Clones the object\n     *\n     * @return {PIXI.FillStyle}\n     */\n    FillStyle.prototype.clone = function () {\n        var obj = new FillStyle();\n        obj.color = this.color;\n        obj.alpha = this.alpha;\n        obj.texture = this.texture;\n        obj.matrix = this.matrix;\n        obj.visible = this.visible;\n        return obj;\n    };\n    /**\n     * Reset\n     */\n    FillStyle.prototype.reset = function () {\n        this.color = 0xFFFFFF;\n        this.alpha = 1;\n        this.texture = core.Texture.WHITE;\n        this.matrix = null;\n        this.visible = false;\n    };\n    /**\n     * Destroy and don't use after this\n     */\n    FillStyle.prototype.destroy = function () {\n        this.texture = null;\n        this.matrix = null;\n    };\n    return FillStyle;\n}());\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * Builds a polygon to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nvar buildPoly = {\n    build: function (graphicsData) {\n        graphicsData.points = graphicsData.shape.points.slice();\n    },\n    triangulate: function (graphicsData, graphicsGeometry) {\n        var points = graphicsData.points;\n        var holes = graphicsData.holes;\n        var verts = graphicsGeometry.points;\n        var indices = graphicsGeometry.indices;\n        if (points.length >= 6) {\n            var holeArray = [];\n            // Process holes..\n            for (var i = 0; i < holes.length; i++) {\n                var hole = holes[i];\n                holeArray.push(points.length / 2);\n                points = points.concat(hole.points);\n            }\n            // sort color\n            var triangles = utils.earcut(points, holeArray, 2);\n            if (!triangles) {\n                return;\n            }\n            var vertPos = verts.length / 2;\n            for (var i = 0; i < triangles.length; i += 3) {\n                indices.push(triangles[i] + vertPos);\n                indices.push(triangles[i + 1] + vertPos);\n                indices.push(triangles[i + 2] + vertPos);\n            }\n            for (var i = 0; i < points.length; i++) {\n                verts.push(points[i]);\n            }\n        }\n    },\n};\n\n// for type only\n/**\n * Builds a circle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object to draw\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nvar buildCircle = {\n    build: function (graphicsData) {\n        // need to convert points to a nice regular data\n        var circleData = graphicsData.shape;\n        var points = graphicsData.points;\n        var x = circleData.x;\n        var y = circleData.y;\n        var width;\n        var height;\n        points.length = 0;\n        // TODO - bit hacky??\n        if (graphicsData.type === math.SHAPES.CIRC) {\n            width = circleData.radius;\n            height = circleData.radius;\n        }\n        else {\n            var ellipseData = graphicsData.shape;\n            width = ellipseData.width;\n            height = ellipseData.height;\n        }\n        if (width === 0 || height === 0) {\n            return;\n        }\n        var totalSegs = Math.floor(30 * Math.sqrt(circleData.radius))\n            || Math.floor(15 * Math.sqrt(width + height));\n        totalSegs /= 2.3;\n        var seg = (Math.PI * 2) / totalSegs;\n        for (var i = 0; i < totalSegs - 0.5; i++) {\n            points.push(x + (Math.sin(-seg * i) * width), y + (Math.cos(-seg * i) * height));\n        }\n        points.push(points[0], points[1]);\n    },\n    triangulate: function (graphicsData, graphicsGeometry) {\n        var points = graphicsData.points;\n        var verts = graphicsGeometry.points;\n        var indices = graphicsGeometry.indices;\n        var vertPos = verts.length / 2;\n        var center = vertPos;\n        var circle = (graphicsData.shape);\n        var matrix = graphicsData.matrix;\n        var x = circle.x;\n        var y = circle.y;\n        // Push center (special point)\n        verts.push(graphicsData.matrix ? (matrix.a * x) + (matrix.c * y) + matrix.tx : x, graphicsData.matrix ? (matrix.b * x) + (matrix.d * y) + matrix.ty : y);\n        for (var i = 0; i < points.length; i += 2) {\n            verts.push(points[i], points[i + 1]);\n            // add some uvs\n            indices.push(vertPos++, center, vertPos);\n        }\n    },\n};\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nvar buildRectangle = {\n    build: function (graphicsData) {\n        // --- //\n        // need to convert points to a nice regular data\n        //\n        var rectData = graphicsData.shape;\n        var x = rectData.x;\n        var y = rectData.y;\n        var width = rectData.width;\n        var height = rectData.height;\n        var points = graphicsData.points;\n        points.length = 0;\n        points.push(x, y, x + width, y, x + width, y + height, x, y + height);\n    },\n    triangulate: function (graphicsData, graphicsGeometry) {\n        var points = graphicsData.points;\n        var verts = graphicsGeometry.points;\n        var vertPos = verts.length / 2;\n        verts.push(points[0], points[1], points[2], points[3], points[6], points[7], points[4], points[5]);\n        graphicsGeometry.indices.push(vertPos, vertPos + 1, vertPos + 2, vertPos + 1, vertPos + 2, vertPos + 3);\n    },\n};\n\n/**\n * Calculate a single point for a quadratic bezier curve.\n * Utility function used by quadraticBezierCurve.\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} n1 - first number\n * @param {number} n2 - second number\n * @param {number} perc - percentage\n * @return {number} the result\n *\n */\nfunction getPt(n1, n2, perc) {\n    var diff = n2 - n1;\n    return n1 + (diff * perc);\n}\n/**\n * Calculate the points for a quadratic bezier curve. (helper function..)\n * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} fromX - Origin point x\n * @param {number} fromY - Origin point x\n * @param {number} cpX - Control point x\n * @param {number} cpY - Control point y\n * @param {number} toX - Destination point x\n * @param {number} toY - Destination point y\n * @param {number[]} [out=[]] - The output array to add points into. If not passed, a new array is created.\n * @return {number[]} an array of points\n */\nfunction quadraticBezierCurve(fromX, fromY, cpX, cpY, toX, toY, out) {\n    if (out === void 0) { out = []; }\n    var n = 20;\n    var points = out;\n    var xa = 0;\n    var ya = 0;\n    var xb = 0;\n    var yb = 0;\n    var x = 0;\n    var y = 0;\n    for (var i = 0, j = 0; i <= n; ++i) {\n        j = i / n;\n        // The Green Line\n        xa = getPt(fromX, cpX, j);\n        ya = getPt(fromY, cpY, j);\n        xb = getPt(cpX, toX, j);\n        yb = getPt(cpY, toY, j);\n        // The Black Dot\n        x = getPt(xa, xb, j);\n        y = getPt(ya, yb, j);\n        // Handle case when first curve points overlaps and earcut fails to triangulate\n        if (i === 0 && points[points.length - 2] === x && points[points.length - 1] === y) {\n            continue;\n        }\n        points.push(x, y);\n    }\n    return points;\n}\n/**\n * Builds a rounded rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nvar buildRoundedRectangle = {\n    build: function (graphicsData) {\n        var rrectData = graphicsData.shape;\n        var points = graphicsData.points;\n        var x = rrectData.x;\n        var y = rrectData.y;\n        var width = rrectData.width;\n        var height = rrectData.height;\n        // Don't allow negative radius or greater than half the smallest width\n        var radius = Math.max(0, Math.min(rrectData.radius, Math.min(width, height) / 2));\n        points.length = 0;\n        // No radius, do a simple rectangle\n        if (!radius) {\n            points.push(x, y, x + width, y, x + width, y + height, x, y + height);\n        }\n        else {\n            quadraticBezierCurve(x, y + radius, x, y, x + radius, y, points);\n            quadraticBezierCurve(x + width - radius, y, x + width, y, x + width, y + radius, points);\n            quadraticBezierCurve(x + width, y + height - radius, x + width, y + height, x + width - radius, y + height, points);\n            quadraticBezierCurve(x + radius, y + height, x, y + height, x, y + height - radius, points);\n        }\n    },\n    triangulate: function (graphicsData, graphicsGeometry) {\n        var points = graphicsData.points;\n        var verts = graphicsGeometry.points;\n        var indices = graphicsGeometry.indices;\n        var vecPos = verts.length / 2;\n        var triangles = utils.earcut(points, null, 2);\n        for (var i = 0, j = triangles.length; i < j; i += 3) {\n            indices.push(triangles[i] + vecPos);\n            //     indices.push(triangles[i] + vecPos);\n            indices.push(triangles[i + 1] + vecPos);\n            //   indices.push(triangles[i + 2] + vecPos);\n            indices.push(triangles[i + 2] + vecPos);\n        }\n        for (var i = 0, j = points.length; i < j; i++) {\n            verts.push(points[i], points[++i]);\n        }\n    },\n};\n\n/**\n * Buffers vertices to draw a square cap.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} x - X-coord of end point\n * @param {number} y - Y-coord of end point\n * @param {number} nx - X-coord of line normal pointing inside\n * @param {number} ny - Y-coord of line normal pointing inside\n * @param {Array<number>} verts - vertex buffer\n * @returns {}\n */\nfunction square(x, y, nx, ny, innerWeight, outerWeight, clockwise, /* rotation for square (true at left end, false at right end) */ verts) {\n    var ix = x - (nx * innerWeight);\n    var iy = y - (ny * innerWeight);\n    var ox = x + (nx * outerWeight);\n    var oy = y + (ny * outerWeight);\n    /* Rotate nx,ny for extension vector */\n    var exx;\n    var eyy;\n    if (clockwise) {\n        exx = ny;\n        eyy = -nx;\n    }\n    else {\n        exx = -ny;\n        eyy = nx;\n    }\n    /* [i|0]x,y extended at cap */\n    var eix = ix + exx;\n    var eiy = iy + eyy;\n    var eox = ox + exx;\n    var eoy = oy + eyy;\n    /* Square itself must be inserted clockwise*/\n    verts.push(eix, eiy);\n    verts.push(eox, eoy);\n    return 2;\n}\n/**\n * Buffers vertices to draw an arc at the line joint or cap.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} cx - X-coord of center\n * @param {number} cy - Y-coord of center\n * @param {number} sx - X-coord of arc start\n * @param {number} sy - Y-coord of arc start\n * @param {number} ex - X-coord of arc end\n * @param {number} ey - Y-coord of arc end\n * @param {Array<number>} verts - buffer of vertices\n * @param {boolean} clockwise - orientation of vertices\n * @returns {number} - no. of vertices pushed\n */\nfunction round(cx, cy, sx, sy, ex, ey, verts, clockwise) {\n    var cx2p0x = sx - cx;\n    var cy2p0y = sy - cy;\n    var angle0 = Math.atan2(cx2p0x, cy2p0y);\n    var angle1 = Math.atan2(ex - cx, ey - cy);\n    if (clockwise && angle0 < angle1) {\n        angle0 += Math.PI * 2;\n    }\n    else if (!clockwise && angle0 > angle1) {\n        angle1 += Math.PI * 2;\n    }\n    var startAngle = angle0;\n    var angleDiff = angle1 - angle0;\n    var absAngleDiff = Math.abs(angleDiff);\n    /* if (absAngleDiff >= PI_LBOUND && absAngleDiff <= PI_UBOUND)\n    {\n        const r1x = cx - nxtPx;\n        const r1y = cy - nxtPy;\n\n        if (r1x === 0)\n        {\n            if (r1y > 0)\n            {\n                angleDiff = -angleDiff;\n            }\n        }\n        else if (r1x >= -GRAPHICS_CURVES.epsilon)\n        {\n            angleDiff = -angleDiff;\n        }\n    }*/\n    var radius = Math.sqrt((cx2p0x * cx2p0x) + (cy2p0y * cy2p0y));\n    var segCount = ((15 * absAngleDiff * Math.sqrt(radius) / Math.PI) >> 0) + 1;\n    var angleInc = angleDiff / segCount;\n    startAngle += angleInc;\n    if (clockwise) {\n        verts.push(cx, cy);\n        verts.push(sx, sy);\n        for (var i = 1, angle = startAngle; i < segCount; i++, angle += angleInc) {\n            verts.push(cx, cy);\n            verts.push(cx + ((Math.sin(angle) * radius)), cy + ((Math.cos(angle) * radius)));\n        }\n        verts.push(cx, cy);\n        verts.push(ex, ey);\n    }\n    else {\n        verts.push(sx, sy);\n        verts.push(cx, cy);\n        for (var i = 1, angle = startAngle; i < segCount; i++, angle += angleInc) {\n            verts.push(cx + ((Math.sin(angle) * radius)), cy + ((Math.cos(angle) * radius)));\n            verts.push(cx, cy);\n        }\n        verts.push(ex, ey);\n        verts.push(cx, cy);\n    }\n    return segCount * 2;\n}\n/**\n * Builds a line to draw using the polygon method.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nfunction buildNonNativeLine(graphicsData, graphicsGeometry) {\n    var shape = graphicsData.shape;\n    var points = graphicsData.points || shape.points.slice();\n    var eps = graphicsGeometry.closePointEps;\n    if (points.length === 0) {\n        return;\n    }\n    // if the line width is an odd number add 0.5 to align to a whole pixel\n    // commenting this out fixes #711 and #1620\n    // if (graphicsData.lineWidth%2)\n    // {\n    //     for (i = 0; i < points.length; i++)\n    //     {\n    //         points[i] += 0.5;\n    //     }\n    // }\n    var style = graphicsData.lineStyle;\n    // get first and last point.. figure out the middle!\n    var firstPoint = new math.Point(points[0], points[1]);\n    var lastPoint = new math.Point(points[points.length - 2], points[points.length - 1]);\n    var closedShape = shape.type !== math.SHAPES.POLY || shape.closeStroke;\n    var closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps\n        && Math.abs(firstPoint.y - lastPoint.y) < eps;\n    // if the first point is the last point - gonna have issues :)\n    if (closedShape) {\n        // need to clone as we are going to slightly modify the shape..\n        points = points.slice();\n        if (closedPath) {\n            points.pop();\n            points.pop();\n            lastPoint.set(points[points.length - 2], points[points.length - 1]);\n        }\n        var midPointX = (firstPoint.x + lastPoint.x) * 0.5;\n        var midPointY = (lastPoint.y + firstPoint.y) * 0.5;\n        points.unshift(midPointX, midPointY);\n        points.push(midPointX, midPointY);\n    }\n    var verts = graphicsGeometry.points;\n    var length = points.length / 2;\n    var indexCount = points.length;\n    var indexStart = verts.length / 2;\n    // Max. inner and outer width\n    var width = style.width / 2;\n    var widthSquared = width * width;\n    var miterLimitSquared = style.miterLimit * style.miterLimit;\n    /* Line segments of interest where (x1,y1) forms the corner. */\n    var x0 = points[0];\n    var y0 = points[1];\n    var x1 = points[2];\n    var y1 = points[3];\n    var x2 = 0;\n    var y2 = 0;\n    /* perp[?](x|y) = the line normal with magnitude lineWidth. */\n    var perpx = -(y0 - y1);\n    var perpy = x0 - x1;\n    var perp1x = 0;\n    var perp1y = 0;\n    var dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n    var ratio = style.alignment; // 0.5;\n    var innerWeight = (1 - ratio) * 2;\n    var outerWeight = ratio * 2;\n    if (!closedShape) {\n        if (style.cap === exports.LINE_CAP.ROUND) {\n            indexCount += round(x0 - (perpx * (innerWeight - outerWeight) * 0.5), y0 - (perpy * (innerWeight - outerWeight) * 0.5), x0 - (perpx * innerWeight), y0 - (perpy * innerWeight), x0 + (perpx * outerWeight), y0 + (perpy * outerWeight), verts, true) + 2;\n        }\n        else if (style.cap === exports.LINE_CAP.SQUARE) {\n            indexCount += square(x0, y0, perpx, perpy, innerWeight, outerWeight, true, verts);\n        }\n    }\n    // Push first point (below & above vertices)\n    verts.push(x0 - (perpx * innerWeight), y0 - (perpy * innerWeight));\n    verts.push(x0 + (perpx * outerWeight), y0 + (perpy * outerWeight));\n    for (var i = 1; i < length - 1; ++i) {\n        x0 = points[(i - 1) * 2];\n        y0 = points[((i - 1) * 2) + 1];\n        x1 = points[i * 2];\n        y1 = points[(i * 2) + 1];\n        x2 = points[(i + 1) * 2];\n        y2 = points[((i + 1) * 2) + 1];\n        perpx = -(y0 - y1);\n        perpy = x0 - x1;\n        dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n        perpx /= dist;\n        perpy /= dist;\n        perpx *= width;\n        perpy *= width;\n        perp1x = -(y1 - y2);\n        perp1y = x1 - x2;\n        dist = Math.sqrt((perp1x * perp1x) + (perp1y * perp1y));\n        perp1x /= dist;\n        perp1y /= dist;\n        perp1x *= width;\n        perp1y *= width;\n        /* d[x|y](0|1) = the component displacement between points p(0,1|1,2) */\n        var dx0 = x1 - x0;\n        var dy0 = y0 - y1;\n        var dx1 = x1 - x2;\n        var dy1 = y2 - y1;\n        /* +ve if internal angle counterclockwise, -ve if internal angle clockwise. */\n        var cross = (dy0 * dx1) - (dy1 * dx0);\n        var clockwise = (cross < 0);\n        /* Going nearly straight? */\n        if (Math.abs(cross) < 0.1) {\n            verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight));\n            verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));\n            continue;\n        }\n        /* p[x|y] is the miter point. pdist is the distance between miter point and p1. */\n        var c1 = ((-perpx + x0) * (-perpy + y1)) - ((-perpx + x1) * (-perpy + y0));\n        var c2 = ((-perp1x + x2) * (-perp1y + y1)) - ((-perp1x + x1) * (-perp1y + y2));\n        var px = ((dx0 * c2) - (dx1 * c1)) / cross;\n        var py = ((dy1 * c1) - (dy0 * c2)) / cross;\n        var pdist = ((px - x1) * (px - x1)) + ((py - y1) * (py - y1));\n        /* Inner miter point */\n        var imx = x1 + ((px - x1) * innerWeight);\n        var imy = y1 + ((py - y1) * innerWeight);\n        /* Outer miter point */\n        var omx = x1 - ((px - x1) * outerWeight);\n        var omy = y1 - ((py - y1) * outerWeight);\n        /* Is the inside miter point too far away, creating a spike? */\n        var smallerInsideSegmentSq = Math.min((dx0 * dx0) + (dy0 * dy0), (dx1 * dx1) + (dy1 * dy1));\n        var insideWeight = clockwise ? innerWeight : outerWeight;\n        var smallerInsideDiagonalSq = smallerInsideSegmentSq + (insideWeight * insideWeight * widthSquared);\n        var insideMiterOk = pdist <= smallerInsideDiagonalSq;\n        if (insideMiterOk) {\n            if (style.join === exports.LINE_JOIN.BEVEL || pdist / widthSquared > miterLimitSquared) {\n                if (clockwise) /* rotating at inner angle */ {\n                    verts.push(imx, imy); // inner miter point\n                    verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight)); // first segment's outer vertex\n                    verts.push(imx, imy); // inner miter point\n                    verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight)); // second segment's outer vertex\n                }\n                else /* rotating at outer angle */ {\n                    verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight)); // first segment's inner vertex\n                    verts.push(omx, omy); // outer miter point\n                    verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight)); // second segment's outer vertex\n                    verts.push(omx, omy); // outer miter point\n                }\n                indexCount += 2;\n            }\n            else if (style.join === exports.LINE_JOIN.ROUND) {\n                if (clockwise) /* arc is outside */ {\n                    verts.push(imx, imy);\n                    verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));\n                    indexCount += round(x1, y1, x1 + (perpx * outerWeight), y1 + (perpy * outerWeight), x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight), verts, true) + 4;\n                    verts.push(imx, imy);\n                    verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight));\n                }\n                else /* arc is inside */ {\n                    verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight));\n                    verts.push(omx, omy);\n                    indexCount += round(x1, y1, x1 - (perpx * innerWeight), y1 - (perpy * innerWeight), x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight), verts, false) + 4;\n                    verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight));\n                    verts.push(omx, omy);\n                }\n            }\n            else {\n                verts.push(imx, imy);\n                verts.push(omx, omy);\n            }\n        }\n        else // inside miter is NOT ok\n         {\n            verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight)); // first segment's inner vertex\n            verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight)); // first segment's outer vertex\n            if (style.join === exports.LINE_JOIN.BEVEL || pdist / widthSquared > miterLimitSquared) ;\n            else if (style.join === exports.LINE_JOIN.ROUND) {\n                if (clockwise) /* arc is outside */ {\n                    indexCount += round(x1, y1, x1 + (perpx * outerWeight), y1 + (perpy * outerWeight), x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight), verts, true) + 2;\n                }\n                else /* arc is inside */ {\n                    indexCount += round(x1, y1, x1 - (perpx * innerWeight), y1 - (perpy * innerWeight), x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight), verts, false) + 2;\n                }\n            }\n            else {\n                if (clockwise) {\n                    verts.push(omx, omy); // inner miter point\n                    verts.push(omx, omy); // inner miter point\n                }\n                else {\n                    verts.push(imx, imy); // outer miter point\n                    verts.push(imx, imy); // outer miter point\n                }\n                indexCount += 2;\n            }\n            verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight)); // second segment's inner vertex\n            verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight)); // second segment's outer vertex\n            indexCount += 2;\n        }\n    }\n    x0 = points[(length - 2) * 2];\n    y0 = points[((length - 2) * 2) + 1];\n    x1 = points[(length - 1) * 2];\n    y1 = points[((length - 1) * 2) + 1];\n    perpx = -(y0 - y1);\n    perpy = x0 - x1;\n    dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n    verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight));\n    verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));\n    if (!closedShape) {\n        if (style.cap === exports.LINE_CAP.ROUND) {\n            indexCount += round(x1 - (perpx * (innerWeight - outerWeight) * 0.5), y1 - (perpy * (innerWeight - outerWeight) * 0.5), x1 - (perpx * innerWeight), y1 - (perpy * innerWeight), x1 + (perpx * outerWeight), y1 + (perpy * outerWeight), verts, false) + 2;\n        }\n        else if (style.cap === exports.LINE_CAP.SQUARE) {\n            indexCount += square(x1, y1, perpx, perpy, innerWeight, outerWeight, false, verts);\n        }\n    }\n    var indices = graphicsGeometry.indices;\n    var eps2 = GRAPHICS_CURVES.epsilon * GRAPHICS_CURVES.epsilon;\n    // indices.push(indexStart);\n    for (var i = indexStart; i < indexCount + indexStart - 2; ++i) {\n        x0 = verts[(i * 2)];\n        y0 = verts[(i * 2) + 1];\n        x1 = verts[(i + 1) * 2];\n        y1 = verts[((i + 1) * 2) + 1];\n        x2 = verts[(i + 2) * 2];\n        y2 = verts[((i + 2) * 2) + 1];\n        /* Skip zero area triangles */\n        if (Math.abs((x0 * (y1 - y2)) + (x1 * (y2 - y0)) + (x2 * (y0 - y1))) < eps2) {\n            continue;\n        }\n        indices.push(i, i + 1, i + 2);\n    }\n}\n/**\n * Builds a line to draw using the gl.drawArrays(gl.LINES) method\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nfunction buildNativeLine(graphicsData, graphicsGeometry) {\n    var i = 0;\n    var shape = graphicsData.shape;\n    var points = graphicsData.points || shape.points;\n    var closedShape = shape.type !== math.SHAPES.POLY || shape.closeStroke;\n    if (points.length === 0)\n        { return; }\n    var verts = graphicsGeometry.points;\n    var indices = graphicsGeometry.indices;\n    var length = points.length / 2;\n    var startIndex = verts.length / 2;\n    var currentIndex = startIndex;\n    verts.push(points[0], points[1]);\n    for (i = 1; i < length; i++) {\n        verts.push(points[i * 2], points[(i * 2) + 1]);\n        indices.push(currentIndex, currentIndex + 1);\n        currentIndex++;\n    }\n    if (closedShape) {\n        indices.push(currentIndex, startIndex);\n    }\n}\n/**\n * Builds a line to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nfunction buildLine(graphicsData, graphicsGeometry) {\n    if (graphicsData.lineStyle.native) {\n        buildNativeLine(graphicsData, graphicsGeometry);\n    }\n    else {\n        buildNonNativeLine(graphicsData, graphicsGeometry);\n    }\n}\n\n/**\n * Utilities for arc curves\n * @class\n * @private\n */\nvar ArcUtils = /** @class */ (function () {\n    function ArcUtils() {\n    }\n    /**\n     * The arcTo() method creates an arc/curve between two tangents on the canvas.\n     *\n     * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n     *\n     * @private\n     * @param {number} x1 - The x-coordinate of the beginning of the arc\n     * @param {number} y1 - The y-coordinate of the beginning of the arc\n     * @param {number} x2 - The x-coordinate of the end of the arc\n     * @param {number} y2 - The y-coordinate of the end of the arc\n     * @param {number} radius - The radius of the arc\n     * @return {object} If the arc length is valid, return center of circle, radius and other info otherwise `null`.\n     */\n    ArcUtils.curveTo = function (x1, y1, x2, y2, radius, points) {\n        var fromX = points[points.length - 2];\n        var fromY = points[points.length - 1];\n        var a1 = fromY - y1;\n        var b1 = fromX - x1;\n        var a2 = y2 - y1;\n        var b2 = x2 - x1;\n        var mm = Math.abs((a1 * b2) - (b1 * a2));\n        if (mm < 1.0e-8 || radius === 0) {\n            if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1) {\n                points.push(x1, y1);\n            }\n            return null;\n        }\n        var dd = (a1 * a1) + (b1 * b1);\n        var cc = (a2 * a2) + (b2 * b2);\n        var tt = (a1 * a2) + (b1 * b2);\n        var k1 = radius * Math.sqrt(dd) / mm;\n        var k2 = radius * Math.sqrt(cc) / mm;\n        var j1 = k1 * tt / dd;\n        var j2 = k2 * tt / cc;\n        var cx = (k1 * b2) + (k2 * b1);\n        var cy = (k1 * a2) + (k2 * a1);\n        var px = b1 * (k2 + j1);\n        var py = a1 * (k2 + j1);\n        var qx = b2 * (k1 + j2);\n        var qy = a2 * (k1 + j2);\n        var startAngle = Math.atan2(py - cy, px - cx);\n        var endAngle = Math.atan2(qy - cy, qx - cx);\n        return {\n            cx: (cx + x1),\n            cy: (cy + y1),\n            radius: radius,\n            startAngle: startAngle,\n            endAngle: endAngle,\n            anticlockwise: (b1 * a2 > b2 * a1),\n        };\n    };\n    /* eslint-disable max-len */\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     *\n     * @private\n     * @param {number} startX - Start x location of arc\n     * @param {number} startY - Start y location of arc\n     * @param {number} cx - The x-coordinate of the center of the circle\n     * @param {number} cy - The y-coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param {number} endAngle - The ending angle, in radians\n     * @param {boolean} anticlockwise - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @param {number[]} points - Collection of points to add to\n     */\n    ArcUtils.arc = function (_startX, _startY, cx, cy, radius, startAngle, endAngle, _anticlockwise, points) {\n        var sweep = endAngle - startAngle;\n        var n = GRAPHICS_CURVES._segmentsCount(Math.abs(sweep) * radius, Math.ceil(Math.abs(sweep) / math.PI_2) * 40);\n        var theta = (sweep) / (n * 2);\n        var theta2 = theta * 2;\n        var cTheta = Math.cos(theta);\n        var sTheta = Math.sin(theta);\n        var segMinus = n - 1;\n        var remainder = (segMinus % 1) / segMinus;\n        for (var i = 0; i <= segMinus; ++i) {\n            var real = i + (remainder * i);\n            var angle = ((theta) + startAngle + (theta2 * real));\n            var c = Math.cos(angle);\n            var s = -Math.sin(angle);\n            points.push((((cTheta * c) + (sTheta * s)) * radius) + cx, (((cTheta * -s) + (sTheta * c)) * radius) + cy);\n        }\n    };\n    return ArcUtils;\n}());\n\n/**\n * Utilities for bezier curves\n * @class\n * @private\n */\nvar BezierUtils = /** @class */ (function () {\n    function BezierUtils() {\n    }\n    /**\n     * Calculate length of bezier curve.\n     * Analytical solution is impossible, since it involves an integral that does not integrate in general.\n     * Therefore numerical solution is used.\n     *\n     * @private\n     * @param {number} fromX - Starting point x\n     * @param {number} fromY - Starting point y\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {number} Length of bezier curve\n     */\n    BezierUtils.curveLength = function (fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY) {\n        var n = 10;\n        var result = 0.0;\n        var t = 0.0;\n        var t2 = 0.0;\n        var t3 = 0.0;\n        var nt = 0.0;\n        var nt2 = 0.0;\n        var nt3 = 0.0;\n        var x = 0.0;\n        var y = 0.0;\n        var dx = 0.0;\n        var dy = 0.0;\n        var prevX = fromX;\n        var prevY = fromY;\n        for (var i = 1; i <= n; ++i) {\n            t = i / n;\n            t2 = t * t;\n            t3 = t2 * t;\n            nt = (1.0 - t);\n            nt2 = nt * nt;\n            nt3 = nt2 * nt;\n            x = (nt3 * fromX) + (3.0 * nt2 * t * cpX) + (3.0 * nt * t2 * cpX2) + (t3 * toX);\n            y = (nt3 * fromY) + (3.0 * nt2 * t * cpY) + (3 * nt * t2 * cpY2) + (t3 * toY);\n            dx = prevX - x;\n            dy = prevY - y;\n            prevX = x;\n            prevY = y;\n            result += Math.sqrt((dx * dx) + (dy * dy));\n        }\n        return result;\n    };\n    /**\n     * Calculate the points for a bezier curve and then draws it.\n     *\n     * Ignored from docs since it is not directly exposed.\n     *\n     * @ignore\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @param {number[]} points - Path array to push points into\n     */\n    BezierUtils.curveTo = function (cpX, cpY, cpX2, cpY2, toX, toY, points) {\n        var fromX = points[points.length - 2];\n        var fromY = points[points.length - 1];\n        points.length -= 2;\n        var n = GRAPHICS_CURVES._segmentsCount(BezierUtils.curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY));\n        var dt = 0;\n        var dt2 = 0;\n        var dt3 = 0;\n        var t2 = 0;\n        var t3 = 0;\n        points.push(fromX, fromY);\n        for (var i = 1, j = 0; i <= n; ++i) {\n            j = i / n;\n            dt = (1 - j);\n            dt2 = dt * dt;\n            dt3 = dt2 * dt;\n            t2 = j * j;\n            t3 = t2 * j;\n            points.push((dt3 * fromX) + (3 * dt2 * j * cpX) + (3 * dt * t2 * cpX2) + (t3 * toX), (dt3 * fromY) + (3 * dt2 * j * cpY) + (3 * dt * t2 * cpY2) + (t3 * toY));\n        }\n    };\n    return BezierUtils;\n}());\n\n/**\n * Utilities for quadratic curves\n * @class\n * @private\n */\nvar QuadraticUtils = /** @class */ (function () {\n    function QuadraticUtils() {\n    }\n    /**\n     * Calculate length of quadratic curve\n     * @see {@link http://www.malczak.linuxpl.com/blog/quadratic-bezier-curve-length/}\n     * for the detailed explanation of math behind this.\n     *\n     * @private\n     * @param {number} fromX - x-coordinate of curve start point\n     * @param {number} fromY - y-coordinate of curve start point\n     * @param {number} cpX - x-coordinate of curve control point\n     * @param {number} cpY - y-coordinate of curve control point\n     * @param {number} toX - x-coordinate of curve end point\n     * @param {number} toY - y-coordinate of curve end point\n     * @return {number} Length of quadratic curve\n     */\n    QuadraticUtils.curveLength = function (fromX, fromY, cpX, cpY, toX, toY) {\n        var ax = fromX - (2.0 * cpX) + toX;\n        var ay = fromY - (2.0 * cpY) + toY;\n        var bx = (2.0 * cpX) - (2.0 * fromX);\n        var by = (2.0 * cpY) - (2.0 * fromY);\n        var a = 4.0 * ((ax * ax) + (ay * ay));\n        var b = 4.0 * ((ax * bx) + (ay * by));\n        var c = (bx * bx) + (by * by);\n        var s = 2.0 * Math.sqrt(a + b + c);\n        var a2 = Math.sqrt(a);\n        var a32 = 2.0 * a * a2;\n        var c2 = 2.0 * Math.sqrt(c);\n        var ba = b / a2;\n        return ((a32 * s)\n            + (a2 * b * (s - c2))\n            + (((4.0 * c * a) - (b * b))\n                * Math.log(((2.0 * a2) + ba + s) / (ba + c2)))) / (4.0 * a32);\n    };\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     *\n     * @private\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @param {number[]} points - Points to add segments to.\n     */\n    QuadraticUtils.curveTo = function (cpX, cpY, toX, toY, points) {\n        var fromX = points[points.length - 2];\n        var fromY = points[points.length - 1];\n        var n = GRAPHICS_CURVES._segmentsCount(QuadraticUtils.curveLength(fromX, fromY, cpX, cpY, toX, toY));\n        var xa = 0;\n        var ya = 0;\n        for (var i = 1; i <= n; ++i) {\n            var j = i / n;\n            xa = fromX + ((cpX - fromX) * j);\n            ya = fromY + ((cpY - fromY) * j);\n            points.push(xa + (((cpX + ((toX - cpX) * j)) - xa) * j), ya + (((cpY + ((toY - cpY) * j)) - ya) * j));\n        }\n    };\n    return QuadraticUtils;\n}());\n\n/**\n * A structure to hold interim batch objects for Graphics.\n * @class\n * @memberof PIXI.graphicsUtils\n */\nvar BatchPart = /** @class */ (function () {\n    function BatchPart() {\n        this.reset();\n    }\n    /**\n     * Begin batch part\n     *\n     * @param {PIXI.FillStyle | PIXI.LineStyle} style\n     * @param {number} startIndex\n     * @param {number} attribStart\n     */\n    BatchPart.prototype.begin = function (style, startIndex, attribStart) {\n        this.reset();\n        this.style = style;\n        this.start = startIndex;\n        this.attribStart = attribStart;\n    };\n    /**\n     * End batch part\n     *\n     * @param {number} endIndex\n     * @param {number} endAttrib\n     */\n    BatchPart.prototype.end = function (endIndex, endAttrib) {\n        this.attribSize = endAttrib - this.attribStart;\n        this.size = endIndex - this.start;\n    };\n    BatchPart.prototype.reset = function () {\n        this.style = null;\n        this.size = 0;\n        this.start = 0;\n        this.attribStart = 0;\n        this.attribSize = 0;\n    };\n    return BatchPart;\n}());\n\n/**\n * Generalized convenience utilities for Graphics.\n *\n * @namespace graphicsUtils\n * @memberof PIXI\n */\nvar _a;\n/**\n * Map of fill commands for each shape type.\n *\n * @memberof PIXI.graphicsUtils\n * @member {Object} FILL_COMMANDS\n */\nvar FILL_COMMANDS = (_a = {},\n    _a[math.SHAPES.POLY] = buildPoly,\n    _a[math.SHAPES.CIRC] = buildCircle,\n    _a[math.SHAPES.ELIP] = buildCircle,\n    _a[math.SHAPES.RECT] = buildRectangle,\n    _a[math.SHAPES.RREC] = buildRoundedRectangle,\n    _a);\n/**\n * Batch pool, stores unused batches for preventing allocations.\n *\n * @memberof PIXI.graphicsUtils\n * @member {Array<PIXI.graphicsUtils.BatchPart>} BATCH_POOL\n */\nvar BATCH_POOL = [];\n/**\n * Draw call pool, stores unused draw calls for preventing allocations.\n *\n * @memberof PIXI.graphicsUtils\n * @member {Array<PIXI.BatchDrawCall>} DRAW_CALL_POOL\n */\nvar DRAW_CALL_POOL = [];\n\n/**\n * Determine if polygon is clockwise or counterclockwise.\n * @see {@link https://stackoverflow.com/questions/1165647}\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {Polygon} polygon\n * @return {boolean}\n */\nfunction isPolygonClockwise(polygon) {\n    var points = polygon.points;\n    var sum = 0;\n    for (var i = 0; i < points.length - 2; i += 2) {\n        sum += (points[i + 2] - points[i]) * (points[i + 3] + points[i + 1]);\n    }\n    return sum > 0;\n}\n\n/**\n * A class to contain data useful for Graphics objects\n *\n * @class\n * @memberof PIXI\n */\nvar GraphicsData = /** @class */ (function () {\n    /**\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @param {PIXI.FillStyle} [fillStyle] - the width of the line to draw\n     * @param {PIXI.LineStyle} [lineStyle] - the color of the line to draw\n     * @param {PIXI.Matrix} [matrix] - Transform matrix\n     */\n    function GraphicsData(shape, fillStyle, lineStyle, matrix) {\n        if (fillStyle === void 0) { fillStyle = null; }\n        if (lineStyle === void 0) { lineStyle = null; }\n        if (matrix === void 0) { matrix = null; }\n        /** The collection of points. */\n        this.points = [];\n        /**\n         * The collection of holes.\n         *\n         * @member {PIXI.GraphicsData[]}\n         */\n        this.holes = [];\n        /**\n         * The shape object to draw.\n         * @member {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle}\n         */\n        this.shape = shape;\n        /**\n         * The style of the line.\n         * @member {PIXI.LineStyle}\n         */\n        this.lineStyle = lineStyle;\n        /**\n         * The style of the fill.\n         * @member {PIXI.FillStyle}\n         */\n        this.fillStyle = fillStyle;\n        /**\n         * The transform matrix.\n         * @member {PIXI.Matrix}\n         */\n        this.matrix = matrix;\n        /**\n         * The type of the shape, see the Const.Shapes file for all the existing types,\n         * @member {number}\n         */\n        this.type = shape.type;\n    }\n    /**\n     * Creates a new GraphicsData object with the same values as this one.\n     *\n     * @return {PIXI.GraphicsData} Cloned GraphicsData object\n     */\n    GraphicsData.prototype.clone = function () {\n        return new GraphicsData(this.shape, this.fillStyle, this.lineStyle, this.matrix);\n    };\n    /**\n     * Destroys the Graphics data.\n     *\n     */\n    GraphicsData.prototype.destroy = function () {\n        this.shape = null;\n        this.holes.length = 0;\n        this.holes = null;\n        this.points.length = 0;\n        this.points = null;\n        this.lineStyle = null;\n        this.fillStyle = null;\n    };\n    return GraphicsData;\n}());\n\nvar tmpPoint = new math.Point();\nvar tmpBounds = new display.Bounds();\n/**\n * The Graphics class contains methods used to draw primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.\n *\n * GraphicsGeometry is designed to not be continually updating the geometry since it's expensive\n * to re-tesselate using **earcut**. Consider using {@link PIXI.Mesh} for this use-case, it's much faster.\n *\n * @class\n * @extends PIXI.BatchGeometry\n * @memberof PIXI\n */\nvar GraphicsGeometry = /** @class */ (function (_super) {\n    __extends(GraphicsGeometry, _super);\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    function GraphicsGeometry() {\n        var _this = _super.call(this) || this;\n        /**\n         * Minimal distance between points that are considered different.\n         * Affects line tesselation.\n         */\n        _this.closePointEps = 1e-4;\n        /** Padding to add to the bounds. */\n        _this.boundsPadding = 0;\n        _this.uvsFloat32 = null;\n        _this.indicesUint16 = null;\n        _this.batchable = false;\n        /** An array of points to draw, 2 numbers per point */\n        _this.points = [];\n        /** The collection of colors */\n        _this.colors = [];\n        /** The UVs collection */\n        _this.uvs = [];\n        /** The indices of the vertices */\n        _this.indices = [];\n        /** Reference to the texture IDs. */\n        _this.textureIds = [];\n        /**\n         * The collection of drawn shapes.\n         *\n         * @member {PIXI.GraphicsData[]}\n         */\n        _this.graphicsData = [];\n        /**\n         * List of current draw calls drived from the batches.\n         *\n         * @member {PIXI.BatchDrawCall[]}\n         */\n        _this.drawCalls = [];\n        /** Batches need to regenerated if the geometry is updated. */\n        _this.batchDirty = -1;\n        /**\n         * Intermediate abstract format sent to batch system.\n         * Can be converted to drawCalls or to batchable objects.\n         *\n         * @member {PIXI.graphicsUtils.BatchPart[]}\n         */\n        _this.batches = [];\n        /** Used to detect if the graphics object has changed. */\n        _this.dirty = 0;\n        /** Used to check if the cache is dirty. */\n        _this.cacheDirty = -1;\n        /** Used to detect if we cleared the graphicsData. */\n        _this.clearDirty = 0;\n        /** Index of the last batched shape in the stack of calls. */\n        _this.shapeIndex = 0;\n        /**\n         * Cached bounds.\n         *\n         * @member {PIXI.Bounds}\n         */\n        _this._bounds = new display.Bounds();\n        /** The bounds dirty flag. */\n        _this.boundsDirty = -1;\n        return _this;\n    }\n    Object.defineProperty(GraphicsGeometry.prototype, \"bounds\", {\n        /**\n         * Get the current bounds of the graphic geometry.\n         *\n         * @member {PIXI.Bounds}\n         * @readonly\n         */\n        get: function () {\n            if (this.boundsDirty !== this.dirty) {\n                this.boundsDirty = this.dirty;\n                this.calculateBounds();\n            }\n            return this._bounds;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Call if you changed graphicsData manually.\n     * Empties all batch buffers.\n     */\n    GraphicsGeometry.prototype.invalidate = function () {\n        this.boundsDirty = -1;\n        this.dirty++;\n        this.batchDirty++;\n        this.shapeIndex = 0;\n        this.points.length = 0;\n        this.colors.length = 0;\n        this.uvs.length = 0;\n        this.indices.length = 0;\n        this.textureIds.length = 0;\n        for (var i = 0; i < this.drawCalls.length; i++) {\n            this.drawCalls[i].texArray.clear();\n            DRAW_CALL_POOL.push(this.drawCalls[i]);\n        }\n        this.drawCalls.length = 0;\n        for (var i = 0; i < this.batches.length; i++) {\n            var batchPart = this.batches[i];\n            batchPart.reset();\n            BATCH_POOL.push(batchPart);\n        }\n        this.batches.length = 0;\n    };\n    /**\n     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n     *\n     * @return {PIXI.GraphicsGeometry} This GraphicsGeometry object. Good for chaining method calls\n     */\n    GraphicsGeometry.prototype.clear = function () {\n        if (this.graphicsData.length > 0) {\n            this.invalidate();\n            this.clearDirty++;\n            this.graphicsData.length = 0;\n        }\n        return this;\n    };\n    /**\n     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @param {PIXI.FillStyle} fillStyle - Defines style of the fill.\n     * @param {PIXI.LineStyle} lineStyle - Defines style of the lines.\n     * @param {PIXI.Matrix} matrix - Transform applied to the points of the shape.\n     * @return {PIXI.GraphicsGeometry} Returns geometry for chaining.\n     */\n    GraphicsGeometry.prototype.drawShape = function (shape, fillStyle, lineStyle, matrix) {\n        if (fillStyle === void 0) { fillStyle = null; }\n        if (lineStyle === void 0) { lineStyle = null; }\n        if (matrix === void 0) { matrix = null; }\n        var data = new GraphicsData(shape, fillStyle, lineStyle, matrix);\n        this.graphicsData.push(data);\n        this.dirty++;\n        return this;\n    };\n    /**\n     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @param {PIXI.Matrix} matrix - Transform applied to the points of the shape.\n     * @return {PIXI.GraphicsGeometry} Returns geometry for chaining.\n     */\n    GraphicsGeometry.prototype.drawHole = function (shape, matrix) {\n        if (matrix === void 0) { matrix = null; }\n        if (!this.graphicsData.length) {\n            return null;\n        }\n        var data = new GraphicsData(shape, null, null, matrix);\n        var lastShape = this.graphicsData[this.graphicsData.length - 1];\n        data.lineStyle = lastShape.lineStyle;\n        lastShape.holes.push(data);\n        this.dirty++;\n        return this;\n    };\n    /**\n     * Destroys the GraphicsGeometry object.\n     *\n     */\n    GraphicsGeometry.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        // destroy each of the GraphicsData objects\n        for (var i = 0; i < this.graphicsData.length; ++i) {\n            this.graphicsData[i].destroy();\n        }\n        this.points.length = 0;\n        this.points = null;\n        this.colors.length = 0;\n        this.colors = null;\n        this.uvs.length = 0;\n        this.uvs = null;\n        this.indices.length = 0;\n        this.indices = null;\n        this.indexBuffer.destroy();\n        this.indexBuffer = null;\n        this.graphicsData.length = 0;\n        this.graphicsData = null;\n        this.drawCalls.length = 0;\n        this.drawCalls = null;\n        this.batches.length = 0;\n        this.batches = null;\n        this._bounds = null;\n    };\n    /**\n     * Check to see if a point is contained within this geometry.\n     *\n     * @param {PIXI.IPointData} point - Point to check if it's contained.\n     * @return {Boolean} `true` if the point is contained within geometry.\n     */\n    GraphicsGeometry.prototype.containsPoint = function (point) {\n        var graphicsData = this.graphicsData;\n        for (var i = 0; i < graphicsData.length; ++i) {\n            var data = graphicsData[i];\n            if (!data.fillStyle.visible) {\n                continue;\n            }\n            // only deal with fills..\n            if (data.shape) {\n                if (data.matrix) {\n                    data.matrix.applyInverse(point, tmpPoint);\n                }\n                else {\n                    tmpPoint.copyFrom(point);\n                }\n                if (data.shape.contains(tmpPoint.x, tmpPoint.y)) {\n                    var hitHole = false;\n                    if (data.holes) {\n                        for (var i_1 = 0; i_1 < data.holes.length; i_1++) {\n                            var hole = data.holes[i_1];\n                            if (hole.shape.contains(tmpPoint.x, tmpPoint.y)) {\n                                hitHole = true;\n                                break;\n                            }\n                        }\n                    }\n                    if (!hitHole) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     * Generates intermediate batch data. Either gets converted to drawCalls\n     * or used to convert to batch objects directly by the Graphics object.\n     *\n     * @param {boolean} [allow32Indices] - Allow using 32-bit indices for preventing artifacts when more that 65535 vertices\n     */\n    GraphicsGeometry.prototype.updateBatches = function (allow32Indices) {\n        if (!this.graphicsData.length) {\n            this.batchable = true;\n            return;\n        }\n        if (!this.validateBatching()) {\n            return;\n        }\n        this.cacheDirty = this.dirty;\n        var uvs = this.uvs;\n        var graphicsData = this.graphicsData;\n        var batchPart = null;\n        var currentStyle = null;\n        if (this.batches.length > 0) {\n            batchPart = this.batches[this.batches.length - 1];\n            currentStyle = batchPart.style;\n        }\n        for (var i = this.shapeIndex; i < graphicsData.length; i++) {\n            this.shapeIndex++;\n            var data = graphicsData[i];\n            var fillStyle = data.fillStyle;\n            var lineStyle = data.lineStyle;\n            var command = FILL_COMMANDS[data.type];\n            // build out the shapes points..\n            command.build(data);\n            if (data.matrix) {\n                this.transformPoints(data.points, data.matrix);\n            }\n            for (var j = 0; j < 2; j++) {\n                var style = (j === 0) ? fillStyle : lineStyle;\n                if (!style.visible)\n                    { continue; }\n                var nextTexture = style.texture.baseTexture;\n                var index_1 = this.indices.length;\n                var attribIndex = this.points.length / 2;\n                nextTexture.wrapMode = constants.WRAP_MODES.REPEAT;\n                if (j === 0) {\n                    this.processFill(data);\n                }\n                else {\n                    this.processLine(data);\n                }\n                var size = (this.points.length / 2) - attribIndex;\n                if (size === 0)\n                    { continue; }\n                // close batch if style is different\n                if (batchPart && !this._compareStyles(currentStyle, style)) {\n                    batchPart.end(index_1, attribIndex);\n                    batchPart = null;\n                }\n                // spawn new batch if its first batch or previous was closed\n                if (!batchPart) {\n                    batchPart = BATCH_POOL.pop() || new BatchPart();\n                    batchPart.begin(style, index_1, attribIndex);\n                    this.batches.push(batchPart);\n                    currentStyle = style;\n                }\n                this.addUvs(this.points, uvs, style.texture, attribIndex, size, style.matrix);\n            }\n        }\n        var index = this.indices.length;\n        var attrib = this.points.length / 2;\n        if (batchPart) {\n            batchPart.end(index, attrib);\n        }\n        if (this.batches.length === 0) {\n            // there are no visible styles in GraphicsData\n            // its possible that someone wants Graphics just for the bounds\n            this.batchable = true;\n            return;\n        }\n        // prevent allocation when length is same as buffer\n        if (this.indicesUint16 && this.indices.length === this.indicesUint16.length) {\n            this.indicesUint16.set(this.indices);\n        }\n        else {\n            var need32 = attrib > 0xffff && allow32Indices;\n            this.indicesUint16 = need32 ? new Uint32Array(this.indices) : new Uint16Array(this.indices);\n        }\n        // TODO make this a const..\n        this.batchable = this.isBatchable();\n        if (this.batchable) {\n            this.packBatches();\n        }\n        else {\n            this.buildDrawCalls();\n        }\n    };\n    /**\n     * Affinity check\n     *\n     * @param {PIXI.FillStyle | PIXI.LineStyle} styleA\n     * @param {PIXI.FillStyle | PIXI.LineStyle} styleB\n     */\n    GraphicsGeometry.prototype._compareStyles = function (styleA, styleB) {\n        if (!styleA || !styleB) {\n            return false;\n        }\n        if (styleA.texture.baseTexture !== styleB.texture.baseTexture) {\n            return false;\n        }\n        if (styleA.color + styleA.alpha !== styleB.color + styleB.alpha) {\n            return false;\n        }\n        if (!!styleA.native !== !!styleB.native) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Test geometry for batching process.\n     *\n     * @protected\n     */\n    GraphicsGeometry.prototype.validateBatching = function () {\n        if (this.dirty === this.cacheDirty || !this.graphicsData.length) {\n            return false;\n        }\n        for (var i = 0, l = this.graphicsData.length; i < l; i++) {\n            var data = this.graphicsData[i];\n            var fill = data.fillStyle;\n            var line = data.lineStyle;\n            if (fill && !fill.texture.baseTexture.valid)\n                { return false; }\n            if (line && !line.texture.baseTexture.valid)\n                { return false; }\n        }\n        return true;\n    };\n    /**\n     * Offset the indices so that it works with the batcher.\n     *\n     * @protected\n     */\n    GraphicsGeometry.prototype.packBatches = function () {\n        this.batchDirty++;\n        this.uvsFloat32 = new Float32Array(this.uvs);\n        var batches = this.batches;\n        for (var i = 0, l = batches.length; i < l; i++) {\n            var batch = batches[i];\n            for (var j = 0; j < batch.size; j++) {\n                var index = batch.start + j;\n                this.indicesUint16[index] = this.indicesUint16[index] - batch.attribStart;\n            }\n        }\n    };\n    /**\n     * Checks to see if this graphics geometry can be batched.\n     * Currently it needs to be small enough and not contain any native lines.\n     *\n     * @protected\n     */\n    GraphicsGeometry.prototype.isBatchable = function () {\n        // prevent heavy mesh batching\n        if (this.points.length > 0xffff * 2) {\n            return false;\n        }\n        var batches = this.batches;\n        for (var i = 0; i < batches.length; i++) {\n            if (batches[i].style.native) {\n                return false;\n            }\n        }\n        return (this.points.length < GraphicsGeometry.BATCHABLE_SIZE * 2);\n    };\n    /**\n     * Converts intermediate batches data to drawCalls.\n     *\n     * @protected\n     */\n    GraphicsGeometry.prototype.buildDrawCalls = function () {\n        var TICK = ++core.BaseTexture._globalBatch;\n        for (var i = 0; i < this.drawCalls.length; i++) {\n            this.drawCalls[i].texArray.clear();\n            DRAW_CALL_POOL.push(this.drawCalls[i]);\n        }\n        this.drawCalls.length = 0;\n        var colors = this.colors;\n        var textureIds = this.textureIds;\n        var currentGroup = DRAW_CALL_POOL.pop();\n        if (!currentGroup) {\n            currentGroup = new core.BatchDrawCall();\n            currentGroup.texArray = new core.BatchTextureArray();\n        }\n        currentGroup.texArray.count = 0;\n        currentGroup.start = 0;\n        currentGroup.size = 0;\n        currentGroup.type = constants.DRAW_MODES.TRIANGLES;\n        var textureCount = 0;\n        var currentTexture = null;\n        var textureId = 0;\n        var native = false;\n        var drawMode = constants.DRAW_MODES.TRIANGLES;\n        var index = 0;\n        this.drawCalls.push(currentGroup);\n        // TODO - this can be simplified\n        for (var i = 0; i < this.batches.length; i++) {\n            var data = this.batches[i];\n            // TODO add some full on MAX_TEXTURE CODE..\n            var MAX_TEXTURES = 8;\n            // Forced cast for checking `native` without errors\n            var style = data.style;\n            var nextTexture = style.texture.baseTexture;\n            if (native !== !!style.native) {\n                native = !!style.native;\n                drawMode = native ? constants.DRAW_MODES.LINES : constants.DRAW_MODES.TRIANGLES;\n                // force the batch to break!\n                currentTexture = null;\n                textureCount = MAX_TEXTURES;\n                TICK++;\n            }\n            if (currentTexture !== nextTexture) {\n                currentTexture = nextTexture;\n                if (nextTexture._batchEnabled !== TICK) {\n                    if (textureCount === MAX_TEXTURES) {\n                        TICK++;\n                        textureCount = 0;\n                        if (currentGroup.size > 0) {\n                            currentGroup = DRAW_CALL_POOL.pop();\n                            if (!currentGroup) {\n                                currentGroup = new core.BatchDrawCall();\n                                currentGroup.texArray = new core.BatchTextureArray();\n                            }\n                            this.drawCalls.push(currentGroup);\n                        }\n                        currentGroup.start = index;\n                        currentGroup.size = 0;\n                        currentGroup.texArray.count = 0;\n                        currentGroup.type = drawMode;\n                    }\n                    // TODO add this to the render part..\n                    // Hack! Because texture has protected `touched`\n                    nextTexture.touched = 1; // touch;\n                    nextTexture._batchEnabled = TICK;\n                    nextTexture._batchLocation = textureCount;\n                    nextTexture.wrapMode = constants.WRAP_MODES.REPEAT;\n                    currentGroup.texArray.elements[currentGroup.texArray.count++] = nextTexture;\n                    textureCount++;\n                }\n            }\n            currentGroup.size += data.size;\n            index += data.size;\n            textureId = nextTexture._batchLocation;\n            this.addColors(colors, style.color, style.alpha, data.attribSize, data.attribStart);\n            this.addTextureIds(textureIds, textureId, data.attribSize, data.attribStart);\n        }\n        core.BaseTexture._globalBatch = TICK;\n        // upload..\n        // merge for now!\n        this.packAttributes();\n    };\n    /**\n     * Packs attributes to single buffer.\n     *\n     * @protected\n     */\n    GraphicsGeometry.prototype.packAttributes = function () {\n        var verts = this.points;\n        var uvs = this.uvs;\n        var colors = this.colors;\n        var textureIds = this.textureIds;\n        // verts are 2 positions.. so we * by 3 as there are 6 properties.. then 4 cos its bytes\n        var glPoints = new ArrayBuffer(verts.length * 3 * 4);\n        var f32 = new Float32Array(glPoints);\n        var u32 = new Uint32Array(glPoints);\n        var p = 0;\n        for (var i = 0; i < verts.length / 2; i++) {\n            f32[p++] = verts[i * 2];\n            f32[p++] = verts[(i * 2) + 1];\n            f32[p++] = uvs[i * 2];\n            f32[p++] = uvs[(i * 2) + 1];\n            u32[p++] = colors[i];\n            f32[p++] = textureIds[i];\n        }\n        this._buffer.update(glPoints);\n        this._indexBuffer.update(this.indicesUint16);\n    };\n    /**\n     * Process fill part of Graphics.\n     *\n     * @param {PIXI.GraphicsData} data\n     * @protected\n     */\n    GraphicsGeometry.prototype.processFill = function (data) {\n        if (data.holes.length) {\n            this.processHoles(data.holes);\n            buildPoly.triangulate(data, this);\n        }\n        else {\n            var command = FILL_COMMANDS[data.type];\n            command.triangulate(data, this);\n        }\n    };\n    /**\n     * Process line part of Graphics.\n     *\n     * @param {PIXI.GraphicsData} data\n     * @protected\n     */\n    GraphicsGeometry.prototype.processLine = function (data) {\n        buildLine(data, this);\n        for (var i = 0; i < data.holes.length; i++) {\n            buildLine(data.holes[i], this);\n        }\n    };\n    /**\n     * Process the holes data.\n     *\n     * @param {PIXI.GraphicsData[]} holes - Holes to render\n     * @protected\n     */\n    GraphicsGeometry.prototype.processHoles = function (holes) {\n        for (var i = 0; i < holes.length; i++) {\n            var hole = holes[i];\n            var command = FILL_COMMANDS[hole.type];\n            command.build(hole);\n            if (hole.matrix) {\n                this.transformPoints(hole.points, hole.matrix);\n            }\n        }\n    };\n    /**\n     * Update the local bounds of the object. Expensive to use performance-wise.\n     *\n     * @protected\n     */\n    GraphicsGeometry.prototype.calculateBounds = function () {\n        var bounds = this._bounds;\n        var sequenceBounds = tmpBounds;\n        var curMatrix = math.Matrix.IDENTITY;\n        this._bounds.clear();\n        sequenceBounds.clear();\n        for (var i = 0; i < this.graphicsData.length; i++) {\n            var data = this.graphicsData[i];\n            var shape = data.shape;\n            var type = data.type;\n            var lineStyle = data.lineStyle;\n            var nextMatrix = data.matrix || math.Matrix.IDENTITY;\n            var lineWidth = 0.0;\n            if (lineStyle && lineStyle.visible) {\n                var alignment = lineStyle.alignment;\n                lineWidth = lineStyle.width;\n                if (type === math.SHAPES.POLY) {\n                    if (isPolygonClockwise(shape)) {\n                        lineWidth = lineWidth * (1 - alignment);\n                    }\n                    else {\n                        lineWidth = lineWidth * alignment;\n                    }\n                }\n                else {\n                    lineWidth = lineWidth * Math.max(0, alignment);\n                }\n            }\n            if (curMatrix !== nextMatrix) {\n                if (!sequenceBounds.isEmpty()) {\n                    bounds.addBoundsMatrix(sequenceBounds, curMatrix);\n                    sequenceBounds.clear();\n                }\n                curMatrix = nextMatrix;\n            }\n            if (type === math.SHAPES.RECT || type === math.SHAPES.RREC) {\n                var rect = shape;\n                sequenceBounds.addFramePad(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height, lineWidth, lineWidth);\n            }\n            else if (type === math.SHAPES.CIRC) {\n                var circle = shape;\n                sequenceBounds.addFramePad(circle.x, circle.y, circle.x, circle.y, circle.radius + lineWidth, circle.radius + lineWidth);\n            }\n            else if (type === math.SHAPES.ELIP) {\n                var ellipse = shape;\n                sequenceBounds.addFramePad(ellipse.x, ellipse.y, ellipse.x, ellipse.y, ellipse.width + lineWidth, ellipse.height + lineWidth);\n            }\n            else {\n                var poly = shape;\n                // adding directly to the bounds\n                bounds.addVerticesMatrix(curMatrix, poly.points, 0, poly.points.length, lineWidth, lineWidth);\n            }\n        }\n        if (!sequenceBounds.isEmpty()) {\n            bounds.addBoundsMatrix(sequenceBounds, curMatrix);\n        }\n        bounds.pad(this.boundsPadding, this.boundsPadding);\n    };\n    /**\n     * Transform points using matrix.\n     *\n     * @protected\n     * @param {number[]} points - Points to transform\n     * @param {PIXI.Matrix} matrix - Transform matrix\n     */\n    GraphicsGeometry.prototype.transformPoints = function (points, matrix) {\n        for (var i = 0; i < points.length / 2; i++) {\n            var x = points[(i * 2)];\n            var y = points[(i * 2) + 1];\n            points[(i * 2)] = (matrix.a * x) + (matrix.c * y) + matrix.tx;\n            points[(i * 2) + 1] = (matrix.b * x) + (matrix.d * y) + matrix.ty;\n        }\n    };\n    /**\n     * Add colors.\n     *\n     * @protected\n     * @param {number[]} colors - List of colors to add to\n     * @param {number} color - Color to add\n     * @param {number} alpha - Alpha to use\n     * @param {number} size - Number of colors to add\n     * @param {number} offset\n     */\n    GraphicsGeometry.prototype.addColors = function (colors, color, alpha, size, offset) {\n        if (offset === void 0) { offset = 0; }\n        // TODO use the premultiply bits Ivan added\n        var rgb = (color >> 16) + (color & 0xff00) + ((color & 0xff) << 16);\n        var rgba = utils.premultiplyTint(rgb, alpha);\n        colors.length = Math.max(colors.length, offset + size);\n        for (var i = 0; i < size; i++) {\n            colors[offset + i] = rgba;\n        }\n    };\n    /**\n     * Add texture id that the shader/fragment wants to use.\n     *\n     * @protected\n     * @param {number[]} textureIds\n     * @param {number} id\n     * @param {number} size\n     * @param {number} offset\n     */\n    GraphicsGeometry.prototype.addTextureIds = function (textureIds, id, size, offset) {\n        if (offset === void 0) { offset = 0; }\n        textureIds.length = Math.max(textureIds.length, offset + size);\n        for (var i = 0; i < size; i++) {\n            textureIds[offset + i] = id;\n        }\n    };\n    /**\n     * Generates the UVs for a shape.\n     *\n     * @protected\n     * @param {number[]} verts - Vertices\n     * @param {number[]} uvs - UVs\n     * @param {PIXI.Texture} texture - Reference to Texture\n     * @param {number} start - Index buffer start index.\n     * @param {number} size - The size/length for index buffer.\n     * @param {PIXI.Matrix} [matrix] - Optional transform for all points.\n     */\n    GraphicsGeometry.prototype.addUvs = function (verts, uvs, texture, start, size, matrix) {\n        if (matrix === void 0) { matrix = null; }\n        var index = 0;\n        var uvsStart = uvs.length;\n        var frame = texture.frame;\n        while (index < size) {\n            var x = verts[(start + index) * 2];\n            var y = verts[((start + index) * 2) + 1];\n            if (matrix) {\n                var nx = (matrix.a * x) + (matrix.c * y) + matrix.tx;\n                y = (matrix.b * x) + (matrix.d * y) + matrix.ty;\n                x = nx;\n            }\n            index++;\n            uvs.push(x / frame.width, y / frame.height);\n        }\n        var baseTexture = texture.baseTexture;\n        if (frame.width < baseTexture.width\n            || frame.height < baseTexture.height) {\n            this.adjustUvs(uvs, texture, uvsStart, size);\n        }\n    };\n    /**\n     * Modify uvs array according to position of texture region\n     * Does not work with rotated or trimmed textures\n     *\n     * @param {number[]} uvs - array\n     * @param {PIXI.Texture} texture - region\n     * @param {number} start - starting index for uvs\n     * @param {number} size - how many points to adjust\n     */\n    GraphicsGeometry.prototype.adjustUvs = function (uvs, texture, start, size) {\n        var baseTexture = texture.baseTexture;\n        var eps = 1e-6;\n        var finish = start + (size * 2);\n        var frame = texture.frame;\n        var scaleX = frame.width / baseTexture.width;\n        var scaleY = frame.height / baseTexture.height;\n        var offsetX = frame.x / frame.width;\n        var offsetY = frame.y / frame.height;\n        var minX = Math.floor(uvs[start] + eps);\n        var minY = Math.floor(uvs[start + 1] + eps);\n        for (var i = start + 2; i < finish; i += 2) {\n            minX = Math.min(minX, Math.floor(uvs[i] + eps));\n            minY = Math.min(minY, Math.floor(uvs[i + 1] + eps));\n        }\n        offsetX -= minX;\n        offsetY -= minY;\n        for (var i = start; i < finish; i += 2) {\n            uvs[i] = (uvs[i] + offsetX) * scaleX;\n            uvs[i + 1] = (uvs[i + 1] + offsetY) * scaleY;\n        }\n    };\n    /**\n     * The maximum number of points to consider an object \"batchable\",\n     * able to be batched by the renderer's batch system.\n\\    */\n    GraphicsGeometry.BATCHABLE_SIZE = 100;\n    return GraphicsGeometry;\n}(core.BatchGeometry));\n\n/**\n * Represents the line style for Graphics.\n * @memberof PIXI\n * @class\n * @extends PIXI.FillStyle\n */\nvar LineStyle = /** @class */ (function (_super) {\n    __extends(LineStyle, _super);\n    function LineStyle() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** The width (thickness) of any lines drawn. */\n        _this.width = 0;\n        /** The alignment of any lines drawn (0.5 = middle, 1 = outer, 0 = inner). WebGL only. */\n        _this.alignment = 0.5;\n        /** If true the lines will be draw using LINES instead of TRIANGLE_STRIP */\n        _this.native = false;\n        /**\n         * Line cap style.\n         *\n         * @member {PIXI.LINE_CAP}\n         * @default PIXI.LINE_CAP.BUTT\n         */\n        _this.cap = exports.LINE_CAP.BUTT;\n        /**\n         * Line join style.\n         *\n         * @member {PIXI.LINE_JOIN}\n         * @default PIXI.LINE_JOIN.MITER\n         */\n        _this.join = exports.LINE_JOIN.MITER;\n        /** Miter limit. */\n        _this.miterLimit = 10;\n        return _this;\n    }\n    /**\n     * Clones the object\n     *\n     * @return {PIXI.LineStyle}\n     */\n    LineStyle.prototype.clone = function () {\n        var obj = new LineStyle();\n        obj.color = this.color;\n        obj.alpha = this.alpha;\n        obj.texture = this.texture;\n        obj.matrix = this.matrix;\n        obj.visible = this.visible;\n        obj.width = this.width;\n        obj.alignment = this.alignment;\n        obj.native = this.native;\n        obj.cap = this.cap;\n        obj.join = this.join;\n        obj.miterLimit = this.miterLimit;\n        return obj;\n    };\n    /**\n     * Reset the line style to default.\n     */\n    LineStyle.prototype.reset = function () {\n        _super.prototype.reset.call(this);\n        // Override default line style color\n        this.color = 0x0;\n        this.alignment = 0.5;\n        this.width = 0;\n        this.native = false;\n    };\n    return LineStyle;\n}(FillStyle));\n\nvar temp = new Float32Array(3);\n// a default shaders map used by graphics..\nvar DEFAULT_SHADERS = {};\n/**\n * The Graphics class is primarily used to render primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.  However, you can also use a Graphics\n * object to build a list of primitives to use as a mask, or as a complex hitArea.\n *\n * Please note that due to legacy naming conventions, the behavior of some functions in this class\n * can be confusing.  Each call to `drawRect()`, `drawPolygon()`, etc. actually stores that primitive\n * in the Geometry class's GraphicsGeometry object for later use in rendering or hit testing - the\n * functions do not directly draw anything to the screen.  Similarly, the `clear()` function doesn't\n * change the screen, it simply resets the list of primitives, which can be useful if you want to\n * rebuild the contents of an existing Graphics object.\n *\n * Once a GraphicsGeometry list is built, you can re-use it in other Geometry objects as\n * an optimization, by passing it into a new Geometry object's constructor.  Because of this\n * ability, it's important to call `destroy()` on Geometry objects once you are done with them, to\n * properly dereference each GraphicsGeometry and prevent memory leaks.\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nvar Graphics = /** @class */ (function (_super) {\n    __extends(Graphics, _super);\n    /**\n     * @param {PIXI.GraphicsGeometry} [geometry=null] - Geometry to use, if omitted\n     *        will create a new GraphicsGeometry instance.\n     */\n    function Graphics(geometry) {\n        if (geometry === void 0) { geometry = null; }\n        var _this = _super.call(this) || this;\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Graphics objects.\n         *\n         * @member {PIXI.Shader}\n         */\n        _this.shader = null;\n        /** Renderer plugin for batching */\n        _this.pluginName = 'batch';\n        /**\n         * Current path\n         *\n         * @member {PIXI.Polygon}\n         * @readonly\n         */\n        _this.currentPath = null;\n        /**\n         * A collections of batches! These can be drawn by the renderer batch system.\n         *\n         * @member {PIXI.IGraphicsBatchElement[]}\n         */\n        _this.batches = [];\n        /** Update dirty for limiting calculating tints for batches. */\n        _this.batchTint = -1;\n        /** Update dirty for limiting calculating batches.*/\n        _this.batchDirty = -1;\n        /** Copy of the object vertex data. */\n        _this.vertexData = null;\n        /**\n         * Current fill style\n         *\n         * @member {PIXI.FillStyle}\n         */\n        _this._fillStyle = new FillStyle();\n        /**\n         * Current line style\n         *\n         * @member {PIXI.LineStyle}\n         */\n        _this._lineStyle = new LineStyle();\n        /**\n         * Current shape transform matrix.\n         *\n         * @member {PIXI.Matrix}\n         */\n        _this._matrix = null;\n        /**  Current hole mode is enabled. */\n        _this._holeMode = false;\n        /**\n         * Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         *\n         * @member {PIXI.State}\n         */\n        _this.state = core.State.for2d();\n        _this._geometry = geometry || new GraphicsGeometry();\n        _this._geometry.refCount++;\n        /**\n         * When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\n         * This is useful if your graphics element does not change often, as it will speed up the rendering\n         * of the object in exchange for taking up texture memory. It is also useful if you need the graphics\n         * object to be anti-aliased, because it will be rendered using canvas. This is not recommended if\n         * you are constantly redrawing the graphics element.\n         *\n         * @name cacheAsBitmap\n         * @member {boolean}\n         * @memberof PIXI.Graphics#\n         * @default false\n         */\n        _this._transformID = -1;\n        // Set default\n        _this.tint = 0xFFFFFF;\n        _this.blendMode = constants.BLEND_MODES.NORMAL;\n        return _this;\n    }\n    Object.defineProperty(Graphics.prototype, \"geometry\", {\n        /**\n         * Includes vertex positions, face indices, normals, colors, UVs, and\n         * custom attributes within buffers, reducing the cost of passing all\n         * this data to the GPU. Can be shared between multiple Mesh or Graphics objects.\n         *\n         * @member {PIXI.GraphicsGeometry}\n         * @readonly\n         */\n        get: function () {\n            return this._geometry;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Creates a new Graphics object with the same values as this one.\n     * Note that only the geometry of the object is cloned, not its transform (position,scale,etc)\n     *\n     * @return {PIXI.Graphics} A clone of the graphics object\n     */\n    Graphics.prototype.clone = function () {\n        this.finishPoly();\n        return new Graphics(this._geometry);\n    };\n    Object.defineProperty(Graphics.prototype, \"blendMode\", {\n        get: function () {\n            return this.state.blendMode;\n        },\n        /**\n         * The blend mode to be applied to the graphic shape. Apply a value of\n         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.  Note that, since each\n         * primitive in the GraphicsGeometry list is rendered sequentially, modes\n         * such as `PIXI.BLEND_MODES.ADD` and `PIXI.BLEND_MODES.MULTIPLY` will\n         * be applied per-primitive.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL;\n         * @see PIXI.BLEND_MODES\n         */\n        set: function (value) {\n            this.state.blendMode = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Graphics.prototype, \"tint\", {\n        /**\n         * The tint applied to each graphic shape. This is a hex value. A value of\n         * 0xFFFFFF will remove any tint effect.\n         *\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        get: function () {\n            return this._tint;\n        },\n        set: function (value) {\n            this._tint = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Graphics.prototype, \"fill\", {\n        /**\n         * The current fill style.\n         *\n         * @member {PIXI.FillStyle}\n         * @readonly\n         */\n        get: function () {\n            return this._fillStyle;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Graphics.prototype, \"line\", {\n        /**\n         * The current line style.\n         *\n         * @member {PIXI.LineStyle}\n         * @readonly\n         */\n        get: function () {\n            return this._lineStyle;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Graphics.prototype.lineStyle = function (options, color, alpha, alignment, native) {\n        if (options === void 0) { options = null; }\n        if (color === void 0) { color = 0x0; }\n        if (alpha === void 0) { alpha = 1; }\n        if (alignment === void 0) { alignment = 0.5; }\n        if (native === void 0) { native = false; }\n        // Support non-object params: (width, color, alpha, alignment, native)\n        if (typeof options === 'number') {\n            options = { width: options, color: color, alpha: alpha, alignment: alignment, native: native };\n        }\n        return this.lineTextureStyle(options);\n    };\n    /**\n     * Like line style but support texture for line fill.\n     *\n     * @param {object} [options] - Collection of options for setting line style.\n     * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style\n     * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to use\n     * @param {number} [options.color=0x0] - color of the line to draw, will update the objects stored style.\n     *  Default 0xFFFFFF if texture present.\n     * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {PIXI.Matrix} [options.matrix=null] - Texture matrix to transform texture\n     * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outer).\n     *        WebGL only.\n     * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @param {PIXI.LINE_CAP}[options.cap=PIXI.LINE_CAP.BUTT] - line cap style\n     * @param {PIXI.LINE_JOIN}[options.join=PIXI.LINE_JOIN.MITER] - line join style\n     * @param {number}[options.miterLimit=10] - miter limit ratio\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    Graphics.prototype.lineTextureStyle = function (options) {\n        // Apply defaults\n        options = Object.assign({\n            width: 0,\n            texture: core.Texture.WHITE,\n            color: (options && options.texture) ? 0xFFFFFF : 0x0,\n            alpha: 1,\n            matrix: null,\n            alignment: 0.5,\n            native: false,\n            cap: exports.LINE_CAP.BUTT,\n            join: exports.LINE_JOIN.MITER,\n            miterLimit: 10,\n        }, options);\n        if (this.currentPath) {\n            this.startPoly();\n        }\n        var visible = options.width > 0 && options.alpha > 0;\n        if (!visible) {\n            this._lineStyle.reset();\n        }\n        else {\n            if (options.matrix) {\n                options.matrix = options.matrix.clone();\n                options.matrix.invert();\n            }\n            Object.assign(this._lineStyle, { visible: visible }, options);\n        }\n        return this;\n    };\n    /**\n     * Start a polygon object internally\n     * @protected\n     */\n    Graphics.prototype.startPoly = function () {\n        if (this.currentPath) {\n            var points = this.currentPath.points;\n            var len = this.currentPath.points.length;\n            if (len > 2) {\n                this.drawShape(this.currentPath);\n                this.currentPath = new math.Polygon();\n                this.currentPath.closeStroke = false;\n                this.currentPath.points.push(points[len - 2], points[len - 1]);\n            }\n        }\n        else {\n            this.currentPath = new math.Polygon();\n            this.currentPath.closeStroke = false;\n        }\n    };\n    /**\n     * Finish the polygon object.\n     * @protected\n     */\n    Graphics.prototype.finishPoly = function () {\n        if (this.currentPath) {\n            if (this.currentPath.points.length > 2) {\n                this.drawShape(this.currentPath);\n                this.currentPath = null;\n            }\n            else {\n                this.currentPath.points.length = 0;\n            }\n        }\n    };\n    /**\n     * Moves the current drawing position to x, y.\n     *\n     * @param {number} x - the X coordinate to move to\n     * @param {number} y - the Y coordinate to move to\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    Graphics.prototype.moveTo = function (x, y) {\n        this.startPoly();\n        this.currentPath.points[0] = x;\n        this.currentPath.points[1] = y;\n        return this;\n    };\n    /**\n     * Draws a line using the current line style from the current drawing position to (x, y);\n     * The current drawing position is then set to (x, y).\n     *\n     * @param {number} x - the X coordinate to draw to\n     * @param {number} y - the Y coordinate to draw to\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    Graphics.prototype.lineTo = function (x, y) {\n        if (!this.currentPath) {\n            this.moveTo(0, 0);\n        }\n        // remove duplicates..\n        var points = this.currentPath.points;\n        var fromX = points[points.length - 2];\n        var fromY = points[points.length - 1];\n        if (fromX !== x || fromY !== y) {\n            points.push(x, y);\n        }\n        return this;\n    };\n    /**\n     * Initialize the curve\n     *\n     * @param {number} [x=0]\n     * @param {number} [y=0]\n     */\n    Graphics.prototype._initCurve = function (x, y) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (this.currentPath) {\n            if (this.currentPath.points.length === 0) {\n                this.currentPath.points = [x, y];\n            }\n        }\n        else {\n            this.moveTo(x, y);\n        }\n    };\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     *\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    Graphics.prototype.quadraticCurveTo = function (cpX, cpY, toX, toY) {\n        this._initCurve();\n        var points = this.currentPath.points;\n        if (points.length === 0) {\n            this.moveTo(0, 0);\n        }\n        QuadraticUtils.curveTo(cpX, cpY, toX, toY, points);\n        return this;\n    };\n    /**\n     * Calculate the points for a bezier curve and then draws it.\n     *\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    Graphics.prototype.bezierCurveTo = function (cpX, cpY, cpX2, cpY2, toX, toY) {\n        this._initCurve();\n        BezierUtils.curveTo(cpX, cpY, cpX2, cpY2, toX, toY, this.currentPath.points);\n        return this;\n    };\n    /**\n     * The arcTo() method creates an arc/curve between two tangents on the canvas.\n     *\n     * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n     *\n     * @param {number} x1 - The x-coordinate of the first tangent point of the arc\n     * @param {number} y1 - The y-coordinate of the first tangent point of the arc\n     * @param {number} x2 - The x-coordinate of the end of the arc\n     * @param {number} y2 - The y-coordinate of the end of the arc\n     * @param {number} radius - The radius of the arc\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    Graphics.prototype.arcTo = function (x1, y1, x2, y2, radius) {\n        this._initCurve(x1, y1);\n        var points = this.currentPath.points;\n        var result = ArcUtils.curveTo(x1, y1, x2, y2, radius, points);\n        if (result) {\n            var cx = result.cx, cy = result.cy, radius_1 = result.radius, startAngle = result.startAngle, endAngle = result.endAngle, anticlockwise = result.anticlockwise;\n            this.arc(cx, cy, radius_1, startAngle, endAngle, anticlockwise);\n        }\n        return this;\n    };\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     *\n     * @param {number} cx - The x-coordinate of the center of the circle\n     * @param {number} cy - The y-coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param {number} endAngle - The ending angle, in radians\n     * @param {boolean} [anticlockwise=false] - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    Graphics.prototype.arc = function (cx, cy, radius, startAngle, endAngle, anticlockwise) {\n        if (anticlockwise === void 0) { anticlockwise = false; }\n        if (startAngle === endAngle) {\n            return this;\n        }\n        if (!anticlockwise && endAngle <= startAngle) {\n            endAngle += math.PI_2;\n        }\n        else if (anticlockwise && startAngle <= endAngle) {\n            startAngle += math.PI_2;\n        }\n        var sweep = endAngle - startAngle;\n        if (sweep === 0) {\n            return this;\n        }\n        var startX = cx + (Math.cos(startAngle) * radius);\n        var startY = cy + (Math.sin(startAngle) * radius);\n        var eps = this._geometry.closePointEps;\n        // If the currentPath exists, take its points. Otherwise call `moveTo` to start a path.\n        var points = this.currentPath ? this.currentPath.points : null;\n        if (points) {\n            // TODO: make a better fix.\n            // We check how far our start is from the last existing point\n            var xDiff = Math.abs(points[points.length - 2] - startX);\n            var yDiff = Math.abs(points[points.length - 1] - startY);\n            if (xDiff < eps && yDiff < eps) ;\n            else {\n                points.push(startX, startY);\n            }\n        }\n        else {\n            this.moveTo(startX, startY);\n            points = this.currentPath.points;\n        }\n        ArcUtils.arc(startX, startY, cx, cy, radius, startAngle, endAngle, anticlockwise, points);\n        return this;\n    };\n    /**\n     * Specifies a simple one-color fill that subsequent calls to other Graphics methods\n     * (such as lineTo() or drawCircle()) use when drawing.\n     *\n     * @param {number} [color=0] - the color of the fill\n     * @param {number} [alpha=1] - the alpha of the fill\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    Graphics.prototype.beginFill = function (color, alpha) {\n        if (color === void 0) { color = 0; }\n        if (alpha === void 0) { alpha = 1; }\n        return this.beginTextureFill({ texture: core.Texture.WHITE, color: color, alpha: alpha });\n    };\n    /**\n     * Begin the texture fill\n     *\n     * @param {object} [options] - Object object.\n     * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to fill\n     * @param {number} [options.color=0xffffff] - Background to fill behind texture\n     * @param {number} [options.alpha=1] - Alpha of fill\n     * @param {PIXI.Matrix} [options.matrix=null] - Transform matrix\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    Graphics.prototype.beginTextureFill = function (options) {\n        // Apply defaults\n        options = Object.assign({\n            texture: core.Texture.WHITE,\n            color: 0xFFFFFF,\n            alpha: 1,\n            matrix: null,\n        }, options);\n        if (this.currentPath) {\n            this.startPoly();\n        }\n        var visible = options.alpha > 0;\n        if (!visible) {\n            this._fillStyle.reset();\n        }\n        else {\n            if (options.matrix) {\n                options.matrix = options.matrix.clone();\n                options.matrix.invert();\n            }\n            Object.assign(this._fillStyle, { visible: visible }, options);\n        }\n        return this;\n    };\n    /**\n     * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.\n     *\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    Graphics.prototype.endFill = function () {\n        this.finishPoly();\n        this._fillStyle.reset();\n        return this;\n    };\n    /**\n     * Draws a rectangle shape.\n     *\n     * @param {number} x - The X coord of the top-left of the rectangle\n     * @param {number} y - The Y coord of the top-left of the rectangle\n     * @param {number} width - The width of the rectangle\n     * @param {number} height - The height of the rectangle\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    Graphics.prototype.drawRect = function (x, y, width, height) {\n        return this.drawShape(new math.Rectangle(x, y, width, height));\n    };\n    /**\n     * Draw a rectangle shape with rounded/beveled corners.\n     *\n     * @param {number} x - The X coord of the top-left of the rectangle\n     * @param {number} y - The Y coord of the top-left of the rectangle\n     * @param {number} width - The width of the rectangle\n     * @param {number} height - The height of the rectangle\n     * @param {number} radius - Radius of the rectangle corners\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    Graphics.prototype.drawRoundedRect = function (x, y, width, height, radius) {\n        return this.drawShape(new math.RoundedRectangle(x, y, width, height, radius));\n    };\n    /**\n     * Draws a circle.\n     *\n     * @param {number} x - The X coordinate of the center of the circle\n     * @param {number} y - The Y coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    Graphics.prototype.drawCircle = function (x, y, radius) {\n        return this.drawShape(new math.Circle(x, y, radius));\n    };\n    /**\n     * Draws an ellipse.\n     *\n     * @param {number} x - The X coordinate of the center of the ellipse\n     * @param {number} y - The Y coordinate of the center of the ellipse\n     * @param {number} width - The half width of the ellipse\n     * @param {number} height - The half height of the ellipse\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    Graphics.prototype.drawEllipse = function (x, y, width, height) {\n        return this.drawShape(new math.Ellipse(x, y, width, height));\n    };\n    /**\n     * Draws a polygon using the given path.\n     *\n     * @param {number[]|PIXI.Point[]|PIXI.Polygon} path - The path data used to construct the polygon.\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    Graphics.prototype.drawPolygon = function () {\n        var arguments$1 = arguments;\n\n        var path = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            path[_i] = arguments$1[_i];\n        }\n        var points;\n        var closeStroke = true; // !!this._fillStyle;\n        var poly = path[0];\n        // check if data has points..\n        if (poly.points) {\n            closeStroke = poly.closeStroke;\n            points = poly.points;\n        }\n        else if (Array.isArray(path[0])) {\n            points = path[0];\n        }\n        else {\n            points = path;\n        }\n        var shape = new math.Polygon(points);\n        shape.closeStroke = closeStroke;\n        this.drawShape(shape);\n        return this;\n    };\n    /**\n     * Draw any shape.\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - Shape to draw\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    Graphics.prototype.drawShape = function (shape) {\n        if (!this._holeMode) {\n            this._geometry.drawShape(shape, this._fillStyle.clone(), this._lineStyle.clone(), this._matrix);\n        }\n        else {\n            this._geometry.drawHole(shape, this._matrix);\n        }\n        return this;\n    };\n    /**\n     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n     *\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    Graphics.prototype.clear = function () {\n        this._geometry.clear();\n        this._lineStyle.reset();\n        this._fillStyle.reset();\n        this._boundsID++;\n        this._matrix = null;\n        this._holeMode = false;\n        this.currentPath = null;\n        return this;\n    };\n    /**\n     * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\n     * masked with gl.scissor.\n     *\n     * @returns {boolean} True if only 1 rect.\n     */\n    Graphics.prototype.isFastRect = function () {\n        var data = this._geometry.graphicsData;\n        return data.length === 1\n            && data[0].shape.type === math.SHAPES.RECT\n            && !data[0].holes.length\n            && !(data[0].lineStyle.visible && data[0].lineStyle.width);\n    };\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    Graphics.prototype._render = function (renderer) {\n        this.finishPoly();\n        var geometry = this._geometry;\n        var hasuint32 = renderer.context.supports.uint32Indices;\n        // batch part..\n        // batch it!\n        geometry.updateBatches(hasuint32);\n        if (geometry.batchable) {\n            if (this.batchDirty !== geometry.batchDirty) {\n                this._populateBatches();\n            }\n            this._renderBatched(renderer);\n        }\n        else {\n            // no batching...\n            renderer.batch.flush();\n            this._renderDirect(renderer);\n        }\n    };\n    /** Populating batches for rendering. */\n    Graphics.prototype._populateBatches = function () {\n        var geometry = this._geometry;\n        var blendMode = this.blendMode;\n        var len = geometry.batches.length;\n        this.batchTint = -1;\n        this._transformID = -1;\n        this.batchDirty = geometry.batchDirty;\n        this.batches.length = len;\n        this.vertexData = new Float32Array(geometry.points);\n        for (var i = 0; i < len; i++) {\n            var gI = geometry.batches[i];\n            var color = gI.style.color;\n            var vertexData = new Float32Array(this.vertexData.buffer, gI.attribStart * 4 * 2, gI.attribSize * 2);\n            var uvs = new Float32Array(geometry.uvsFloat32.buffer, gI.attribStart * 4 * 2, gI.attribSize * 2);\n            var indices = new Uint16Array(geometry.indicesUint16.buffer, gI.start * 2, gI.size);\n            var batch = {\n                vertexData: vertexData,\n                blendMode: blendMode,\n                indices: indices,\n                uvs: uvs,\n                _batchRGB: utils.hex2rgb(color),\n                _tintRGB: color,\n                _texture: gI.style.texture,\n                alpha: gI.style.alpha,\n                worldAlpha: 1\n            };\n            this.batches[i] = batch;\n        }\n    };\n    /**\n     * Renders the batches using the BathedRenderer plugin\n     *\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    Graphics.prototype._renderBatched = function (renderer) {\n        if (!this.batches.length) {\n            return;\n        }\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        this.calculateVertices();\n        this.calculateTints();\n        for (var i = 0, l = this.batches.length; i < l; i++) {\n            var batch = this.batches[i];\n            batch.worldAlpha = this.worldAlpha * batch.alpha;\n            renderer.plugins[this.pluginName].render(batch);\n        }\n    };\n    /**\n     * Renders the graphics direct\n     *\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    Graphics.prototype._renderDirect = function (renderer) {\n        var shader = this._resolveDirectShader(renderer);\n        var geometry = this._geometry;\n        var tint = this.tint;\n        var worldAlpha = this.worldAlpha;\n        var uniforms = shader.uniforms;\n        var drawCalls = geometry.drawCalls;\n        // lets set the transfomr\n        uniforms.translationMatrix = this.transform.worldTransform;\n        // and then lets set the tint..\n        uniforms.tint[0] = (((tint >> 16) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[1] = (((tint >> 8) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[2] = ((tint & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[3] = worldAlpha;\n        // the first draw call, we can set the uniforms of the shader directly here.\n        // this means that we can tack advantage of the sync function of pixi!\n        // bind and sync uniforms..\n        // there is a way to optimise this..\n        renderer.shader.bind(shader);\n        renderer.geometry.bind(geometry, shader);\n        // set state..\n        renderer.state.set(this.state);\n        // then render the rest of them...\n        for (var i = 0, l = drawCalls.length; i < l; i++) {\n            this._renderDrawCallDirect(renderer, geometry.drawCalls[i]);\n        }\n    };\n    /**\n     * Renders specific DrawCall\n     *\n     * @param {PIXI.Renderer} renderer\n     * @param {PIXI.BatchDrawCall} drawCall\n     */\n    Graphics.prototype._renderDrawCallDirect = function (renderer, drawCall) {\n        var texArray = drawCall.texArray, type = drawCall.type, size = drawCall.size, start = drawCall.start;\n        var groupTextureCount = texArray.count;\n        for (var j = 0; j < groupTextureCount; j++) {\n            renderer.texture.bind(texArray.elements[j], j);\n        }\n        renderer.geometry.draw(type, size, start);\n    };\n    /**\n     * Resolves shader for direct rendering\n     *\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    Graphics.prototype._resolveDirectShader = function (renderer) {\n        var shader = this.shader;\n        var pluginName = this.pluginName;\n        if (!shader) {\n            // if there is no shader here, we can use the default shader.\n            // and that only gets created if we actually need it..\n            // but may be more than one plugins for graphics\n            if (!DEFAULT_SHADERS[pluginName]) {\n                var MAX_TEXTURES = renderer.plugins.batch.MAX_TEXTURES;\n                var sampleValues = new Int32Array(MAX_TEXTURES);\n                for (var i = 0; i < MAX_TEXTURES; i++) {\n                    sampleValues[i] = i;\n                }\n                var uniforms = {\n                    tint: new Float32Array([1, 1, 1, 1]),\n                    translationMatrix: new math.Matrix(),\n                    default: core.UniformGroup.from({ uSamplers: sampleValues }, true),\n                };\n                var program = renderer.plugins[pluginName]._shader.program;\n                DEFAULT_SHADERS[pluginName] = new core.Shader(program, uniforms);\n            }\n            shader = DEFAULT_SHADERS[pluginName];\n        }\n        return shader;\n    };\n    /** Retrieves the bounds of the graphic shape as a rectangle object. */\n    Graphics.prototype._calculateBounds = function () {\n        this.finishPoly();\n        var geometry = this._geometry;\n        // skipping when graphics is empty, like a container\n        if (!geometry.graphicsData.length) {\n            return;\n        }\n        var _a = geometry.bounds, minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    };\n    /**\n     * Tests if a point is inside this graphics object\n     *\n     * @param {PIXI.IPointData} point - the point to test\n     * @return {boolean} the result of the test\n     */\n    Graphics.prototype.containsPoint = function (point) {\n        this.worldTransform.applyInverse(point, Graphics._TEMP_POINT);\n        return this._geometry.containsPoint(Graphics._TEMP_POINT);\n    };\n    /** Recalculate the tint by applying tint to batches using Graphics tint. */\n    Graphics.prototype.calculateTints = function () {\n        if (this.batchTint !== this.tint) {\n            this.batchTint = this.tint;\n            var tintRGB = utils.hex2rgb(this.tint, temp);\n            for (var i = 0; i < this.batches.length; i++) {\n                var batch = this.batches[i];\n                var batchTint = batch._batchRGB;\n                var r = (tintRGB[0] * batchTint[0]) * 255;\n                var g = (tintRGB[1] * batchTint[1]) * 255;\n                var b = (tintRGB[2] * batchTint[2]) * 255;\n                // TODO Ivan, can this be done in one go?\n                var color = (r << 16) + (g << 8) + (b | 0);\n                batch._tintRGB = (color >> 16)\n                    + (color & 0xff00)\n                    + ((color & 0xff) << 16);\n            }\n        }\n    };\n    /**\n     * If there's a transform update or a change to the shape of the\n     * geometry, recalculate the vertices.\n     */\n    Graphics.prototype.calculateVertices = function () {\n        var wtID = this.transform._worldID;\n        if (this._transformID === wtID) {\n            return;\n        }\n        this._transformID = wtID;\n        var wt = this.transform.worldTransform;\n        var a = wt.a;\n        var b = wt.b;\n        var c = wt.c;\n        var d = wt.d;\n        var tx = wt.tx;\n        var ty = wt.ty;\n        var data = this._geometry.points; // batch.vertexDataOriginal;\n        var vertexData = this.vertexData;\n        var count = 0;\n        for (var i = 0; i < data.length; i += 2) {\n            var x = data[i];\n            var y = data[i + 1];\n            vertexData[count++] = (a * x) + (c * y) + tx;\n            vertexData[count++] = (d * y) + (b * x) + ty;\n        }\n    };\n    /**\n     * Closes the current path.\n     *\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    Graphics.prototype.closePath = function () {\n        var currentPath = this.currentPath;\n        if (currentPath) {\n            // we don't need to add extra point in the end because buildLine will take care of that\n            currentPath.closeStroke = true;\n            // ensure that the polygon is completed, and is available for hit detection\n            // (even if the graphics is not rendered yet)\n            this.finishPoly();\n        }\n        return this;\n    };\n    /**\n     * Apply a matrix to the positional data.\n     *\n     * @param {PIXI.Matrix} matrix - Matrix to use for transform current shape.\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    Graphics.prototype.setMatrix = function (matrix) {\n        this._matrix = matrix;\n        return this;\n    };\n    /**\n     * Begin adding holes to the last draw shape\n     * IMPORTANT: holes must be fully inside a shape to work\n     * Also weirdness ensues if holes overlap!\n     * Ellipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,\n     * please use `moveTo` `lineTo`, `quadraticCurveTo` if you rely on pixi-legacy bundle.\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    Graphics.prototype.beginHole = function () {\n        this.finishPoly();\n        this._holeMode = true;\n        return this;\n    };\n    /**\n     * End adding holes to the last draw shape\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    Graphics.prototype.endHole = function () {\n        this.finishPoly();\n        this._holeMode = false;\n        return this;\n    };\n    /**\n     * Destroys the Graphics object.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    Graphics.prototype.destroy = function (options) {\n        this._geometry.refCount--;\n        if (this._geometry.refCount === 0) {\n            this._geometry.dispose();\n        }\n        this._matrix = null;\n        this.currentPath = null;\n        this._lineStyle.destroy();\n        this._lineStyle = null;\n        this._fillStyle.destroy();\n        this._fillStyle = null;\n        this._geometry = null;\n        this.shader = null;\n        this.vertexData = null;\n        this.batches.length = 0;\n        this.batches = null;\n        _super.prototype.destroy.call(this, options);\n    };\n    /**\n     * Temporary point to use for containsPoint\n     *\n     * @static\n     * @private\n     * @member {PIXI.Point}\n     */\n    Graphics._TEMP_POINT = new math.Point();\n    return Graphics;\n}(display.Container));\n\nvar graphicsUtils = {\n    buildPoly: buildPoly,\n    buildCircle: buildCircle,\n    buildRectangle: buildRectangle,\n    buildRoundedRectangle: buildRoundedRectangle,\n    buildLine: buildLine,\n    ArcUtils: ArcUtils,\n    BezierUtils: BezierUtils,\n    QuadraticUtils: QuadraticUtils,\n    BatchPart: BatchPart,\n    FILL_COMMANDS: FILL_COMMANDS,\n    BATCH_POOL: BATCH_POOL,\n    DRAW_CALL_POOL: DRAW_CALL_POOL\n};\n\nexports.FillStyle = FillStyle;\nexports.GRAPHICS_CURVES = GRAPHICS_CURVES;\nexports.Graphics = Graphics;\nexports.GraphicsData = GraphicsData;\nexports.GraphicsGeometry = GraphicsGeometry;\nexports.LineStyle = LineStyle;\nexports.graphicsUtils = graphicsUtils;\n//# sourceMappingURL=graphics.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","quadraticBezierCurve","fromX","fromY","cpX","cpY","toX","toY","out","xa","ya","xb","yb","i","j","n","points","length","x","y","push","square","nx","ny","innerWeight","outerWeight","clockwise","verts","exx","eyy","eox","eoy","round","cx","cy","sx","sy","ex","ey","cx2p0x","cy2p0y","angle0","Math","atan2","angle1","PI","angleDiff","radius","sqrt","segCount","absAngleDiff","abs","angleInc","angle","startAngle","sin","cos","buildLine","graphicsData","graphicsGeometry","lineStyle","native","shape","closedShape","type","math","SHAPES","POLY","closeStroke","indices","startIndex","currentIndex","slice","eps","closePointEps","style","firstPoint","Point","lastPoint","closedPath","pop","set","midPointX","midPointY","unshift","indexCount","indexStart","width","widthSquared","miterLimitSquared","miterLimit","x0","y0","x1","y1","perpx","perpy","dist","ratio","alignment","cap","LINE_CAP","ROUND","SQUARE","x2","y2","perp1x","perp1y","dx0","dy0","dx1","dy1","cross","c1","c2","px","py","pdist","imx","imy","omx","omy","insideWeight","smallerInsideSegmentSq","min","join","LINE_JOIN","BEVEL","eps2","GRAPHICS_CURVES","epsilon","defineProperty","value","core","utils","constants","display","adaptive","maxLength","minSegments","maxSegments","_segmentsCount","defaultSegments","isNaN","result","ceil","FillStyle","color","alpha","texture","Texture","WHITE","matrix","visible","reset","clone","FillStyle.prototype.clone","obj","FillStyle.prototype.reset","destroy","FillStyle.prototype.destroy","setPrototypeOf","__proto__","Array","p","hasOwnProperty","buildPoly","build","triangulate","holes","holeArray","hole","concat","triangles","earcut","vertPos","buildCircle","circleData","CIRC","height","ellipseData","totalSegs","floor","seg","center","circle","a","c","tx","ty","buildRectangle","rectData","buildRoundedRectangle","rrectData","max","vecPos","ArcUtils","curveTo","ArcUtils.curveTo","a1","b1","a2","b2","mm","dd","cc","tt","k1","k2","j1","j2","endAngle","anticlockwise","arc","ArcUtils.arc","_startX","_startY","_anticlockwise","sweep","PI_2","theta","theta2","cTheta","sTheta","segMinus","remainder","s","BezierUtils","curveLength","BezierUtils.curveLength","cpX2","cpY2","t","t2","t3","nt","nt2","nt3","prevX","prevY","dx","dy","BezierUtils.curveTo","dt","dt2","dt3","QuadraticUtils","QuadraticUtils.curveLength","ax","ay","bx","by","a32","ba","log","QuadraticUtils.curveTo","BatchPart","begin","BatchPart.prototype.begin","attribStart","start","end","BatchPart.prototype.end","endIndex","endAttrib","attribSize","size","BatchPart.prototype.reset","_a","FILL_COMMANDS","ELIP","RECT","RREC","BATCH_POOL","DRAW_CALL_POOL","GraphicsData","fillStyle","GraphicsData.prototype.clone","GraphicsData.prototype.destroy","tmpPoint","tmpBounds","Bounds","GraphicsGeometry","_super","_this","call","boundsPadding","uvsFloat32","indicesUint16","batchable","colors","uvs","textureIds","drawCalls","batchDirty","batches","dirty","cacheDirty","clearDirty","shapeIndex","_bounds","boundsDirty","get","calculateBounds","enumerable","configurable","invalidate","GraphicsGeometry.prototype.invalidate","texArray","clear","batchPart","GraphicsGeometry.prototype.clear","drawShape","GraphicsGeometry.prototype.drawShape","data","drawHole","GraphicsGeometry.prototype.drawHole","lastShape","GraphicsGeometry.prototype.destroy","indexBuffer","containsPoint","GraphicsGeometry.prototype.containsPoint","point","applyInverse","copyFrom","contains","hitHole","i_1","updateBatches","GraphicsGeometry.prototype.updateBatches","allow32Indices","validateBatching","currentStyle","command","transformPoints","index_1","attribIndex","baseTexture","wrapMode","WRAP_MODES","REPEAT","processFill","processLine","_compareStyles","addUvs","index","attrib","Uint32Array","Uint16Array","isBatchable","packBatches","buildDrawCalls","GraphicsGeometry.prototype._compareStyles","styleA","styleB","GraphicsGeometry.prototype.validateBatching","l","fill","line","valid","GraphicsGeometry.prototype.packBatches","Float32Array","batch","GraphicsGeometry.prototype.isBatchable","BATCHABLE_SIZE","GraphicsGeometry.prototype.buildDrawCalls","TICK","BaseTexture","_globalBatch","currentGroup","BatchDrawCall","BatchTextureArray","count","DRAW_MODES","TRIANGLES","textureCount","currentTexture","drawMode","nextTexture","LINES","MAX_TEXTURES","_batchEnabled","touched","_batchLocation","elements","textureId","addColors","addTextureIds","packAttributes","GraphicsGeometry.prototype.packAttributes","glPoints","ArrayBuffer","f32","u32","_buffer","update","_indexBuffer","GraphicsGeometry.prototype.processFill","processHoles","GraphicsGeometry.prototype.processLine","GraphicsGeometry.prototype.processHoles","GraphicsGeometry.prototype.calculateBounds","bounds","curMatrix","Matrix","IDENTITY","nextMatrix","lineWidth","sum","isEmpty","addBoundsMatrix","addFramePad","rect","ellipse","addVerticesMatrix","poly","pad","GraphicsGeometry.prototype.transformPoints","GraphicsGeometry.prototype.addColors","offset","rgba","premultiplyTint","GraphicsGeometry.prototype.addTextureIds","id","GraphicsGeometry.prototype.addUvs","uvsStart","frame","adjustUvs","GraphicsGeometry.prototype.adjustUvs","finish","scaleX","scaleY","offsetX","offsetY","minX","minY","BatchGeometry","LineStyle","apply","arguments","BUTT","MITER","LineStyle.prototype.clone","LineStyle.prototype.reset","temp","DEFAULT_SHADERS","Graphics","geometry","shader","pluginName","currentPath","batchTint","vertexData","_fillStyle","_lineStyle","_matrix","_holeMode","state","State","for2d","_geometry","refCount","_transformID","tint","blendMode","BLEND_MODES","NORMAL","Graphics.prototype.clone","finishPoly","_tint","Graphics.prototype.lineStyle","options","lineTextureStyle","Graphics.prototype.lineTextureStyle","assign","startPoly","invert","Graphics.prototype.startPoly","len","Polygon","Graphics.prototype.finishPoly","moveTo","Graphics.prototype.moveTo","lineTo","Graphics.prototype.lineTo","_initCurve","Graphics.prototype._initCurve","quadraticCurveTo","Graphics.prototype.quadraticCurveTo","bezierCurveTo","Graphics.prototype.bezierCurveTo","arcTo","Graphics.prototype.arcTo","Graphics.prototype.arc","startX","startY","yDiff","xDiff","beginFill","Graphics.prototype.beginFill","beginTextureFill","Graphics.prototype.beginTextureFill","endFill","Graphics.prototype.endFill","drawRect","Graphics.prototype.drawRect","Rectangle","drawRoundedRect","Graphics.prototype.drawRoundedRect","RoundedRectangle","drawCircle","Graphics.prototype.drawCircle","Circle","drawEllipse","Graphics.prototype.drawEllipse","Ellipse","drawPolygon","Graphics.prototype.drawPolygon","arguments$1","path","_i","isArray","Graphics.prototype.drawShape","Graphics.prototype.clear","_boundsID","isFastRect","Graphics.prototype.isFastRect","_render","Graphics.prototype._render","renderer","context","supports","uint32Indices","_populateBatches","_renderBatched","flush","_renderDirect","Graphics.prototype._populateBatches","gI","buffer","_batchRGB","hex2rgb","_tintRGB","_texture","worldAlpha","Graphics.prototype._renderBatched","setObjectRenderer","plugins","calculateVertices","calculateTints","render","Graphics.prototype._renderDirect","_resolveDirectShader","uniforms","translationMatrix","transform","worldTransform","bind","_renderDrawCallDirect","Graphics.prototype._renderDrawCallDirect","drawCall","groupTextureCount","draw","Graphics.prototype._resolveDirectShader","sampleValues","Int32Array","default","UniformGroup","from","uSamplers","Shader","_shader","program","_calculateBounds","Graphics.prototype._calculateBounds","addFrame","maxX","maxY","Graphics.prototype.containsPoint","_TEMP_POINT","Graphics.prototype.calculateTints","tintRGB","Graphics.prototype.calculateVertices","wtID","_worldID","wt","closePath","Graphics.prototype.closePath","setMatrix","Graphics.prototype.setMatrix","beginHole","Graphics.prototype.beginHole","endHole","Graphics.prototype.endHole","Graphics.prototype.destroy","dispose","Container","graphicsUtils"]
}
