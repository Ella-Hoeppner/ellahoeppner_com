{"version":3,"sources":["ellah/graphics.cljs"],"mappings":";;;AASA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAe,AAAA,AAACC;;AAEzB,AAAA,AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD;AAAN,AAAA,AAAAE,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAuBK;AAAvB,AACE,AAACC,AAAI,AAAA,AAAA,AAAAC,AAAYjB,AACZ,AAAAkB,AAAIH;AAAJ,AAAA,AAAAG;AAAAA;;AAAU,AAACC,AAAMC;;;;;AAFxB,AAAA,AAAA,AAAMZ;;AAAN;AAAA,AAAA,AAAA,AAAAI,AAAMJ;AAAN,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAIA,AAAA,AAAMS,AAAWC,AAAIC;AAArB,AACE,AAAA,AAAAC,AAACC,AAAMzB;AAAP,AACQ,AAAAwB,AAACE,AAAQJ,AAAIC;;;AACrBA;;AAEF,AAAA,AAAMI,AAAcL,AAAIC;AAAxB,AACE,AAAA,AAAAK,AAACH,AAAMzB;AAAP,AACQ,AAAA4B,AAACC,AAASP,AAAIC;;;AAExB,AAAA,AAAMO;AAAN,AAAmB,AAAcC;;AACjC,AAAA,AAAMC;AAAN,AAAoB,AAAeD;;AACnC,AAAA,AAAME;AAAN,AAAkB,AAAAC,AAAK,AAACJ;AAANK,AAAiB,AAACH;AAAlB,AAAA,AAAAE,AAAAC,AAAAD,AAAAC;;AAClB,AAAA,AAAMC;AAAN,AAA0B,AAAG,AAACN,AAAW,AAACE;;AAE1C,AAAA,AAAMK;AAAN,AACE,AAAMC,AAAW,AAAA,AAAA,AAAArB,AAAcjB;AAA/B,AACE,AAAA,AAAM,AAAW,AAASsC;;AAE9B,AAAA,AAAMC,AAAqBC;AAA3B,AACE,AAAMF,AAAW,AAAA,AAAA,AAAArB,AAAcjB;AAA/B,AACE,AAAA,AAAM,AAAW,AAASsC;;AAC1B,AAAM,AAASA,AACT,AAAA,AAAQ,AAACG,AAAe,AAAA,AAAA,AAAAxB,AAAQjB,AACR,AAAA,AAAA,AAAC0C,AAAWF;;AAC5C,AAAA,AAACnB,AAA2BmB;;AAE9B,AAAA,AAAMG;AAAN,AACE,AAAMC,AAAc,AAACd;AACfe,AAAe,AAACb;AADtB,AAEE,AAAS,AAAY,AAAA,AAAA,AAAAf,AAAOjB,AAAiB4C,AAAcC;;AAC3D,AAAMP,AAAW,AAAA,AAAA,AAAArB,AAAcjB;AACzB8C,AAAW,AAAGF,AAAcG;AADlC,AAEE,AAAM,AAAQ,AAAST,AACjB,AAAA,AAAK,AAAA,AAAK,AAAA,AAAG,AAAGM,AAAcE;;AACpC,AAAM,AAAO,AAASR,AAChB,AAAA,AAAK,AAAA,AAAK,AAAA,AAAGO;;AACnB,AAAM,AAAS,AAAS,AAAA,AAAA,AAAA5B,AAAcjB,AAChC,AAAA,AAAK,AAAA,AAAK8C;;AAEtB,AAAA,AAAME,AAAUC;AAAhB,AACE,AAAMC,AAAE,AAACpB;AACHqB,AAAE,AAACnB;AACHoB,AAAE,AAAAlB,AAAKgB;AAALf,AAAOgB;AAAP,AAAA,AAAAjB,AAAAC,AAAAD,AAAAC;;AAFR,AAGE,AAAG,AAAA,AAAO,AAAGe,AAAEE,AAAI,AAAGH,AAAEG;;AAE5B,AAAA,AAAMC,AAAgBC,AAAOC;AAA7B,AACE,AAAM,AAACC,AAAgBF,AAAOC;AAA9B,AACE,AAAAE,AAA2BH;AAA3BG,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAzC,AAAAyC,AAAA,AAAcI;AAAd,AACE,AAAI,AAACC,AAAOD;AAAZ,AAAA;;AAEE,AAAA3C,AAAI,AAAC6C,AAAK,AAAKC;AAAL,AACE,AAAMC,AAAU,AAACtD,AAAIkD,AAAWG;AAC1BE,AAAS,AAACb,AAAAA,AAAAA,AAAeY,AAAAA,AAAUV,AAAAA;AADzC,AAEE,AAAMW;AAAN,AACE,AAACC,AAAKD,AAASF;;AADjB;;AAEJ,AAACI,AAAM,AAACC,AAAMR;AALxB,AAAA,AAAA3C;AAAAA;;AAAA,AAAA;;;;AAJN;;;AAYF,AAAA,AAAMoD,AAA0BhB,AAAOC;AAAvC,AACE,AAAM,AAACC,AAAgBF,AAAOC;AAA9B,AACE,AAAAgB,AAA2BjB;AAA3BiB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAb,AAAA,AAAAa,AAAA,AAAA,AAAA,AAAA,AAAAZ,AAAAC,AAAAW,AAAAA;AAAA,AAAAvD,AAAAuD,AAAA,AAAcV;AAAd,AACE,AAAI,AAACC,AAAOD;AAAZ,AAAA;;AAEE,AAAA3C,AAAI,AAAC6C,AAAK,AAAKC;AAAL,AACE,AAAMC,AAAU,AAACtD,AAAIkD,AAAWG;AAC1BE,AAAS,AAACI,AAAAA,AAAAA,AAAyBL,AAAAA,AAAUV,AAAAA;AADnD,AAEE,AAAMW;AAAN,AACE,AAACC,AAAKD,AAASF;;AADjB;;AAEJ,AAACI,AAAM,AAACC,AAAMR;AALxB,AAAA,AAAA3C;AAAAA;;AAMI,AAAMsD,AAAK,AAACC,AAAqBlB,AAAID;AAArC,AACE,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAAK,AAAG,AAAG,AAACL,AAAMR,AACP,AAACc,AAAI,AAAG,AAACC,AAAiBJ,AAAMK,AAC3BC,AACRA;;;;AAd1B;;;AAgBF,AAAA,AAAMC,AAAezB,AAAOd;AAA5B,AACE,AAAI,AAACsB,AAAOtB;AACVc;;AACA,AAAA0B,AAAe,AAACrE,AAAI,AAAA,AAAa2C,AACb,AAACnC,AAAMqB;AAD3ByC,AAEe,AAACC,AAAK1C;AAFrB,AAAA,AAAAwC,AAAAC,AAAAD,AAAAC,AAACF,AAAAA,AAAAA;;;AAIL,AAAA,AAAMI,AAAaC,AAAKC;AAAxB,AACE,AAAME,AAAeF;AAArBC,AACoCF;AADpCE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5B,AAAA,AAAA4B,AAAA,AAAA,AAAA,AAAA,AAAA3B,AAAAC,AAAA0B,AAAAA;AAAA,AAAAtE,AAAAsE,AAAA,AACcE;AADd,AAAAxE,AAAAsE,AAAA,AACmB/D;AADnB,AAAAP,AAAAsE,AAAA,AACyBG;AADzB,AAEE,AAAI,AAAA,AAACC,AAAEF;AACL,AAAA,AAAA,AAAC9D,AAAM6D,AACMC,AACCjE;;AACd,AAAA,AAAA,AAACG,AAAM6D,AACMC,AAEN,AAAMG,AAAc,AAACtB,AAAMoB;AAA3B,AACE,AAAI,AAAA,AAACC,AAAEC;AAAP,AACG,AAAAC,AAAa,AAACzE,AAAMsE;AAApBI,AACa,AAAA,AAACnE,AAAM6D,AACQ,AAAGO,AAAqC,AAAA,AAASP;AAF7E,AAAA,AAAAK,AAAAC,AAAAD,AAAAC,AAACV,AAAAA,AAAAA;;;AAGF,AAAMY,AAAW,AAACC,AAAS,AAAGC,AAAQN;AAChCO,AAAgB,AAAGH,AAAW,AAAA,AAAKA;AACnCI,AAAO,AAAA,AAAGD,AAAgB,AAAA,AAAKE,AAA4B,AAAA,AAASb;AAF1E,AAGE,AAACc,AAAK,AAAKC,AAAQtC;AAAb,AACE,AAAMuC,AAAM,AAAG,AAAA,AAAGN,AACH,AAAG,AAAA,AAAA,AAAGA,AAAUjC,AAAG2B;AADlC,AAEE,AAAAa,AAAaF;AAAbG,AACa,AAAA,AAAC/E,AAAM,AAACgF,AAAgBnB,AACA,AAACoB,AAAiB,AAACC,AAAiBL,AAClB,AAAG,AAAG,AAAA,AAAShB,AACT,AAAA,AAAKa,AACRD,AAC9B,AAAGU,AAAgCV;AAN/D,AAAA,AAAAK,AAAAC,AAAAD,AAAAC,AAACtB,AAAAA,AAAAA;AAOLM,AACA,AAACrB;;;;;AAE1B,AAAA,AAAM0C;AAAN,AACE,AAAC3B,AAAY,AAAChE,AAAM,AAAA,AAAW,AAAA,AAAA,AAAAF,AAAQjB,AAC1B,AAAA,AAAA,AAAC0B,AAAMqF;;AAGtB,AAAA,AAAMC;AAAN,AACE,AAAA,AAACL,AAAiB,AAAC5B,AAAc,AAAC+B,AACD,AAAA,AAAA,AAAA7F,AAAwBjB;;AAG3D,AAAA,AAAMiH;AAAN,AACE,AAAGC,AACA,AAAA,AACC,AAACnC,AAAc,AAAC+B,AACD,AAAA,AAAA,AAAA7F,AAAwBjB;;AAE7C,AAAA,AAAMmH,AAAUC;AAAhB,AACE,AAAMlE,AAAE,AAACpB;AACHqB,AAAE,AAACnB;AACHoB,AAAE,AAAAlB,AAAKgB;AAALf,AAAOgB;AAAP,AAAA,AAAAjB,AAAAC,AAAAD,AAAAC;;AAFR,AAGE,AAAG,AAAA,AAAO,AAAGgB,AAAEC,AAAI,AAAGgE,AAAEhE;;AAE5B,AAAA,AAAA,AAAAlD,AAAMmH;AAAN,AAAA,AAAAlH,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA/G;;;AAAA,AAAA,AAAA,AAAA,AAAAgH,AAAAC,AAAMF,AAAiBW;AAAvB,AAAA,AAAAR,AAAAF;AAAA,AAAA3G,AAAA6G,AAAA,AAAA,AAAajE;AAAb,AAAA5C,AAAA6G,AAAA,AAAA,AAAiBO;AAAjBN,AAAAF;AAAA,AAAA5G,AAAA8G,AAAA,AAAA,AAA+B1G;AAA/B,AACE,AAAMkH,AAAS,AAACC,AAAanH;AAA7B,AACE,AAAYkH,AAASD;;AACrB,AAAWC,AACA,AAACjF,AAAS,AAAA,AAAIO,AACd,AAAC4D,AAAS,AAAA,AAAI5D,AACd,AAAG,AAAA,AAAIwE,AAAM,AAAC9F,AACd,AAAG,AAAA,AAAI8F,AAAM,AAAC9F;;AACzB,AAAUgG;;;AARd,AAAA,AAAA,AAAMZ;;AAAN;AAAA,AAAA,AAAA,AAAAK,AAAML;AAAN,AAAA,AAAAM,AAAA,AAAAxG,AAAAuG;AAAAA,AAAA,AAAAE,AAAAF;AAAAG,AAAA,AAAA1G,AAAAuG;AAAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAE,AAAAH;;;AAAA,AAUA,AAAA,AAAA,AAAAxH,AAAMiI;AAAN,AAAA,AAAAhI,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA7H;;;AAAA,AAAA,AAAA,AAAA,AAAA8H,AAAAC,AAAMF,AAA6BH;AAAnC,AAAA,AAAAM,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5E,AAAA,AAAA4E,AAAA,AAAA,AAAA,AAAA,AAAA3E,AAAAC,AAAA0E,AAAAA;AAAA,AAAAtH,AAAAsH,AAAA,AAAsBrF;AAAtB,AAAAjC,AAAAsH,AAAA,AAAwBlB;AAAxB,AAAApG,AAAAsH,AAAA,AAA0BnC;AAA1BoC,AAAAF;AAAA,AAAA1H,AAAA4H,AAAA,AAAA,AAA2CxH;AAA3C,AACE,AAAMkH,AAAS,AAACC,AAAanH;AAA7B,AACE,AAAYkH,AAASD;;AACrB,AAAaC,AACA,AAACjF,AAASC,AACV,AAACkE,AAASC,AACV,AAAGjB,AAAO,AAAClE;;AACxB,AAAUgG;;;AAPd,AAAA,AAAA,AAAME;;AAAN;AAAA,AAAA,AAAA,AAAAK,AAAML;AAAN,AAAA,AAAAM,AAAA,AAAAtH,AAAAqH;AAAAA,AAAA,AAAAZ,AAAAY;AAAAE,AAAA,AAAAvH,AAAAqH;AAAAA,AAAA,AAAAZ,AAAAY;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAA,AAAAA,AAAAW,AAAAC,AAAAF;;;AAAA,AASA,AAAA,AAAA,AAAAtI,AAAMyI;AAAN,AAAA,AAAAxI,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAArI;;;AAAA,AAAA,AAAA,AAAA,AAAAsI,AAAMD,AAASM,AAAOjB;AAAtB,AAAA,AAAAa,AAAAD;AAAA,AAAAjI,AAAAkI,AAAA,AAAA,AAA8B9H;AAA9B,AACE,AAAMkH,AAAS,AAACC,AAAanH;AAA7B,AACE,AAAYkH,AAASD;;AACrB,AAAcC,AACA,AAACiB,AAAQ,AAAA,AAAAC,AAAC9C;AAAD,AAAO,AAAA+C,AAAa,AAACpG,AAAS,AAAA,AAAAmG,AACV,AAAChC,AAAS,AAAA,AAAAgC;AACxBF;;AAC7B,AAAUhB;;;AAPd,AAAA,AAAA,AAAMU;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAA5H,AAAA2H;AAAAA,AAAA,AAAAlB,AAAAkB;AAAAE,AAAA,AAAA7H,AAAA2H;AAAAA,AAAA,AAAAlB,AAAAkB;AAAA,AAAA,AAAAhB,AAAA;AAAA,AAAA,AAAAA,AAAAiB,AAAAC,AAAAF;;;AAAA,AASA,AAAA,AAAA,AAAA5I,AAAMmJ;AAAN,AAAA,AAAAlJ,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA/I;;;AAAA,AAAA,AAAA,AAAA,AAAAgJ,AAAMD,AAAMQ,AAAMC,AAAIC,AAAMC;AAA5B,AAAA,AAAAT,AAAAD;AAAA,AAAA3I,AAAA4I,AAAA,AAAA,AAAqCxI;AAArC,AACE,AAAMkH,AAAS,AAACC,AAAanH;AAA7B,AACE,AAAYkH,AACA,AAAG8B,AAAM,AAACjI,AACVkI;;AACZ,AAAS/B,AACA,AAACjF,AAAS,AAAA,AAAI6G,AACd,AAAC1C,AAAS,AAAA,AAAI0C;;AACvB,AAAS5B,AACA,AAACjF,AAAS,AAAA,AAAI8G,AACd,AAAC3C,AAAS,AAAA,AAAI2C;;AACvB,AAAA,AAAY7B;;;AAXhB,AAAA,AAAA,AAAMoB;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAtI,AAAAqI;AAAAA,AAAA,AAAA5B,AAAA4B;AAAAE,AAAA,AAAAvI,AAAAqI;AAAAA,AAAA,AAAA5B,AAAA4B;AAAAG,AAAA,AAAAxI,AAAAqI;AAAAA,AAAA,AAAA5B,AAAA4B;AAAAI,AAAA,AAAAzI,AAAAqI;AAAAA,AAAA,AAAA5B,AAAA4B;AAAA,AAAA,AAAA1B,AAAA;AAAA,AAAA,AAAAA,AAAA2B,AAAAC,AAAAC,AAAAC,AAAAJ;;;AAAA,AAaA,AAAA,AAAA,AAAAtJ,AAAM+J;AAAN,AAAA,AAAA9J,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8J,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA3J;;;AAAA,AAAA,AAAA,AAAA,AAAA4J,AAAMD,AAAM7G,AAAEG,AAAIwE,AAAKiC;AAAvB,AAAA,AAAAG,AAAAD;AAAA,AAAAvJ,AAAAwJ,AAAA,AAAA,AAAgCpJ;AAAhC,AACE,AAAM,AAAA,AAAA,AAAAE,AAAgBjB;AAAtB,AACE,AAAMyK,AAAO,AAACpG,AAAMjB;AACdsH,AAAE,AAAAC,AAAY,AAAKvH,AACL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC8F,AAAqB0B,AAENZ;AAC9Ba,AAAM,AAAA,AAAG9C,AAAK,AAAC9F,AACN,AAAAC,AAAK4I;AAAL3I,AACK,AAAG4I,AACAN;AAFR,AAAA,AAAAvI,AAAAC,AAAAD,AAAAC;;AANf,AASE,AAAM,AAAKuI,AACL,AAAG,AAAG,AAAC1H,AAAS,AAAA,AAAIO,AACd,AAAGsH,AAAMG,AACZ,AAAA,AAAA,AAAG,AAASN,AAAGG;;AACxB,AAAM,AAAKH,AACL,AAAG,AAAG,AAACvD,AAAS,AAAA,AAAI5D,AACd,AAAGsH,AAAMI,AACZ,AAAA,AAAA,AAAG,AAAUP,AAAGG;;AACzB,AAAM,AAAK,AAASH,AAAIG;;AACxB,AAAM,AAAK,AAASH,AAAIG;;AACxB,AAAA,AAAM,AAAcH;;AACpB,AAAW,AAAC1J,AAAI,AAAA,AAAA,AAAAC,AAASjB,AACT,AAAAkB,AAAIH;AAAJ,AAAA,AAAAG;AAAAA;;AAAU,AAACC,AAAMC;;AACtBsJ;;AAvBf;;;;AADF,AAAA,AAAA,AAAMT;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAlJ,AAAAiJ;AAAAA,AAAA,AAAAxC,AAAAwC;AAAAE,AAAA,AAAAnJ,AAAAiJ;AAAAA,AAAA,AAAAxC,AAAAwC;AAAAG,AAAA,AAAApJ,AAAAiJ;AAAAA,AAAA,AAAAxC,AAAAwC;AAAAI,AAAA,AAAArJ,AAAAiJ;AAAAA,AAAA,AAAAxC,AAAAwC;AAAA,AAAA,AAAAtC,AAAA;AAAA,AAAA,AAAAA,AAAAuC,AAAAC,AAAAC,AAAAC,AAAAJ;;;AAAA,AA0BA,AAAA,AAAMc,AAAgB5H;AAAtB,AACE,AAAI,AAAA,AAAaA;AACf,AAACa,AAAK,AAACgH,AAAOD,AACA,AAAA,AAAa5H,AACrB,AAAA,AAAC8H,AAAO9H;;AACd,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAMpB;;;AAEV,AAAA,AAAM+H;AAAN,AACE,AAACC,AAAiBC,AACA,AAACnJ;;AAErB,AAAA,AAAMoJ,AAAelI,AAAOC,AAAIkI;AAAhC,AACMnI,AACA,AAAA,AAAA,AAAAoI,AAAC7J,AACD,AAACA,AACD,AAACA,AACD,AAACA;AAHD,AAAY,AAAG4J,AAAK,AAAAC,AAAK,AAAA,AAAInI;AAC7B,AAAA,AAAAoI;AAAA,AAAY,AAAGF,AAAK,AAAAE,AAAK,AAAA,AAAIpI;AAC7B,AAAgB,AAACqI,AAAQC,AAAEJ,AAC3B,AACQ,AAAKK;AAAL,AACE,AAAMA;AAAN,AACE,AAAA,AAAAC,AAAC1F;AAAD,AAAO,AAAA0F,AAAAA,AAACP,AAAAA,AAAAA,AAAgBjI,AAAAA,AAAIkI,AAAAA;AACtBK;;AAFR;;;;AAIhB,AAAA,AAAME,AAAY1I,AAAO2I,AAAKC;AAA9B,AACE,AAAC,AAAAC,AAAO7I,AAAgCgJ;AAAvC,AAAA,AAAAF,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1I,AAAA,AAAA0I,AAAA,AAAA,AAAA,AAAA,AAAAzI,AAAAC,AAAAwI,AAAAA;AAAAA,AAA+BC;AAA/B,AAAArL,AAAAoL,AAAA,AAAsBnJ;AAAtB,AAAAjC,AAAAoL,AAAA,AAAwBhF;AAAxB,AACE,AAAA,AACM9D,AACA,AAAA,AAAA,AAAAiJ,AAAC1K,AACD,AAACA,AACD,AAACA,AACD,AAACA;AAHD,AAAY,AAAGoB,AAAE,AAAAsJ,AAAKD;AACtB,AAAA,AAAAE;AAAA,AAAY,AAAGpF,AAAE,AAAAoF,AAAKF;AACtB,AAAgB,AAACV,AAAQC,AAAES,AAC3B,AACQ,AAAKR;AAAL,AACE,AAAMA;AAAN,AACE,AAAA,AAAAW,AAACpG;AAAD,AAAO,AAAAoG,AAACC,AACEL,AACAC;AACJR;;AAJR;;;AAKlBxI,AACA,AAACoD,AACgB,AAACjC,AAAqB,AAACA,AAAqByH,AAAG,AAACvF,AAAiBgG,AAAU,AAAA,AAAST,AAC9D,AAACzH,AAAqBwH,AAAK,AAACtF,AAAiBgG,AAAU,AAAA,AAASV,AAGvG,AAAG,AAAA,AAASC,AAAI,AAAA,AAASD;;AAE5B,AAAA,AAAA,AAAA/L,AAAM0M;AAAN,AAAA,AAAAzM,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyM,AAAA,AAAA,AAAA,AAAAtM;;;AAAA,AAAA,AAAA,AAAA,AAAAuM,AAAMD,AAAetJ;AAArB,AAAA,AAAAwJ,AAAAD;AAAA,AAAAlM,AAAAmM,AAAA,AAAA,AAA+B/L;AAA/B,AACE,AAAMkM,AAAO3J;AACP6C,AAAO,AAAA,AAAS7C;AADtB,AAEE,AAAM,AAAA4J,AAAqC,AAAA,AAAO5J;AAA5C6J,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAD,AAAAC,AAAAD;;AAAN,AACE,AAACE,AAAO9J,AACA+J,AACAtM;;AAHV;;AAIA,AAAM,AAAAuM,AAAiB,AAAA,AAAOhK;AAAxBiK,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAD,AAAAC,AAAAD;;AAAN,AACE,AAAME,AAAE,AAAA,AAASlK;AAAjB,AACE,AAAAmK,AAAA,AAAA3M,AAAA,AAAoB,AAAA,AAAG+D,AACH,AAAA,AAAGA,AACH,AAAA,AAAGA,AACH,AAAA,AAAGA;AAHvB6I,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQM;AAAR,AAAA,AAIE,AAAA,AAACC,AAAS,AAACzH,AAAgBpD,AACA,AAACqD,AAAiB,AAACC,AAAiB,AAAGsH,AAAWE,AAChCZ,AACnC,AAAC9G,AAAgBpD,AACA,AAACqD,AAAiB,AAACC,AAAiBsH,AAClB,AAAG,AAAA,AAAKG,AAA4Bb,AACvE,AAAC9G,AAAgBpD,AACA,AAACqD,AAAiB,AAACC,AAAiB,AAAGsH,AAAWE,AAChCZ,AACpCH,AACAtM;;AAdX;AAAA,AAAA0M;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAA/M,AAAA2M;AAAA,AAAA,AAAAI;AAAA,AAAA,AAAAJ,AAAAI;AAAA,AAAA,AAAA,AAAAC,AAAAL;AAAA,AAAAM,AAAA,AAAAC,AAAAP;AAAA,AAAA,AAAA,AAAAQ,AAAAR;AAAAM;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAAsM,AAAQS;AAAR,AAAA,AAIE,AAAA,AAACC,AAAS,AAACzH,AAAgBpD,AACA,AAACqD,AAAiB,AAACC,AAAiB,AAAGsH,AAAWE,AAChCZ,AACnC,AAAC9G,AAAgBpD,AACA,AAACqD,AAAiB,AAACC,AAAiBsH,AAClB,AAAG,AAAA,AAAKG,AAA4Bb,AACvE,AAAC9G,AAAgBpD,AACA,AAACqD,AAAiB,AAACC,AAAiB,AAAGsH,AAAWE,AAChCZ,AACpCH,AACAtM;;AAdX;AAAA,AAAA,AAAA6G,AAAA6F;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAFJ;;AAiBA,AAAM,AAAAa,AAAiB,AAAA,AAAOhL;AAAxBiL,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAD,AAAAC,AAAAD;;AAAN,AACE,AAAMd,AAAE,AAAA,AAASlK;AAAjB,AACE,AAAAkL,AAAA,AAAA1N,AAAA,AAAA,AACe,AAAA,AAAG+D,AACHA,AACA,AAAA,AAAGA;AAHlB4J,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQpI;AAAR,AAAA,AAIE,AAAMqI,AAAY,AAACjI,AAAiB,AAACC,AAAiB,AAAGL,AAAM,AAAA,AAAG1B,AAC9B,AAAG2I,AAAEqB;AADzC,AAEE,AAAAC,AAAA,AAAAhO,AAAA,AAAgB8N,AAAY,AAAA,AAACjI,AAAiBiI;AAA9CG,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQ5C;AAAR,AAAA,AACE,AAACiD,AAAK,AAAC5I,AAAgB2F,AAAO/I,AACxB,AAACoD,AAAgBpD,AACA+I,AACA,AAAC1F,AAAiB,AAACC,AAAiBL,AAClB,AAAG,AAAA,AAAKgJ,AAA2B/B,AACtE,AAAGA,AAAEgC,AACLnC,AACAtM;;AARR;AAAA,AAAA+N;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAApB,AAAA,AAAA/M,AAAAgO;AAAA,AAAA,AAAAjB;AAAA,AAAA,AAAAiB,AAAAjB;AAAA,AAAA,AAAA,AAAAC,AAAAgB;AAAA,AAAAf,AAAA,AAAAC,AAAAc;AAAA,AAAA,AAAA,AAAAb,AAAAa;AAAAf;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAA2N,AAAQzC;AAAR,AAAA,AACE,AAACiD,AAAK,AAAC5I,AAAgB2F,AAAO/I,AACxB,AAACoD,AAAgBpD,AACA+I,AACA,AAAC1F,AAAiB,AAACC,AAAiBL,AAClB,AAAG,AAAA,AAAKgJ,AAA2B/B,AACtE,AAAGA,AAAEgC,AACLnC,AACAtM;;AARR;AAAA,AAAA,AAAA6G,AAAAkH;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AANJ;AAAA,AAAAN;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAd,AAAA,AAAA/M,AAAA0N;AAAA,AAAA,AAAAX;AAAA,AAAA,AAAAW,AAAAX;AAAA,AAAA,AAAA,AAAAC,AAAAU;AAAA,AAAAT,AAAA,AAAAC,AAAAQ;AAAA,AAAA,AAAA,AAAAP,AAAAO;AAAAT;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAAqN,AAAQjI;AAAR,AAAA,AAIE,AAAMqI,AAAY,AAACjI,AAAiB,AAACC,AAAiB,AAAGL,AAAM,AAAA,AAAG1B,AAC9B,AAAG2I,AAAEqB;AADzC,AAEE,AAAAK,AAAA,AAAApO,AAAA,AAAgB8N,AAAY,AAAA,AAACjI,AAAiBiI;AAA9CO,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQhD;AAAR,AAAA,AACE,AAACiD,AAAK,AAAC5I,AAAgB2F,AAAO/I,AACxB,AAACoD,AAAgBpD,AACA+I,AACA,AAAC1F,AAAiB,AAACC,AAAiBL,AAClB,AAAG,AAAA,AAAKgJ,AAA2B/B,AACtE,AAAGA,AAAEgC,AACLnC,AACAtM;;AARR;AAAA,AAAAmO;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAxB,AAAA,AAAA/M,AAAAoO;AAAA,AAAA,AAAArB;AAAA,AAAA,AAAAqB,AAAArB;AAAA,AAAA,AAAA,AAAAC,AAAAoB;AAAA,AAAAnB,AAAA,AAAAC,AAAAkB;AAAA,AAAA,AAAA,AAAAjB,AAAAiB;AAAAnB;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAA+N,AAAQ7C;AAAR,AAAA,AACE,AAACiD,AAAK,AAAC5I,AAAgB2F,AAAO/I,AACxB,AAACoD,AAAgBpD,AACA+I,AACA,AAAC1F,AAAiB,AAACC,AAAiBL,AAClB,AAAG,AAAA,AAAKgJ,AAA2B/B,AACtE,AAAGA,AAAEgC,AACLnC,AACAtM;;AARR;AAAA,AAAA,AAAA6G,AAAAsH;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AANJ;AAAA,AAAA,AAAAtH,AAAA4G;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAFJ;;AAiBA,AAAM,AAAAiB,AAA4B,AAAA,AAAOnM;AAAnCoM,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAD,AAAAC,AAAAD;;AAAN,AACE,AAACrC,AAAO,AAAA,AAACvL,AAAOyB,AACQ,AAACsI,AAAQC,AACA,AAAA,AAAKzF,AAC9BuJ,AACA5O;;AALV;;AAMA,AAAM,AAAA,AAAC2E,AAAE,AAAA,AAAOpC;AAAhB,AACE,AAAC6K,AAAQ,AAAA,AAAAyB,AAACvJ;AAAD,AAAO,AAACK,AAAgBuG,AACA,AAAA2C,AAACjJ,AACiB,AAAGR,AACA0J;AACvC,AAAA,AAACC,AACa,AAAA,AAAGjL,AACvBwI,AACAtM;;AACT,AAACoN,AAAQ,AAAA,AAAA4B,AAAC1J;AAAD,AAAO,AAACK,AAAgBuG,AACA,AAAA8C,AAACpJ,AACiB,AAAA,AAAGR,AACA0J,AACA,AAAA,AAAKzJ;AAC5C,AAAA,AAAC0J,AACa,AAAA,AAAGjL,AACvB8K,AACA5O;;AAjBX;;AAkBA,AAAM,AAAA,AAAC2E,AAAE,AAAA,AAAOpC;AAAhB,AACE,AAAC0M,AAAK,AAAA,AAAQ1M,AACRA,AACA,AAAA,AAASA,AACT2M,AACAlP;;AALR;;;;AAjEJ,AAAA,AAAA,AAAM6L;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAA7L,AAAA4L;AAAAA,AAAA,AAAAnF,AAAAmF;AAAA,AAAA,AAAAjF,AAAA;AAAA,AAAA,AAAAA,AAAAkF,AAAAD;;;AAAA,AAwEA,AAAA,AAAMmD,AAAgBC;AAAtB,AACE,AAAA,AAAGC,AACAC,AACA,AAAGF,AAAM,AAAA,AAAA,AAAKE,AAAyBC;;AAE5C,AAAA,AAAMC,AAAmBC;AAAzB,AACE,AAAMC,AAAiB,AAACpM,AAAM,AAACrD,AAAI,AAAA,AAAA,AAAAC,AAAYjB,AAAgBwQ;AAA/D,AACE,AAAI,AAAA,AAAOC;AAAX;;AAEE,AAAG,AAACP,AAAeO,AAChBJ;;;AAET,AAAA,AAAMK;AAAN,AACE,AAAME,AAAiB,AAACvF;AAAxBsF,AACyBC;AADzB,AAAAjQ,AAAAgQ,AAAA,AAAA,AACOE;AADP,AAAAlQ,AAAAgQ,AAAA,AAAA,AACeG;AACTC,AAAM,AAAG,AAAA,AAAIF,AACJ,AAAA,AAACN;AACVS,AAAM,AAAG,AAAG,AAAA,AAAIF,AACJ,AAAA,AAAID,AACP,AAAA,AAACN;AACVU,AAAM,AAAG,AAAA,AAAIJ,AACJ,AAAA,AAACN;AACVW,AAAM,AAAG,AAAG,AAAA,AAAIJ,AACJ,AAAA,AAAID,AACP,AAAA,AAACN;AAXhB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAYMY,AAAeF,AAASF,AACT,AAAGG,AAAMD,AAAU,AAAGD,AAAMD;AAC3CK,AAAY,AAACC,AAAmBF;AAdtC,AAeM,AAACrK,AACD,AAAC0E,AAAc,AAAA,AAAA,AAAAvK,AAAcjB,AACd,AAAA,AAAA,AAAAiB,AAAejB,AAC9B,AAAA,AAACwL,AAAcmB,AACf,AAACX,AAAW,AAACqF,AAAmBT,AACpBQ;;AAEpB,AAAA,AAAME;AAAN,AACE,AAACC,AACAC,AACA,AAACC,AAAI,AAAKjB;AAAL,AACE,AAAAkB,AAAyB,AAACrG;AAA1B,AAAA1K,AAAA+Q,AAAA,AAAA,AAAOb;AAAP,AAAAlQ,AAAA+Q,AAAA,AAAA,AAAeZ;AAAfa,AAAA,AAAA1Q,AAC0BjB;AAD1B2R,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjO,AAAA,AAAAiO,AAAA,AAAA,AAAA,AAAA,AAAAhO,AAAAC,AAAA+N,AAAAA;AAAA,AAAA3Q,AAAA2Q,AAAA,AACcC;AACRC,AAAY,AAAAC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA,AAAiBtB,AAAAA;;AAC7BuB,AAAW,AAAC/Q,AAAI4Q,AAASpB;AAH/B,AAIE,AAACnK,AAAK,AAAK2L,AAAMC;AAAX,AACE,AAAMC,AAAM,AAAC7L,AAAK,AAAK8L;AAAL,AACE,AAAAC,AAAA;AAAAC,AACK,AAAMtK,AAAK,AAAC1D,AAAM,AAAA,AAAQ8N;AAA1B,AACE,AAAA,AAAA,AAAA,AAAG,AAAA,AAAKpK,AAELsI,AACA,AAAA,AAAKiC;;AALf,AAAA,AAAAF,AAAAC,AAAAD,AAAAC;AAMFL;AACZO,AAAW,AAAG,AAAC5O,AAAM6O,AAAEN,AACT,AAAA,AAAG,AAAA,AAAK5B,AACLD,AACA,AAAA,AAAK,AAAChM,AAAM2N;AAC7BS,AAAY,AAAA,AAAGrC,AACAC,AACA,AAAG4B,AACA,AAAG5B,AACA,AAAGA,AACAC;AACxBoC,AAAQ,AAACC,AACA,AAACC,AACA,AAACC,AAAO,AAAKH,AAAQ3K;AAAb,AACE,AAAC5D,AAAKuO,AACA,AAAA,AAAG,AAACvR,AAAMuR,AACP3K,AACA,AAAG,AAAA,AAAKuI,AACLD;AACd,AAAA3L,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAAQ6N,AACd,AAACrN,AAAK,AAAC0N,AAAQV;AA3BvC,AA4BE,AAAC7L,AAAK,AAAK8L,AAAIpK,AAAK+K;AAAd,AACE,AAAMC,AAAQ,AAAAC,AAAMxC;AAANwC,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAA,AAAA,AACc,AAAA,AAAG,AAAA,AAAInC,AAAS,AAAA,AAAO,AAAA,AAAIC,AAAWgC,AACtC,AAAG,AAAG,AAAA,AAAIjC,AAAS,AAAA,AAAIC,AAAW2B;;;AAFhD;AAAA,AAAA,AAAA,AAGW,AAAA,AAAG,AAAA,AAAI5B,AAAS,AAAA,AAAO,AAAA,AAAIC,AAAWgC,AACtC,AAAG,AAAA,AAAIjC,AAAS4B;;;AAJ3B;AAAA,AAAA,AAAA,AAKY,AAAG,AAAA,AAAI5B,AAAS4B,AAChB,AAAA,AAAG,AAAA,AAAI5B,AAAS,AAAA,AAAO,AAAA,AAAIC,AAAWgC;;;AANlD;AAAA,AAAA,AAAA,AAOa,AAAG,AAAG,AAAA,AAAIjC,AAAS,AAAA,AAAIC,AAAW2B,AAClC,AAAA,AAAG,AAAA,AAAI5B,AAAS,AAAA,AAAO,AAAA,AAAIC,AAAWgC;;;;AARnD,AAAA,AAAAI,AAAA,AAAA,AAAAF;;;;AAAd,AASE,AAAA,AAAA,AAAA,AAAA,AAACG,AAAMJ,AACQ,AAAA,AAAIlB,AAAY9J,AACf,AAAA,AAAI8J,AAAc9J,AAE1B,AAAC1B,AAAK,AAAKjB,AAAKgO;AAAV,AACE,AAAA,AAAA,AAAC1R,AAAM,AAACgF,AAAgBqM,AACA,AAAA,AAACpM,AACC,AAAA,AAAA,AAAIkL,AACJ,AAAA,AAAA,AACG,AAAA,AAAKS,AACLjC,AACJ+C,AACV,AAAA,AAAG/C,AACA,AAAA,AAAKiC,AACLe,AACLjO;AACf,AAAA,AAAQ+M,AACR,AAAC/N;AACnB4N,AACAE,AACAQ;AACVX,AACA,AAAC3N;AACXoN;;AAER,AAAA,AAAM8B,AAAiB/P;AAAvB,AACE,AAAMgQ,AAAiB,AAACjC;AAAxB,AACE,AAACvN,AAAK,AAAKyM;AAAL,AACE,AAAMgD,AAAY,AAACxS,AAAIuS,AAAiB/C;AAClCqB,AAAY,AAAA4B,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA,AAAiBjD,AAAAA;;AADnC,AAEE,AAACzM,AAAK,AAAKkO;AAAL,AACE,AAAMD,AAAM,AAACrR,AAAI6S,AAAYvB;AAA7B,AACE,AAAClO,AAAK,AAAK2P;AAAL,AACE,AAAMvB,AAAI,AAACxR,AAAIqR,AAAM0B;AAArB,AACE,AAAM,AAAI,AAAI,AAACC,AACA,AAAClP,AAAqBlB,AACA4O,AACvB9B,AACJ,AAAI,AAACsD,AACA,AAAClP,AAAqBlB,AACA,AAACmD,AAAgByL,AACA,AAAA,AAAA,AAAA,AAAA,AAAIN,AACE,AAAA,AAAQM,AACR,AAAA,AAASA,AACvD9B,AACJ,AAACuD,AAAc,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI/B,AACD,AAAA,AAAA,AAACpN,AAAqB0N,AACI9B,AACtB,AAAA,AAAQ8B,AACR,AAAA,AAAK9B,AACT,AAAA,AAAA,AAAC5L,AAAqB0N,AACI9B,AACtB,AAAA,AAAKA,AACL,AAAA,AAAS8B,AAChB5O;AApBzB,AAAA,AAqBGiN,AAAKyB,AAAYyB;;AArBpB;;AAsBJ,AAACtP,AAAM,AAACC,AAAM2N;AACxB,AAAC5N,AAAM,AAACC,AAAMmP;AACxBhC;;AAEV,AAAA,AAAMqC,AAAsBtQ;AAA5B,AACE,AAAMgQ,AAAiB,AAACjC;AAAxB,AACE,AAACvN,AAAK,AAAKyM;AAAL,AACE,AAAMgD,AAAY,AAACxS,AAAIuS,AAAiB/C;AAAxC,AACE,AAACzM,AAAK,AAAKkO;AAAL,AACE,AAAMD,AAAM,AAACrR,AAAI6S,AAAYvB;AAA7B,AACE,AAAClO,AAAK,AAAK2P;AAAL,AACE,AAAMvB,AAAI,AAACxR,AAAIqR,AAAM0B;AAArBI,AACwB3B;AADxB2B,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApQ,AAAA,AAAAoQ,AAAA,AAAA,AAAA,AAAA,AAAAnQ,AAAAC,AAAAkQ,AAAAA;AAAA,AAAA9S,AAAA8S,AAAA,AACcC;AADd,AAEE,AAAChQ,AAAK,AAAKiQ;AAAL,AACE,AAAMC,AAAW,AAACtT,AAAIoT,AAAQC;AAA9B,AACE,AAAM,AAACxQ,AAAgByQ,AAAW1Q;AAAlC,AAAA,AAAA,AAAA,AACGiN,AAAKyB,AAAYyB,AAAmBM;;AADvC;;AAEJ,AAAC5P,AAAM,AAACC,AAAM0P;AACxB,AAAC3P,AAAM,AAACC,AAAM2N;AACxB,AAAC5N,AAAM,AAACC,AAAMmP;AACxBhC;;AAEV,AAAA,AAAM0C;AAAN,AACE,AAAAC,AAAyB,AAAC9I;AAA1B,AAAA1K,AAAAwT,AAAA,AAAA,AAAOtD;AAAP,AAAAlQ,AAAAwT,AAAA,AAAA,AAAerD;AAAfsD,AAAA,AAAAnT,AACwCjB;AADxCoU,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1Q,AAAA,AAAA0Q,AAAA,AAAA,AAAA,AAAA,AAAAzQ,AAAAC,AAAAwQ,AAAAA;AAAA,AAAApT,AAAAoT,AAAA,AACcC;AADd,AAAArT,AAAAoT,AAAA,AACoBE;AADpB,AAEE,AAAM,AAAI,AAACX,AACA,AAAClP,AAAqB,AAACiC,AAAgBmK,AACA,AAAA,AAAA,AAAC0D,AAAYzD,AAC9BuD,AACvBG;AAJV;;AAAA,AAOM,AAAI,AAACb,AACA,AAAClP,AAAqB,AAACiC,AAAgBmK,AACAC,AACjBuD,AACvBC;AAXV;;AAAA,AAcM,AAAChB,AAAgBe;AAdvB;;AAAA,AAAA;;;;;;AAmBJ,AAAA,AAAA,AAAAnU,AAAMuU;AAAN,AAAA,AAAAtU,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsU,AAAA,AAAA,AAAA,AAAAnU;;;AAAA,AAAA,AAAA,AAAA,AAAAoU,AAAMD,AAAmBnR;AAAzB,AAAA,AAAAqR,AAAAD;AAAA,AAAA/T,AAAAgU,AAAA,AAAA,AAAmC5T;AAAnC,AACE,AAAA+T,AAAA,AAAAhU,AAAkB,AAACoK,AAAe5H;AAAlCyR,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQhR;AAAR,AAAA,AACE,AAACiR,AAAcjR,AAAUlD;;AAD3B;AAAA,AAAA+T;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAApH,AAAA,AAAA/M,AAAAgU;AAAA,AAAA,AAAAjH;AAAA,AAAA,AAAAiH,AAAAjH;AAAA,AAAA,AAAA,AAAAC,AAAAgH;AAAA,AAAA/G,AAAA,AAAAC,AAAA8G;AAAA,AAAA,AAAA,AAAA7G,AAAA6G;AAAA/G;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAA2T,AAAQ7Q;AAAR,AAAA,AACE,AAACiR,AAAcjR,AAAUlD;;AAD3B;AAAA,AAAA,AAAA6G,AAAAkN;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;;AADF,AAAA,AAAA,AAAML;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAA1T,AAAAyT;AAAAA,AAAA,AAAAhN,AAAAgN;AAAA,AAAA,AAAA9M,AAAA;AAAA,AAAA,AAAAA,AAAA+M,AAAAD;;;AAAA,AAIA,AAAA,AAAMO;AAAN,AACE,AAAG,AAAA,AAAY,AAAA,AAAA,AAAAlU,AAASjB,AAAiBoV;;AAE3C,AAAA,AAAMC;AAAN,AACE,AAAAC,AAAA,AAAArU,AAAgCjB;AAAhCsV,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5R,AAAA,AAAA4R,AAAA,AAAA,AAAA,AAAA,AAAA3R,AAAAC,AAAA0R,AAAAA;AAAA,AAAAtU,AAAAsU,AAAA,AAAcjB;AAAd,AAAArT,AAAAsU,AAAA,AAAoB1D;AAApB2D,AACiElB;AADjEkB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7R,AAAA,AAAA6R,AAAA,AAAA,AAAA,AAAA,AAAA5R,AAAAC,AAAA2R,AAAAA;AAAA,AAAAvU,AAAAuU,AAAA,AACcC;AADd,AAAAxU,AAAAuU,AAAA,AACoBE;AADpB,AAAAzU,AAAAuU,AAAA,AAC8BG;AAD9B,AAAA1U,AAAAuU,AAAA,AACwCI;AADxC,AAEE,AAAMH;AAAN,AACE,AAAM,AAAA,AAAC9P,AAAEgQ;AACH,AAACjT,AAAe,AAAA,AAAA,AAAAxB,AAAQjB,AACR,AAAC2S,AAAI,AAAA,AAAA,AAACjQ,AAAY+S;;AAFxC,AAIM,AAAA,AAAC/P,AAAEgQ;AACH,AAACE,AAAK,AAAA,AAAA,AAAA3U,AAAgBjB;;AAL5B,AAOM,AAAA,AAAC0F,AAAEgQ;AACH,AAACvU,AAAM,AAAA,AAAA,AAAAF,AAAmBjB;;AARhC,AAUM2V;AACA,AAACE,AAAO,AAACvE,AAAqBqE;;AAXpC;;;;;;AADF;;;AAcJ,AAAA,AAAMG;AAAN,AACE,AAAAC,AAAA,AAAA9U,AAAuBjB;AAAvB+V,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArS,AAAA,AAAAqS,AAAA,AAAA,AAAA,AAAA,AAAApS,AAAAC,AAAAmS,AAAAA;AAAA,AAAA/U,AAAA+U,AAAA,AAAc1B;AACR2B,AAAa,AAAC1C,AAAgBe;AADpC,AAEE,AAAMf;AAAN,AACE,AAAME,AAAY,AAAClC;AACb2E,AAAY,AAAC9U,AAAM6U;AACnBE,AAAgB,AAACL,AAAOrC,AAAYwC;AACpCG,AAAa,AAAG9F,AACA,AAAA,AAAKiC;AAJ3B,AAKE,AAAI,AAAA,AAAO,AAACjO,AAAM,AAAA,AAAU6R;AAA5B;;AAEM,AAAMrE,AAAY,AAAAuE,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA,AAAiBH,AAAAA;;AAC7B5J,AAAO,AAAG,AAAIwF,AACF,AAAG,AAAA,AAAIwC,AAAO,AAAA,AAAI6B,AAClB,AAAG,AAAA,AAAI7B,AAAO,AAAA,AAAI6B,AACpB,AAAA,AAAKC;AAJrB,AAKE,AAAI,AAAA,AAAM9J;AAAV;;AAEE,AAAA,AAAK,AAAA,AAAKA;;;;AAfxB;;;AAiBJ,AAAA,AAAMgK,AAAkBC,AAAMC;AAA9B,AACE,AAAM3F,AAAiB,AAACvF;AAAxBmL,AACyB5F;AADzB,AAAAjQ,AAAA6V,AAAA,AAAA,AACO3F;AADP,AAAAlQ,AAAA6V,AAAA,AAAA,AACe1F;AACT2F,AAAW,AAACvC;AACZwC,AAAuB,AAACrB;AAH9B,AAIE,AAAA,AAACsB,AAAK/F,AACAjB;;AAEN,AAAAiH,AAAA,AAAA3V,AAAuBjB;AAAvB4W,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlT,AAAA,AAAAkT,AAAA,AAAA,AAAA,AAAA,AAAAjT,AAAAC,AAAAgT,AAAAA;AAAA,AAAA5V,AAAA4V,AAAA,AAAcvC;AACRwC,AAAU,AAAC1B;AADjB,AAEE,AAAA,AAAC2B,AAAkB,AAACpG;;AACpB,AAAM,AAAA,AAAKmG,AAAU,AAACxB;AAAtB,AACE,AAAA,AAACjI,AAAO,AAAA,AAAC1L,AAAM2S,AACQ0C,AACfC;;AAHV;;AAKA,AAAMC,AAAY,AAAC5T,AAAe,AAACqN,AACD,AAAA,AAAA,AAAAzP,AAASjB;AACrCkX,AAAe,AAAC5S,AAAyB,AAACoM,AACD,AAAA,AAAA,AAAAzP,AAASjB;AAClDmX,AAAS,AAAK,AAACzR,AAAE,AAACrB,AAAM4S,AAAa,AAAC5S,AAAM6S,AAC9B,AAAA,AAACxR,AAAW,AAAA,AAAO,AAACjD,AAAe,AAAA,AAAA,AAAAxB,AAAQjB,AACR,AAAC2S,AAAI,AAAA,AAAA,AAACjQ,AAAYwU;AANzE,AAOE,AAAM,AAAAE,AAAKH;AAAL,AAAA,AAAAG;AAAA,AAAiB,AAAKP,AAAWM;;AAAjCC;;;AAAN,AACE,AAAA,AAAChK,AAAO,AAACrI,AAAc,AAAC2L,AAAsBuG,AACtCD;;AAFV;;AAIA,AAAM,AAAAI,AAAKH;AAAL,AAAA,AAAAG;AAAiBV;;AAAjBU;;;AAAN,AACE,AAAMnT,AAAU,AAACc,AAAc,AAAC2L,AAAsBuG;AAAtD,AACE,AAAMJ;AAAN,AACE,AAAMQ,AAAc,AAAA,AAASpT;AACvBkC,AAAO,AAAGmR,AACA,AAAA,AAAS,AAACnW,AAAM,AAAA,AAAa8C;AACvCsT,AAAY,AAAClT,AAAM,AAAA,AAAaJ;AAChCsC,AAAM,AAAG,AAAG,AAAA,AAAG,AAAG,AAAA,AAAG,AAACqP,AAAKsB,AACTK,AAENzS;AACZ0S,AAAc,AAAC9Q,AAAgBzC,AACA,AAAC0C,AAAiB,AAACC,AAAiBL,AAClB,AAAG8Q,AACA,AAAGI,AACAtR;AAZ7D,AAaE,AAAM,AAAA,AAACT,AAAE+Q;AAAT,AACE,AAAA,AAACnH,AAAK+E,AACAmD,AACAE,AACAV;;AAEN,AAAMW,AAAe,AAACxS,AAAY,AAACkQ,AACD,AAAA,AAAA,AAAC3T,AAAMqF;AADzC,AAEE,AAAIoQ;AACF,AAAA,AAACL,AAAkB,AAACtL,AAAcmM,AACA,AAAChR,AAAiB1C,AACA,AAAA,AAAG,AAAA,AAASA,AAC9B,AAAA,AAASA;;AAE3C,AAAI,AAAA,AAACyB,AAAI,AAACrB,AAAM,AAAA,AAAW,AAAC5B,AAAe,AAAA,AAAA,AAAAxB,AAAQjB,AACR,AAAC2S,AAAI,AAAA,AAAA,AAACjQ,AAAYuU;AAC3D,AAAA,AAACH,AAAkB,AAACtL,AAAcmM,AACA,AAAChR,AAAiB1C,AACA,AAAA,AAAG,AAAGqT,AACA,AAAA,AAASrT,AACjC,AAAGqT,AACA,AAAA,AAASrT;;AAE9C,AAAA,AAAC6S,AAAkB,AAACtL,AAAcmM,AACA,AAAChR,AAAiB6Q,AACA,AAAA,AAAGrR,AACrBA;;;;AA1B1C;;AAdJ;;AAFJ;;AA4CF,AAAMqN,AAAY,AAAClC;AACbsG,AAAkB,AAAC/D,AAAqBQ;AAD9C,AAEE,AAAAwD,AAAA,AAAA/W,AAAa0Q;AAAbsG,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQxH;AAAR,AAAA,AACE,AAAMqB,AAAY,AAAAoG,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA,AAAiBzH,AAAAA;;AAC7B2H,AAAiB,AAACnX,AAAIwS,AAAYhD;AADxC,AAEE,AAAA4H,AAAA,AAAAtX,AAAcqX;AAAdE,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQvG;AAAR,AAAA,AACE,AAAA4G,AAAA,AAAA9X,AAAYkR;AAAZ6G,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQ5G;AAAR,AAAA,AACE,AAAAyH,AAAA,AAAA9Y,AAAA,AAAA,AAAA,AAAA,AACUuM,AACAsC,AAA2B,AAAA,AAAK2C;AAF1CuH,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAApZ,AAAAqZ,AAAA,AAAA,AAAShQ;AAAT,AAAArJ,AAAAqZ,AAAA,AAAA,AAAe4C;AAAf,AAAA,AAGE,AAAA,AAACxP,AAAO,AAAA,AAAC1L,AAAMyQ,AAAY,AAAG9B,AAAyBuM,AAC/C5S;;AAER,AAAI6H;AACF,AAAI,AAAA,AAACzE,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAAQA,AACrB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAQzK,AACR,AAAA,AAAA,AAAK9B,AAAyBuM,AACnC5S;;AAEV,AAAI,AAAA,AAACoD,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAASA,AACtB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAA,AAAKvM,AAAyBuM,AAC9B,AAAA,AAASzK,AACdnI;;;AAzBd;AAAA,AAAA4P;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAlM,AAAA,AAAA/M,AAAA8Y;AAAA,AAAA,AAAA/L;AAAA,AAAA,AAAA+L,AAAA/L;AAAA,AAAA,AAAA,AAAAC,AAAA8L;AAAA,AAAA7L,AAAA,AAAAC,AAAA4L;AAAA,AAAA,AAAA,AAAA3L,AAAA2L;AAAA7L;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAAkM,AAAA,AAAA9Y,AAAAyY;AAAA,AAAAjZ,AAAAsZ,AAAA,AAAA,AAASjQ;AAAT,AAAArJ,AAAAsZ,AAAA,AAAA,AAAe2C;AAAf,AAAA,AAGE,AAAA,AAACxP,AAAO,AAAA,AAAC1L,AAAMyQ,AAAY,AAAG9B,AAAyBuM,AAC/C5S;;AAER,AAAI6H;AACF,AAAI,AAAA,AAACzE,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAAQA,AACrB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAQzK,AACR,AAAA,AAAA,AAAK9B,AAAyBuM,AACnC5S;;AAEV,AAAI,AAAA,AAACoD,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAASA,AACtB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAA,AAAKvM,AAAyBuM,AAC9B,AAAA,AAASzK,AACdnI;;;AAzBd;AAAA,AAAA,AAAApC,AAAAgS;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAAhB;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAlL,AAAA,AAAA/M,AAAA8X;AAAA,AAAA,AAAA/K;AAAA,AAAA,AAAA+K,AAAA/K;AAAA,AAAA,AAAA,AAAAC,AAAA8K;AAAA,AAAA7K,AAAA,AAAAC,AAAA4K;AAAA,AAAA,AAAA,AAAA3K,AAAA2K;AAAA7K;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAAyX,AAAQzG;AAAR,AAAA,AACE,AAAA+H,AAAA,AAAApZ,AAAA,AAAA,AAAA,AAAA,AACUuM,AACAsC,AAA2B,AAAA,AAAK2C;AAF1C6H,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAA1Z,AAAA2Z,AAAA,AAAA,AAAStQ;AAAT,AAAArJ,AAAA2Z,AAAA,AAAA,AAAesC;AAAf,AAAA,AAGE,AAAA,AAACxP,AAAO,AAAA,AAAC1L,AAAMyQ,AAAY,AAAG9B,AAAyBuM,AAC/C5S;;AAER,AAAI6H;AACF,AAAI,AAAA,AAACzE,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAAQA,AACrB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAQzK,AACR,AAAA,AAAA,AAAK9B,AAAyBuM,AACnC5S;;AAEV,AAAI,AAAA,AAACoD,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAASA,AACtB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAA,AAAKvM,AAAyBuM,AAC9B,AAAA,AAASzK,AACdnI;;;AAzBd;AAAA,AAAAkQ;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAxM,AAAA,AAAA/M,AAAAoZ;AAAA,AAAA,AAAArM;AAAA,AAAA,AAAAqM,AAAArM;AAAA,AAAA,AAAA,AAAAC,AAAAoM;AAAA,AAAAnM,AAAA,AAAAC,AAAAkM;AAAA,AAAA,AAAA,AAAAjM,AAAAiM;AAAAnM;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAAwM,AAAA,AAAApZ,AAAA+Y;AAAA,AAAAvZ,AAAA4Z,AAAA,AAAA,AAASvQ;AAAT,AAAArJ,AAAA4Z,AAAA,AAAA,AAAeqC;AAAf,AAAA,AAGE,AAAA,AAACxP,AAAO,AAAA,AAAC1L,AAAMyQ,AAAY,AAAG9B,AAAyBuM,AAC/C5S;;AAER,AAAI6H;AACF,AAAI,AAAA,AAACzE,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAAQA,AACrB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAQzK,AACR,AAAA,AAAA,AAAK9B,AAAyBuM,AACnC5S;;AAEV,AAAI,AAAA,AAACoD,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAASA,AACtB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAA,AAAKvM,AAAyBuM,AAC9B,AAAA,AAASzK,AACdnI;;;AAzBd;AAAA,AAAA,AAAApC,AAAAsS;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAA,AAAAtS,AAAAgR;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAAR;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA1K,AAAA,AAAA/M,AAAAsX;AAAA,AAAA,AAAAvK;AAAA,AAAA,AAAAuK,AAAAvK;AAAA,AAAA,AAAA,AAAAC,AAAAsK;AAAA,AAAArK,AAAA,AAAAC,AAAAoK;AAAA,AAAA,AAAA,AAAAnK,AAAAmK;AAAArK;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAAiX,AAAQpG;AAAR,AAAA,AACE,AAAAgH,AAAA,AAAAlY,AAAYkR;AAAZiH,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQhH;AAAR,AAAA,AACE,AAAAqI,AAAA,AAAA1Z,AAAA,AAAA,AAAA,AAAA,AACUuM,AACAsC,AAA2B,AAAA,AAAK2C;AAF1CmI,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAAha,AAAAia,AAAA,AAAA,AAAS5Q;AAAT,AAAArJ,AAAAia,AAAA,AAAA,AAAegC;AAAf,AAAA,AAGE,AAAA,AAACxP,AAAO,AAAA,AAAC1L,AAAMyQ,AAAY,AAAG9B,AAAyBuM,AAC/C5S;;AAER,AAAI6H;AACF,AAAI,AAAA,AAACzE,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAAQA,AACrB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAQzK,AACR,AAAA,AAAA,AAAK9B,AAAyBuM,AACnC5S;;AAEV,AAAI,AAAA,AAACoD,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAASA,AACtB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAA,AAAKvM,AAAyBuM,AAC9B,AAAA,AAASzK,AACdnI;;;AAzBd;AAAA,AAAAwQ;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA9M,AAAA,AAAA/M,AAAA0Z;AAAA,AAAA,AAAA3M;AAAA,AAAA,AAAA2M,AAAA3M;AAAA,AAAA,AAAA,AAAAC,AAAA0M;AAAA,AAAAzM,AAAA,AAAAC,AAAAwM;AAAA,AAAA,AAAA,AAAAvM,AAAAuM;AAAAzM;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA8M,AAAA,AAAA1Z,AAAAqZ;AAAA,AAAA7Z,AAAAka,AAAA,AAAA,AAAS7Q;AAAT,AAAArJ,AAAAka,AAAA,AAAA,AAAe+B;AAAf,AAAA,AAGE,AAAA,AAACxP,AAAO,AAAA,AAAC1L,AAAMyQ,AAAY,AAAG9B,AAAyBuM,AAC/C5S;;AAER,AAAI6H;AACF,AAAI,AAAA,AAACzE,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAAQA,AACrB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAQzK,AACR,AAAA,AAAA,AAAK9B,AAAyBuM,AACnC5S;;AAEV,AAAI,AAAA,AAACoD,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAASA,AACtB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAA,AAAKvM,AAAyBuM,AAC9B,AAAA,AAASzK,AACdnI;;;AAzBd;AAAA,AAAA,AAAApC,AAAA4S;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAAxB;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAtL,AAAA,AAAA/M,AAAAkY;AAAA,AAAA,AAAAnL;AAAA,AAAA,AAAAmL,AAAAnL;AAAA,AAAA,AAAA,AAAAC,AAAAkL;AAAA,AAAAjL,AAAA,AAAAC,AAAAgL;AAAA,AAAA,AAAA,AAAA/K,AAAA+K;AAAAjL;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAA6X,AAAQ7G;AAAR,AAAA,AACE,AAAA2I,AAAA,AAAAha,AAAA,AAAA,AAAA,AAAA,AACUuM,AACAsC,AAA2B,AAAA,AAAK2C;AAF1CyI,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAAta,AAAAua,AAAA,AAAA,AAASlR;AAAT,AAAArJ,AAAAua,AAAA,AAAA,AAAe0B;AAAf,AAAA,AAGE,AAAA,AAACxP,AAAO,AAAA,AAAC1L,AAAMyQ,AAAY,AAAG9B,AAAyBuM,AAC/C5S;;AAER,AAAI6H;AACF,AAAI,AAAA,AAACzE,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAAQA,AACrB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAQzK,AACR,AAAA,AAAA,AAAK9B,AAAyBuM,AACnC5S;;AAEV,AAAI,AAAA,AAACoD,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAASA,AACtB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAA,AAAKvM,AAAyBuM,AAC9B,AAAA,AAASzK,AACdnI;;;AAzBd;AAAA,AAAA8Q;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAApN,AAAA,AAAA/M,AAAAga;AAAA,AAAA,AAAAjN;AAAA,AAAA,AAAAiN,AAAAjN;AAAA,AAAA,AAAA,AAAAC,AAAAgN;AAAA,AAAA/M,AAAA,AAAAC,AAAA8M;AAAA,AAAA,AAAA,AAAA7M,AAAA6M;AAAA/M;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAAoN,AAAA,AAAAha,AAAA2Z;AAAA,AAAAna,AAAAwa,AAAA,AAAA,AAASnR;AAAT,AAAArJ,AAAAwa,AAAA,AAAA,AAAeyB;AAAf,AAAA,AAGE,AAAA,AAACxP,AAAO,AAAA,AAAC1L,AAAMyQ,AAAY,AAAG9B,AAAyBuM,AAC/C5S;;AAER,AAAI6H;AACF,AAAI,AAAA,AAACzE,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAAQA,AACrB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAQzK,AACR,AAAA,AAAA,AAAK9B,AAAyBuM,AACnC5S;;AAEV,AAAI,AAAA,AAACoD,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAASA,AACtB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAA,AAAKvM,AAAyBuM,AAC9B,AAAA,AAASzK,AACdnI;;;AAzBd;AAAA,AAAA,AAAApC,AAAAkT;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAA,AAAAlT,AAAAoR;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAA,AAAApR,AAAAwQ;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AA6BA,AAAM,AAAAhB,AAAKQ;AAAL,AAAA,AAAAR;AACK,AAAC1R,AAAE,AAACvE,AAAMyW,AAAmBpH;;AADlC4G;;;AAAN,AAEE,AAAA,AAAChK,AAAO,AAAA,AAACvL,AAAO,AAACgU,AAAOrC,AACA,AAACqJ,AAAQ,AAAChJ,AAAqBQ,AAC/B,AAACzI,AAAQC,AAAE,AAAA,AAAGwH,AAC9B2D;;AALV;;AAOA,AAAA8F,AAAA,AAAAhc,AAAcqX;AAAd4E,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQjL;AAAR,AAAA,AACE,AAAAsL,AAAA,AAAAxc,AAAYkR;AAAZuL,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQtL;AAAR,AAAA,AACE,AAAAmM,AAAA,AAAAxd,AAAmB,AAAA,AAAUqR;AAA7BoM,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQxK;AAAR,AAAA,AACE,AAAA,AAAC6C,AAAkB,AAAC3R,AAAY,AAAA,AAAO8O,AACPA;;AAFlC;AAAA,AAAAqK;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA5Q,AAAA,AAAA/M,AAAAwd;AAAA,AAAA,AAAAzQ;AAAA,AAAA,AAAAyQ,AAAAzQ;AAAA,AAAA,AAAA,AAAAC,AAAAwQ;AAAA,AAAAvQ,AAAA,AAAAC,AAAAsQ;AAAA,AAAA,AAAA,AAAArQ,AAAAqQ;AAAAvQ;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAAmd,AAAQrK;AAAR,AAAA,AACE,AAAA,AAAC6C,AAAkB,AAAC3R,AAAY,AAAA,AAAO8O,AACPA;;AAFlC;AAAA,AAAA,AAAArM,AAAA0W;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAAhB;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA5P,AAAA,AAAA/M,AAAAwc;AAAA,AAAA,AAAAzP;AAAA,AAAA,AAAAyP,AAAAzP;AAAA,AAAA,AAAA,AAAAC,AAAAwP;AAAA,AAAAvP,AAAA,AAAAC,AAAAsP;AAAA,AAAA,AAAA,AAAArP,AAAAqP;AAAAvP;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAAmc,AAAQnL;AAAR,AAAA,AACE,AAAAuM,AAAA,AAAA5d,AAAmB,AAAA,AAAUqR;AAA7BwM,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQ5K;AAAR,AAAA,AACE,AAAA,AAAC6C,AAAkB,AAAC3R,AAAY,AAAA,AAAO8O,AACPA;;AAFlC;AAAA,AAAAyK;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAhR,AAAA,AAAA/M,AAAA4d;AAAA,AAAA,AAAA7Q;AAAA,AAAA,AAAA6Q,AAAA7Q;AAAA,AAAA,AAAA,AAAAC,AAAA4Q;AAAA,AAAA3Q,AAAA,AAAAC,AAAA0Q;AAAA,AAAA,AAAA,AAAAzQ,AAAAyQ;AAAA3Q;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAAud,AAAQzK;AAAR,AAAA,AACE,AAAA,AAAC6C,AAAkB,AAAC3R,AAAY,AAAA,AAAO8O,AACPA;;AAFlC;AAAA,AAAA,AAAArM,AAAA8W;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAA,AAAA9W,AAAA0V;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAAR;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAApP,AAAA,AAAA/M,AAAAgc;AAAA,AAAA,AAAAjP;AAAA,AAAA,AAAAiP,AAAAjP;AAAA,AAAA,AAAA,AAAAC,AAAAgP;AAAA,AAAA/O,AAAA,AAAAC,AAAA8O;AAAA,AAAA,AAAA,AAAA7O,AAAA6O;AAAA/O;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAA2b,AAAQ9K;AAAR,AAAA,AACE,AAAA0L,AAAA,AAAA5c,AAAYkR;AAAZ2L,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQ1L;AAAR,AAAA,AACE,AAAA2M,AAAA,AAAAhe,AAAmB,AAAA,AAAUqR;AAA7B4M,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQhL;AAAR,AAAA,AACE,AAAA,AAAC6C,AAAkB,AAAC3R,AAAY,AAAA,AAAO8O,AACPA;;AAFlC;AAAA,AAAA6K;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAApR,AAAA,AAAA/M,AAAAge;AAAA,AAAA,AAAAjR;AAAA,AAAA,AAAAiR,AAAAjR;AAAA,AAAA,AAAA,AAAAC,AAAAgR;AAAA,AAAA/Q,AAAA,AAAAC,AAAA8Q;AAAA,AAAA,AAAA,AAAA7Q,AAAA6Q;AAAA/Q;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAA2d,AAAQ7K;AAAR,AAAA,AACE,AAAA,AAAC6C,AAAkB,AAAC3R,AAAY,AAAA,AAAO8O,AACPA;;AAFlC;AAAA,AAAA,AAAArM,AAAAkX;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAApB;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAhQ,AAAA,AAAA/M,AAAA4c;AAAA,AAAA,AAAA7P;AAAA,AAAA,AAAA6P,AAAA7P;AAAA,AAAA,AAAA,AAAAC,AAAA4P;AAAA,AAAA3P,AAAA,AAAAC,AAAA0P;AAAA,AAAA,AAAA,AAAAzP,AAAAyP;AAAA3P;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAAuc,AAAQvL;AAAR,AAAA,AACE,AAAA+M,AAAA,AAAApe,AAAmB,AAAA,AAAUqR;AAA7BgN,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQpL;AAAR,AAAA,AACE,AAAA,AAAC6C,AAAkB,AAAC3R,AAAY,AAAA,AAAO8O,AACPA;;AAFlC;AAAA,AAAAiL;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAxR,AAAA,AAAA/M,AAAAoe;AAAA,AAAA,AAAArR;AAAA,AAAA,AAAAqR,AAAArR;AAAA,AAAA,AAAA,AAAAC,AAAAoR;AAAA,AAAAnR,AAAA,AAAAC,AAAAkR;AAAA,AAAA,AAAA,AAAAjR,AAAAiR;AAAAnR;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAA+d,AAAQjL;AAAR,AAAA,AACE,AAAA,AAAC6C,AAAkB,AAAC3R,AAAY,AAAA,AAAO8O,AACPA;;AAFlC;AAAA,AAAA,AAAArM,AAAAsX;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAA,AAAAtX,AAAA8V;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAA,AAAA9V,AAAAkV;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAvCJ;AAAA,AAAAjF;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAnK,AAAA,AAAA/M,AAAA+W;AAAA,AAAA,AAAAhK;AAAA,AAAA,AAAAgK,AAAAhK;AAAA,AAAA,AAAA,AAAAC,AAAA+J;AAAA,AAAA9J,AAAA,AAAAC,AAAA6J;AAAA,AAAA,AAAA,AAAA5J,AAAA4J;AAAA9J;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAA0W,AAAQrH;AAAR,AAAA,AACE,AAAMqB,AAAY,AAAAqG,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA,AAAiB1H,AAAAA;;AAC7B2H,AAAiB,AAACnX,AAAIwS,AAAYhD;AADxC,AAEE,AAAAgI,AAAA,AAAA1X,AAAcqX;AAAdM,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQ3G;AAAR,AAAA,AACE,AAAAoH,AAAA,AAAAtY,AAAYkR;AAAZqH,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQpH;AAAR,AAAA,AACE,AAAAiJ,AAAA,AAAAta,AAAA,AAAA,AAAA,AAAA,AACUuM,AACAsC,AAA2B,AAAA,AAAK2C;AAF1C+I,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAA5a,AAAA6a,AAAA,AAAA,AAASxR;AAAT,AAAArJ,AAAA6a,AAAA,AAAA,AAAeoB;AAAf,AAAA,AAGE,AAAA,AAACxP,AAAO,AAAA,AAAC1L,AAAMyQ,AAAY,AAAG9B,AAAyBuM,AAC/C5S;;AAER,AAAI6H;AACF,AAAI,AAAA,AAACzE,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAAQA,AACrB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAQzK,AACR,AAAA,AAAA,AAAK9B,AAAyBuM,AACnC5S;;AAEV,AAAI,AAAA,AAACoD,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAASA,AACtB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAA,AAAKvM,AAAyBuM,AAC9B,AAAA,AAASzK,AACdnI;;;AAzBd;AAAA,AAAAoR;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA1N,AAAA,AAAA/M,AAAAsa;AAAA,AAAA,AAAAvN;AAAA,AAAA,AAAAuN,AAAAvN;AAAA,AAAA,AAAA,AAAAC,AAAAsN;AAAA,AAAArN,AAAA,AAAAC,AAAAoN;AAAA,AAAA,AAAA,AAAAnN,AAAAmN;AAAArN;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA0N,AAAA,AAAAta,AAAAia;AAAA,AAAAza,AAAA8a,AAAA,AAAA,AAASzR;AAAT,AAAArJ,AAAA8a,AAAA,AAAA,AAAemB;AAAf,AAAA,AAGE,AAAA,AAACxP,AAAO,AAAA,AAAC1L,AAAMyQ,AAAY,AAAG9B,AAAyBuM,AAC/C5S;;AAER,AAAI6H;AACF,AAAI,AAAA,AAACzE,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAAQA,AACrB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAQzK,AACR,AAAA,AAAA,AAAK9B,AAAyBuM,AACnC5S;;AAEV,AAAI,AAAA,AAACoD,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAASA,AACtB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAA,AAAKvM,AAAyBuM,AAC9B,AAAA,AAASzK,AACdnI;;;AAzBd;AAAA,AAAA,AAAApC,AAAAwT;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAAhC;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA1L,AAAA,AAAA/M,AAAAsY;AAAA,AAAA,AAAAvL;AAAA,AAAA,AAAAuL,AAAAvL;AAAA,AAAA,AAAA,AAAAC,AAAAsL;AAAA,AAAArL,AAAA,AAAAC,AAAAoL;AAAA,AAAA,AAAA,AAAAnL,AAAAmL;AAAArL;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAAiY,AAAQjH;AAAR,AAAA,AACE,AAAAuJ,AAAA,AAAA5a,AAAA,AAAA,AAAA,AAAA,AACUuM,AACAsC,AAA2B,AAAA,AAAK2C;AAF1CqJ,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAAlb,AAAAmb,AAAA,AAAA,AAAS9R;AAAT,AAAArJ,AAAAmb,AAAA,AAAA,AAAec;AAAf,AAAA,AAGE,AAAA,AAACxP,AAAO,AAAA,AAAC1L,AAAMyQ,AAAY,AAAG9B,AAAyBuM,AAC/C5S;;AAER,AAAI6H;AACF,AAAI,AAAA,AAACzE,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAAQA,AACrB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAQzK,AACR,AAAA,AAAA,AAAK9B,AAAyBuM,AACnC5S;;AAEV,AAAI,AAAA,AAACoD,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAASA,AACtB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAA,AAAKvM,AAAyBuM,AAC9B,AAAA,AAASzK,AACdnI;;;AAzBd;AAAA,AAAA0R;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAhO,AAAA,AAAA/M,AAAA4a;AAAA,AAAA,AAAA7N;AAAA,AAAA,AAAA6N,AAAA7N;AAAA,AAAA,AAAA,AAAAC,AAAA4N;AAAA,AAAA3N,AAAA,AAAAC,AAAA0N;AAAA,AAAA,AAAA,AAAAzN,AAAAyN;AAAA3N;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAAgO,AAAA,AAAA5a,AAAAua;AAAA,AAAA/a,AAAAob,AAAA,AAAA,AAAS/R;AAAT,AAAArJ,AAAAob,AAAA,AAAA,AAAea;AAAf,AAAA,AAGE,AAAA,AAACxP,AAAO,AAAA,AAAC1L,AAAMyQ,AAAY,AAAG9B,AAAyBuM,AAC/C5S;;AAER,AAAI6H;AACF,AAAI,AAAA,AAACzE,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAAQA,AACrB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAQzK,AACR,AAAA,AAAA,AAAK9B,AAAyBuM,AACnC5S;;AAEV,AAAI,AAAA,AAACoD,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAASA,AACtB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAA,AAAKvM,AAAyBuM,AAC9B,AAAA,AAASzK,AACdnI;;;AAzBd;AAAA,AAAA,AAAApC,AAAA8T;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAA,AAAA9T,AAAAwR;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAAZ;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA9K,AAAA,AAAA/M,AAAA0X;AAAA,AAAA,AAAA3K;AAAA,AAAA,AAAA2K,AAAA3K;AAAA,AAAA,AAAA,AAAAC,AAAA0K;AAAA,AAAAzK,AAAA,AAAAC,AAAAwK;AAAA,AAAA,AAAA,AAAAvK,AAAAuK;AAAAzK;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAAqX,AAAQxG;AAAR,AAAA,AACE,AAAAwH,AAAA,AAAA1Y,AAAYkR;AAAZyH,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQxH;AAAR,AAAA,AACE,AAAA6J,AAAA,AAAAlb,AAAA,AAAA,AAAA,AAAA,AACUuM,AACAsC,AAA2B,AAAA,AAAK2C;AAF1C2J,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAAxb,AAAAyb,AAAA,AAAA,AAASpS;AAAT,AAAArJ,AAAAyb,AAAA,AAAA,AAAeQ;AAAf,AAAA,AAGE,AAAA,AAACxP,AAAO,AAAA,AAAC1L,AAAMyQ,AAAY,AAAG9B,AAAyBuM,AAC/C5S;;AAER,AAAI6H;AACF,AAAI,AAAA,AAACzE,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAAQA,AACrB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAQzK,AACR,AAAA,AAAA,AAAK9B,AAAyBuM,AACnC5S;;AAEV,AAAI,AAAA,AAACoD,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAASA,AACtB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAA,AAAKvM,AAAyBuM,AAC9B,AAAA,AAASzK,AACdnI;;;AAzBd;AAAA,AAAAgS;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAtO,AAAA,AAAA/M,AAAAkb;AAAA,AAAA,AAAAnO;AAAA,AAAA,AAAAmO,AAAAnO;AAAA,AAAA,AAAA,AAAAC,AAAAkO;AAAA,AAAAjO,AAAA,AAAAC,AAAAgO;AAAA,AAAA,AAAA,AAAA/N,AAAA+N;AAAAjO;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAAsO,AAAA,AAAAlb,AAAA6a;AAAA,AAAArb,AAAA0b,AAAA,AAAA,AAASrS;AAAT,AAAArJ,AAAA0b,AAAA,AAAA,AAAeO;AAAf,AAAA,AAGE,AAAA,AAACxP,AAAO,AAAA,AAAC1L,AAAMyQ,AAAY,AAAG9B,AAAyBuM,AAC/C5S;;AAER,AAAI6H;AACF,AAAI,AAAA,AAACzE,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAAQA,AACrB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAQzK,AACR,AAAA,AAAA,AAAK9B,AAAyBuM,AACnC5S;;AAEV,AAAI,AAAA,AAACoD,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAASA,AACtB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAA,AAAKvM,AAAyBuM,AAC9B,AAAA,AAASzK,AACdnI;;;AAzBd;AAAA,AAAA,AAAApC,AAAAoU;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAAxC;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA9L,AAAA,AAAA/M,AAAA0Y;AAAA,AAAA,AAAA3L;AAAA,AAAA,AAAA2L,AAAA3L;AAAA,AAAA,AAAA,AAAAC,AAAA0L;AAAA,AAAAzL,AAAA,AAAAC,AAAAwL;AAAA,AAAA,AAAA,AAAAvL,AAAAuL;AAAAzL;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAAqY,AAAQrH;AAAR,AAAA,AACE,AAAAmK,AAAA,AAAAxb,AAAA,AAAA,AAAA,AAAA,AACUuM,AACAsC,AAA2B,AAAA,AAAK2C;AAF1CiK,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAA9b,AAAA+b,AAAA,AAAA,AAAS1S;AAAT,AAAArJ,AAAA+b,AAAA,AAAA,AAAeE;AAAf,AAAA,AAGE,AAAA,AAACxP,AAAO,AAAA,AAAC1L,AAAMyQ,AAAY,AAAG9B,AAAyBuM,AAC/C5S;;AAER,AAAI6H;AACF,AAAI,AAAA,AAACzE,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAAQA,AACrB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAQzK,AACR,AAAA,AAAA,AAAK9B,AAAyBuM,AACnC5S;;AAEV,AAAI,AAAA,AAACoD,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAASA,AACtB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAA,AAAKvM,AAAyBuM,AAC9B,AAAA,AAASzK,AACdnI;;;AAzBd;AAAA,AAAAsS;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA5O,AAAA,AAAA/M,AAAAwb;AAAA,AAAA,AAAAzO;AAAA,AAAA,AAAAyO,AAAAzO;AAAA,AAAA,AAAA,AAAAC,AAAAwO;AAAA,AAAAvO,AAAA,AAAAC,AAAAsO;AAAA,AAAA,AAAA,AAAArO,AAAAqO;AAAAvO;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA4O,AAAA,AAAAxb,AAAAmb;AAAA,AAAA3b,AAAAgc,AAAA,AAAA,AAAS3S;AAAT,AAAArJ,AAAAgc,AAAA,AAAA,AAAeC;AAAf,AAAA,AAGE,AAAA,AAACxP,AAAO,AAAA,AAAC1L,AAAMyQ,AAAY,AAAG9B,AAAyBuM,AAC/C5S;;AAER,AAAI6H;AACF,AAAI,AAAA,AAACzE,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAAQA,AACrB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAQzK,AACR,AAAA,AAAA,AAAK9B,AAAyBuM,AACnC5S;;AAEV,AAAI,AAAA,AAACoD,AAAO,AAAA,AAAC1L,AAAM,AAAA,AAAA,AAACgF,AAAgByL,AACI,AAAA,AAASA,AACtB,AAAG9B,AAAyBuM,AAC3C5S;;AAER,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2M,AAAM,AAAA,AAAA,AAAClS,AAAqB0N,AAAQ,AAAG9B,AAAyBuM,AACtD,AAAA,AAAA,AAAKvM,AAAyBuM,AAC9B,AAAA,AAASzK,AACdnI;;;AAzBd;AAAA,AAAA,AAAApC,AAAA0U;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAA,AAAA1U,AAAA4R;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAA,AAAA5R,AAAA4Q;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AA6BA,AAAM,AAAApB,AAAKQ;AAAL,AAAA,AAAAR;AACK,AAAC1R,AAAE,AAACvE,AAAMyW,AAAmBpH;;AADlC4G;;;AAAN,AAEE,AAAA,AAAChK,AAAO,AAAA,AAACvL,AAAO,AAACgU,AAAOrC,AACA,AAACqJ,AAAQ,AAAChJ,AAAqBQ,AAC/B,AAACzI,AAAQC,AAAE,AAAA,AAAGwH,AAC9B2D;;AALV;;AAOA,AAAAkG,AAAA,AAAApc,AAAcqX;AAAdgF,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQrL;AAAR,AAAA,AACE,AAAA8L,AAAA,AAAAhd,AAAYkR;AAAZ+L,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQ9L;AAAR,AAAA,AACE,AAAAmN,AAAA,AAAAxe,AAAmB,AAAA,AAAUqR;AAA7BoN,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQxL;AAAR,AAAA,AACE,AAAA,AAAC6C,AAAkB,AAAC3R,AAAY,AAAA,AAAO8O,AACPA;;AAFlC;AAAA,AAAAqL;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA5R,AAAA,AAAA/M,AAAAwe;AAAA,AAAA,AAAAzR;AAAA,AAAA,AAAAyR,AAAAzR;AAAA,AAAA,AAAA,AAAAC,AAAAwR;AAAA,AAAAvR,AAAA,AAAAC,AAAAsR;AAAA,AAAA,AAAA,AAAArR,AAAAqR;AAAAvR;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAAme,AAAQrL;AAAR,AAAA,AACE,AAAA,AAAC6C,AAAkB,AAAC3R,AAAY,AAAA,AAAO8O,AACPA;;AAFlC;AAAA,AAAA,AAAArM,AAAA0X;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAAxB;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAApQ,AAAA,AAAA/M,AAAAgd;AAAA,AAAA,AAAAjQ;AAAA,AAAA,AAAAiQ,AAAAjQ;AAAA,AAAA,AAAA,AAAAC,AAAAgQ;AAAA,AAAA/P,AAAA,AAAAC,AAAA8P;AAAA,AAAA,AAAA,AAAA7P,AAAA6P;AAAA/P;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAA2c,AAAQ3L;AAAR,AAAA,AACE,AAAAuN,AAAA,AAAA5e,AAAmB,AAAA,AAAUqR;AAA7BwN,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQ5L;AAAR,AAAA,AACE,AAAA,AAAC6C,AAAkB,AAAC3R,AAAY,AAAA,AAAO8O,AACPA;;AAFlC;AAAA,AAAAyL;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAhS,AAAA,AAAA/M,AAAA4e;AAAA,AAAA,AAAA7R;AAAA,AAAA,AAAA6R,AAAA7R;AAAA,AAAA,AAAA,AAAAC,AAAA4R;AAAA,AAAA3R,AAAA,AAAAC,AAAA0R;AAAA,AAAA,AAAA,AAAAzR,AAAAyR;AAAA3R;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAAue,AAAQzL;AAAR,AAAA,AACE,AAAA,AAAC6C,AAAkB,AAAC3R,AAAY,AAAA,AAAO8O,AACPA;;AAFlC;AAAA,AAAA,AAAArM,AAAA8X;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAA,AAAA9X,AAAAkW;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAAZ;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAxP,AAAA,AAAA/M,AAAAoc;AAAA,AAAA,AAAArP;AAAA,AAAA,AAAAqP,AAAArP;AAAA,AAAA,AAAA,AAAAC,AAAAoP;AAAA,AAAAnP,AAAA,AAAAC,AAAAkP;AAAA,AAAA,AAAA,AAAAjP,AAAAiP;AAAAnP;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAA+b,AAAQlL;AAAR,AAAA,AACE,AAAAkM,AAAA,AAAApd,AAAYkR;AAAZmM,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQlM;AAAR,AAAA,AACE,AAAA2N,AAAA,AAAAhf,AAAmB,AAAA,AAAUqR;AAA7B4N,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQhM;AAAR,AAAA,AACE,AAAA,AAAC6C,AAAkB,AAAC3R,AAAY,AAAA,AAAO8O,AACPA;;AAFlC;AAAA,AAAA6L;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAApS,AAAA,AAAA/M,AAAAgf;AAAA,AAAA,AAAAjS;AAAA,AAAA,AAAAiS,AAAAjS;AAAA,AAAA,AAAA,AAAAC,AAAAgS;AAAA,AAAA/R,AAAA,AAAAC,AAAA8R;AAAA,AAAA,AAAA,AAAA7R,AAAA6R;AAAA/R;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAA2e,AAAQ7L;AAAR,AAAA,AACE,AAAA,AAAC6C,AAAkB,AAAC3R,AAAY,AAAA,AAAO8O,AACPA;;AAFlC;AAAA,AAAA,AAAArM,AAAAkY;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAA5B;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAxQ,AAAA,AAAA/M,AAAAod;AAAA,AAAA,AAAArQ;AAAA,AAAA,AAAAqQ,AAAArQ;AAAA,AAAA,AAAA,AAAAC,AAAAoQ;AAAA,AAAAnQ,AAAA,AAAAC,AAAAkQ;AAAA,AAAA,AAAA,AAAAjQ,AAAAiQ;AAAAnQ;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAA+c,AAAQ/L;AAAR,AAAA,AACE,AAAA+N,AAAA,AAAApf,AAAmB,AAAA,AAAUqR;AAA7BgO,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQpM;AAAR,AAAA,AACE,AAAA,AAAC6C,AAAkB,AAAC3R,AAAY,AAAA,AAAO8O,AACPA;;AAFlC;AAAA,AAAAiM;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAxS,AAAA,AAAA/M,AAAAof;AAAA,AAAA,AAAArS;AAAA,AAAA,AAAAqS,AAAArS;AAAA,AAAA,AAAA,AAAAC,AAAAoS;AAAA,AAAAnS,AAAA,AAAAC,AAAAkS;AAAA,AAAA,AAAA,AAAAjS,AAAAiS;AAAAnS;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAA+e,AAAQjM;AAAR,AAAA,AACE,AAAA,AAAC6C,AAAkB,AAAC3R,AAAY,AAAA,AAAO8O,AACPA;;AAFlC;AAAA,AAAA,AAAArM,AAAAsY;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAA,AAAAtY,AAAAsW;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAA,AAAAtW,AAAAsV;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAvCJ;AAAA,AAAA,AAAAtV,AAAAiQ;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AA8CF,AAAA,AAACzK,AAAO,AAAA,AAAC1L,AAAM,AAACgF,AAAgBmK,AACA,AAAA,AAAA,AAAC0D,AAAYzD,AACtB0D,AACf,AAAI,AAAA,AAAC9O,AAAE+Q,AACLO,AACA3J;;AAEV,AAAA,AAACD,AAAO,AAAA,AAAC1L,AAAM,AAACgF,AAAgBmK,AACA,AAAA,AAAA,AAAC0D,AAAYzD,AACtB,AAAG,AAAA,AAAKwP,AACL9L,AAClB7E;;AAER,AAAM4Q,AAAa,AAACpf,AAAM,AAAA,AAAA,AAAAF,AAAmBjB;AAA7C,AACE,AAAMugB;AAAN,AACE,AAAMpa,AAAO,AAAG,AAAG,AAAA,AAAKqa,AACLhM,AACH,AAAA,AAAK,AAAA,AAACiM;AAFtB,AAGE,AAAA,AAAC3J,AAAkB,AAAC3R,AAAYob,AACA,AAAA,AAAC7e,AAAUmP,AACA,AAAA,AAAChP,AAAU,AAAC+J,AAAQ4G,AAAE,AAAG,AAAA,AAAI1B,AAAU3K,AACvC,AAAA,AAACtE,AAAU,AAAC+J,AAAQ4G,AAAErM,AAClB,AAAGA,AACAua;;AARpD;AADF;;AAYF,AAAMpM,AAAiB,AAAA,AAAA,AAAArT,AAAoBjB;AAA3C,AACE,AAAA,AAACoN,AAAO,AAAA,AAAC1L,AAAM,AAACgF,AAAgBmK,AAAQC,AACjBwD,AACf,AAAI,AAAA,AAAC5O,AAAE+Q,AACLO,AACA3J;;AAEV,AAAA,AAACD,AAAO,AAAA,AAAC1L,AAAM,AAACgF,AAAgBmK,AAAQC,AACjB,AAAG,AAAA,AAAKwP,AACLhM,AAClB3E;;AAER,AAAMgR,AAAe,AAAC/K,AAAK,AAAA,AAAA,AAAA3U,AAAgBjB;AAA3C,AACE,AAAM2gB;AAAN,AACE,AAAMxa,AAAO,AAAG,AAAG,AAAA,AAAKqa,AACL,AAAA,AAAA,AAAAvf,AAAoBjB,AACvB,AAAA,AAAK,AAAA,AAACygB;AAFtB,AAGE,AAAA,AAAC3J,AAAkB,AAAC3R,AAAYwb,AACA,AAAA,AAACjf,AAAM,AAAC+C,AAAqB,AAACiC,AAAgBmK,AAAQC,AACzB,AAACnK,AAAiBgG,AAAUxG,AAC1C,AAAGA,AACAya;;AARtD;;AAUJ,AAAM,AAAA,AAAK,AAAA,AAAClb,AAAE+Q,AAAqBC;AAAnC,AACE,AAAMV,AAAa,AAAC1C,AAAgBe;AAApC,AACE,AAAM2B;AAAN,AACC,AAAMxC,AAAY,AAAClC;AACb2E,AAAY,AAAC9U,AAAM6U;AACnBE,AAAgB,AAACL,AAAOrC,AAAYwC;AACpCG,AAAa,AAAG9F,AACA,AAAA,AAAKiC;AACrBuO,AAAgB,AAAC/K;AACjBgL,AACA,AAAI,AAAA,AAAO,AAACzc,AAAM,AAAA,AAAU6R,AACtBA,AACA,AAAA,AAACxU,AACM,AAAGyU,AACA4K,AACd,AAAMlP,AAAY,AAAAmP,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA,AAAiB/K,AAAAA;;AAAnC,AACMC,AACA,AAAA,AAACxU,AACM,AAAGyU,AACA4K,AACV,AAAA,AAAAE,AAACpf,AAAO,AAAA,AAAA,AAAIgQ,AAEZ,AAAChQ;AAFD,AACS,AAAAof,AAAK,AAAA,AAAA,AAAG,AAAA,AAAGJ,AAAuB1K;AAC3C,AAAA+K,AAAQ,AAAA,AAAA,AAAIrP;AAAZ,AACS,AAAAsP,AAAAD;AAAAE,AAEC,AAAGjL,AACAqL;AAHJH,AAAC,AAAI,AAAAC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA,AAAerL,AAAAA;AAAazD,AAAE+O;AAAnC,AAAA,AAAAF,AAAAA,AAAAF,AAAAC,AAAAC,AAAAF,AAAAC;;;AApBvB,AAwBE,AAAA,AAACtK,AAAkB,AAAC3R,AAAY,AAACkQ,AAAgByL;;AAzBpD;;;AAFJ;;;AA8BN,AAAA,AAAMW;AAAN,AACE,AAAMC,AAAQ,AAAW,AAAY,AAAA,AAAA,AAAAzgB,AAAOjB;AACtC2hB,AAAQ,AAACzY,AAAQ,AAAU,AAAS,AAAA,AAAClI,AAAI,AAAC4gB,AAAQF;AAClDze,AAAE,AAAK0e;AACPva,AAAE,AAAKua;AACP5X,AAAM,AAACjI;AACP+f,AAAO,AAAC7f;AACR+F,AAAK,AAAC9F;AANZ,AAAA,AAAA,AAAA,AAOM,AAAG,AAAGgB,AAAE,AAAA,AAAO,AAAG8G,AAAMhC,AAAQA,AAChC,AAAG,AAAGX,AAAE,AAAA,AAAO,AAAGya,AAAO9Z,AAAQA;;AAEzC,AAAA,AAAM+Z,AAAiBC,AAAUxL;AAAjC,AACE,AAAM0L,AAAI,AAAA,AAAA,AAAAhhB,AAAOjB;AACXkiB,AAAM,AAAA,AAAG,AAAa,AAAUD;AADtCD,AAE0B,AAACI,AAAuB,AAAA,AAAA,AAAAnhB,AAAoBjB;AAFtEgiB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAte,AAAA,AAAAse,AAAA,AAAA,AAAA,AAAA,AAAAre,AAAAC,AAAAoe,AAAAA;AAAA,AAAAhhB,AAAAghB,AAAA,AAEcG;AAFd,AAAAnhB,AAAAghB,AAAA,AAEmBvW;AAFnB,AAGE,AAAA,AAAA,AAAA4W,AAAC1gB;AAAD,AACe,AAAA0gB,AAACC,AAAkB,AAACtb,AAED,AAACub,AAASJ,AACAD;;;AAC5C,AAAA,AAAA,AAAAM,AAAC7gB;AAAD,AACe,AAAC4gB,AAASE,AACA,AAACC,AAAQ,AAACC,AAAS,AAAC1b,AACX,AAAAub,AAACG,AACD,AAACJ,AAAS9W,AACAyW;;;AAC5C,AAAA,AAACvgB,AACa,AAAKoG;AAAL,AACE,AAAM6a,AAAE,AAACL,AAASM,AAA0BX;AAA5C,AACE,AAAG,AAAGU,AAAE7a,AACL,AAAG,AAAA,AAAK6a,AACL,AAAI,AAAA,AAACld,AAAE,AAACwO,AACN4O,AACAC;;;AAC1B,AAACpgB;;AACD,AAAAqgB,AAAA,AAAAliB,AAAcM;AAAd6hB,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQpiB;AAAR,AAAA,AACE,AAAQ,AAACmH,AAAanH;;AADxB;AAAA,AAAAiiB;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAtV,AAAA,AAAA/M,AAAAkiB;AAAA,AAAA,AAAAnV;AAAA,AAAA,AAAAmV,AAAAnV;AAAA,AAAA,AAAA,AAAAC,AAAAkV;AAAA,AAAAjV,AAAA,AAAAC,AAAAgV;AAAA,AAAA,AAAA,AAAA/U,AAAA+U;AAAAjV;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAA6hB,AAAQjiB;AAAR,AAAA,AACE,AAAQ,AAACmH,AAAanH;;AADxB;AAAA,AAAA,AAAA6G,AAAAob;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAEA,AAAMhR,AAAM,AAASiQ;AACfmB,AAAM,AAAA,AAAA,AAAAniB,AAASjB;AADrB,AAEE,AAAMojB;AAAN,AACE,AAAAC,AAAA,AAAAviB,AAAuB,AAAC4iB,AAAKN;AAA7BE,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQC;AAAR,AAAA,AACE,AAAczR,AAAMyR;;AACpB,AAAUA,AAAe,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACva;;AAF5B;AAAA,AAAAma;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA3V,AAAA,AAAA/M,AAAAuiB;AAAA,AAAA,AAAAxV;AAAA,AAAA,AAAAwV,AAAAxV;AAAA,AAAA,AAAA,AAAAC,AAAAuV;AAAA,AAAAtV,AAAA,AAAAC,AAAAqV;AAAA,AAAA,AAAA,AAAApV,AAAAoV;AAAAtV;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAA,AAAA5M,AAAAkiB,AAAQI;AAAR,AAAA,AACE,AAAczR,AAAMyR;;AACpB,AAAUA,AAAe,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACva;;AAF5B;AAAA,AAAA,AAAAtB,AAAAyb;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;;AAIA,AAAAM,AAAA,AAAA7iB,AAAkB,AAACuF,AAAK6d,AAAO9iB,AAAoB,AAACgD;AAApDwf,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAAnjB,AAAAojB,AAAA,AAAA,AAAShjB;AAAT,AAAAJ,AAAAojB,AAAA,AAAA,AAAeE;AAAf,AAAA,AACE,AAAME,AAAU,AAAAC;AAAhB,AACE,AAAA,AAAA,AAACziB;AAAD0iB;AAAA,AACe,AAAAA,AAAC3iB,AAAQX,AAAMojB;;;;AAC9B,AAAM,AAAUA,AAAW,AAAA,AAAOF;;AAClC,AAAWjS,AAAMmS;;AALrB;AAAA,AAAAR;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAjW,AAAA,AAAA/M,AAAA6iB;AAAA,AAAA,AAAA9V;AAAA,AAAA,AAAA8V,AAAA9V;AAAA,AAAA,AAAA,AAAAC,AAAA6V;AAAA,AAAA5V,AAAA,AAAAC,AAAA2V;AAAA,AAAA,AAAA,AAAA1V,AAAA0V;AAAA5V;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAAiW,AAAA,AAAA7iB,AAAAwiB;AAAA,AAAAhjB,AAAAqjB,AAAA,AAAA,AAASjjB;AAAT,AAAAJ,AAAAqjB,AAAA,AAAA,AAAeC;AAAf,AAAA,AACE,AAAME,AAAU,AAAAC;AAAhB,AACE,AAAA,AAAA,AAACziB;AAAD0iB;AAAA,AACe,AAAAA,AAAC3iB,AAAQX,AAAMojB;;;;AAC9B,AAAM,AAAUA,AAAW,AAAA,AAAOF;;AAClC,AAAWjS,AAAMmS;;AALrB;AAAA,AAAA,AAAAvc,AAAA+b;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAMF,AAACtN,AAAiB0L,AAAUxL;;AAEhC,AAAA,AAAM+N,AAAiBC;AAAvB,AACE,AAAA,AAAA,AAAAC,AAAC7iB;AAAD,AAA6B,AAAA6iB,AAACrgB,AAAO,AAAChD,AAAM,AAAA,AAAW,AAACsjB,AAAe,AAAKF;;;AAE9E,AAAA,AAAMG,AAAkBC;AAAxB,AACE,AAAMC,AAAW,AAAU,AAAQD;AAC7B1hB,AAAE,AAAK2hB;AACPxd,AAAE,AAAKwd;AACP7a,AAAM,AAACjI;AACP+f,AAAO,AAAC7f;AACR+F,AAAK,AAAC9F;AALZ,AAAA,AAAA,AAMM4iB,AAAgB,AAAG,AAAG5hB,AAAE,AAAA,AAAO,AAAG8G,AAAMhC,AAAQA,AAChC,AAAG,AAAGX,AAAE,AAAA,AAAO,AAAGya,AAAO9Z,AAAQA;AAPvD,AAQE,AAAA,AAACpG,AACa,AAAK2U;AAAL,AACE,AAAM9R,AAAK,AAACC,AAAqB6R,AACAuO;AADjC,AAEE,AAAA,AAACnjB,AAAM,AAACyR,AAAMmD,AAAMuO,AACF,AAAA,AAAA,AAAM,AAAA,AAAQvO,AACZ,AAAG,AAAC3C,AAAqBnP,AACtB,AAAA,AAAY8R;;;AAEzD,AAAA,AAAMwO,AAAe1f;AAArB,AACE,AAAA,AAAA,AAAA2f,AAACpjB;AAAD,AACe,AAAAojB,AAAC5gB,AAAOiB;;;AAEzB,AAAA,AAAM4f,AAAwBxiB;AAA9B,AACE,AAAAyiB,AAAyCziB;AAAzC,AAAA7B,AAAAskB,AAAA,AAAA,AAAOzU;AAAP,AAAA7P,AAAAskB,AAAA,AAAA,AAAYjT;AAAZ,AAAArR,AAAAskB,AAAA,AAAA,AAAkBC;AAAlB,AAAAvkB,AAAAskB,AAAA,AAAA,AAA2BE;AAA3B,AAAAxkB,AAAAskB,AAAA,AAAA,AAA6B7R;AAA7B,AACE,AAAC3R,AAAMzB,AACA,AAAKsW;AAAL,AACE,AAAA,AAAA,AAAA,AAAA,AAAA8O,AAACC,AAAU/O,AACW9F,AAAKwB,AAAMkT;AADjC,AAEY,AAAAE,AAACE,AAAqBlS;;;;AAE/C,AAAA,AAAMmS,AAAeZ;AAArB,AACE,AAACD,AAAiBC;;AAClB,AAAAa,AAAA,AAAAvkB,AAAuBjB;AAAvBwlB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9hB,AAAA,AAAA8hB,AAAA,AAAA,AAAA,AAAA,AAAA7hB,AAAAC,AAAA4hB,AAAAA;AAAA,AAAAxkB,AAAAwkB,AAAA,AAAcnR;AACR/Q,AAAO,AAACoN;AACRuG,AAAY,AAAC5T,AAAeC,AAAO+Q;AACnCoR,AAAK,AAACvR;AAHZ,AAIE,AAAA,AAACvS,AACa,AAAK2U;AAAL,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC5U,AAAM4U,AAEWW,AACAwO,AACa,AAAC5R,AAAqBQ;;;AAEzE,AAAA,AAAMqR,AAAaf;AAAnB,AACE,AAACD,AAAiBC;;AAClB,AAAAgB,AAAA,AAAA1kB,AAA4CjB;AAA5C2lB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjiB,AAAA,AAAAiiB,AAAA,AAAA,AAAA,AAAA,AAAAhiB,AAAAC,AAAA+hB,AAAAA;AAAA,AAAA3kB,AAAA2kB,AAAA,AAActR;AAAd,AAAArT,AAAA2kB,AAAA,AAAoBE;AACdviB,AAAO,AAACoN;AACRuG,AAAY,AAAC5T,AAAeC,AAAO+Q;AAFzCuR,AAGoCvR;AAHpCuR,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAliB,AAAA,AAAAkiB,AAAA,AAAA,AAAA,AAAA,AAAAjiB,AAAAC,AAAAgiB,AAAAA;AAAA,AAAA5kB,AAAA4kB,AAAA,AAGclQ;AAHd,AAAA1U,AAAA4kB,AAAA,AAGwBnQ;AAHxB,AAIE,AAAM,AAACN;AAAP,AACE,AAAA2Q,AAAM,AAAC5R;AAAP4R,AAAA,AAAA,AAAAA,AAAA7S,AAAA,AAAA6S,AAAA;AAAA,AAAA,AAAAA;AAAA;AAEE,AAAM5O,AAAe,AAAC5S,AAAyBhB,AAAO+Q;AAChDqC,AAAuB,AAACrB;AAD9B,AAEE,AAAMqB;AAAN,AACE,AAAA,AAAC/U,AACa,AAAKyD;AAAL,AACE,AAAI,AAACM,AAAE,AAACrB,AAAM4S,AAAa,AAAC5S,AAAM6S;AAChC,AAAI,AAAA,AAACxR,AAAW,AAAA,AAAO,AAACjD,AAAe2C,AAAK,AAACuN,AAAI,AAAA,AAAA,AAACjQ,AAAYwU;AAC5D,AAAC6O,AAAmB3gB,AACA,AAACuN,AAAI,AAAA,AAAA,AAACjQ,AAAYuU,AAClBP;;AACpB,AAACsP,AAAkB5gB,AACA,AAACuN,AAAI,AAAA,AAAA,AAAA,AAAA,AAACjQ,AAAYwU,AAClBR;;;AACrB,AAACsP,AAAkB5gB,AACA,AAACuN,AAAI,AAAA,AAAA,AAACjQ,AAAYwU,AAClBR;;;;AAbvC;;;AAJJ;AAoBE,AAAAuP,AAAMvQ;AAANuQ,AAAA,AAAA,AAAAA,AAAAhT,AAAA,AAAAgT,AAAA;AAAA,AAAA,AAAAA;AAAA;AAEE,AAAMxQ;AAAN,AACE,AAAI,AAAC3R,AAAO2R;AACV,AAAI,AAACqP,AAAc,AAAC3jB,AAAM,AAAA,AAAW,AAAA,AAAA,AAAAF,AAAQjB;;AACzC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACqB;;AACD,AAAA,AAAA,AAACA;;AACL,AAAI,AAAM,AAAK,AAAA,AAAM,AAACgD,AAAMwhB,AACb,AAACngB,AAAEmgB,AAAqBpQ;AADnC,AAEE,AAAA,AAAC9T,AAAmCukB;;AAFtC;;AAGA,AAACpB,AAAc,AAACriB,AAAe,AAAA,AAAA,AAAAxB,AAAQjB,AACR,AAAC2S,AAAI,AAAA,AAAA,AAACjQ,AAAY+S;;AACjD,AAAA,AAAA,AAAA0Q,AAACxkB;AAAD,AACe,AAAAwkB,AAACC,AAAoB,AAACzT,AAAI,AAAA,AAAA,AAACjQ,AAAY+S;;;;AAX9D;;;AAFF;AAgBE,AAAA4Q,AAAuChS;AAAvCgS,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3iB,AAAA,AAAA2iB,AAAA,AAAA,AAAA,AAAA,AAAA1iB,AAAAC,AAAAyiB,AAAAA;AAAA,AAAArlB,AAAAqlB,AAAA,AAAc1Q;AAAd,AACE,AAAMA;AAAN,AACE,AAAMnC,AAAY,AAAClC;AAAnB,AACE,AAACwT,AACA,AAACjP,AAAOrC,AAAYmC;;AACrB,AAACqP,AAAuBrP;;AAJ5B;;;;AAjBJ;;;;AApBF;AA8CE,AAAMe,AAAuB,AAACrB;AAA9B,AACE,AAAMqB;AAAN,AACE,AAAC4P,AAAoB,AAACC,AAAe7P,AAChB4N;;AAFvB;;;AA/CJ;AAoDE,AAAMzD,AAAgB,AAAC/K;AACjBE,AAAa,AAAC1C,AAAgBe;AADpC,AAEE,AAAC5S,AAAMzB,AACA,AAAKsW;AAAL,AACE,AAAA,AAAAkQ,AAACnB,AAAU/O,AACA,AAAA,AAAA,AAAA,AAAA,AAAC5T,AAAmBsT;AAD/B,AAEY,AAAAwQ,AAACC,AAAqB5F,AAAgB,AAACxL;;;;;;AA1DhE;;;AADF;;AA8DA,AAAM,AAAK,AAAA,AAAC3P,AAAE,AAAA,AAAY2O,AACf,AAAK,AAACc;AADjB,AAEE,AAAA,AAAC9T,AAAgC,AAAA,AAAYgT;;AAC7C,AAAMsS,AAAY,AAAClkB,AAAe,AAAA,AAAA,AAAAxB,AAAQjB,AAAgB,AAAA,AAAA,AAAC0C,AAAW+S;AAAtEiR,AAC2BC;AAD3BD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhjB,AAAA,AAAAgjB,AAAA,AAAA,AAAA,AAAA,AAAA/iB,AAAAC,AAAA8iB,AAAAA;AAAA,AAAA1lB,AAAA0lB,AAAA,AACclhB;AADd,AAAAxE,AAAA0lB,AAAA,AACmBnlB;AADnB,AAEE,AAAI,AAAA,AAACmE,AAAEF;AACL,AAACjD,AAAoBkT;;AACrB,AAAM,AAAA,AAAA,AAAAxU,AAAmBjB;AAAzB,AACE,AAACqC;;AACD,AAAA,AAACV,AACa,AAAKyD;AAAL,AACE,AAAA,AAAA,AAAA,AAAA,AAAC2gB,AAAmB3gB,AACA,AAAA,AAAA,AAAC1C,AAAW,AAAA,AAAA,AAAAzB,AAAmBjB,AAEvB,AAAS,AAAA,AAAA,AAAAiB,AAAcjB;;;AACnE,AAAC4mB,AAAM,AAAS,AAAA,AAAA,AAAA3lB,AAAcjB;;AARhC;;;AAPN;;AAgBA,AAAA,AAAC2B,AACa,AAAK2U;AAAL,AACE,AAAA,AAAA,AAAA,AAAA,AAAC5U,AAAM4U;;;AAGvB,AAAA,AAACjV,AAA4B,AAAG,AAACgD,AAAM4S,AACP,AAAC5S,AAAM,AAAA,AAAA,AAAApD,AAAwBjB;;AAEnE,AAAA,AAAM6mB,AAAMC;AAAZ,AACE,AAAM7E,AAAI,AAAA,AAAC5gB,AACU,AAAA0lB,AAAmB,AAAA,AAAA,AAAA,AAAC7d;AACnC8I,AAAM,AAASiQ;AAFrB,AAGE,AAAA,AAAM,AAAoBjQ;;AAC1B,AAAA,AAAA,AAAC3Q;;AACD,AAAA2lB,AAAA,AAAAlmB,AAAkB,AAACuF,AAAK6d,AAAO9iB,AAAoB,AAACgD;AAApD6iB,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAAxmB,AAAAymB,AAAA,AAAA,AAASrmB;AAAT,AAAAJ,AAAAymB,AAAA,AAAA,AAAenD;AAAf,AAAA,AACE,AAAA,AAAA,AAACtiB;AAAD2lB;AAAA,AACe,AAAMrf,AAAS,AAAAsf;AAAf,AACE,AAAM,AAAUtf,AAAUgc;;AAC1B,AAAWjS,AAAM/J;;AACjB,AAAAqf,AAAC5lB,AAAQX,AAAMkH;;;;AALlC;AAAA,AAAA+e;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAtZ,AAAA,AAAA/M,AAAAkmB;AAAA,AAAA,AAAAnZ;AAAA,AAAA,AAAAmZ,AAAAnZ;AAAA,AAAA,AAAA,AAAAC,AAAAkZ;AAAA,AAAAjZ,AAAA,AAAAC,AAAAgZ;AAAA,AAAA,AAAA,AAAA/Y,AAAA+Y;AAAAjZ;AAAA,AAAA1J,AAAA0J;AAAA;;;;;;;AAAA,AAAAsZ,AAAA,AAAAlmB,AAAA6lB;AAAA,AAAArmB,AAAA0mB,AAAA,AAAA,AAAStmB;AAAT,AAAAJ,AAAA0mB,AAAA,AAAA,AAAepD;AAAf,AAAA,AACE,AAAA,AAAA,AAACtiB;AAAD2lB;AAAA,AACe,AAAMrf,AAAS,AAAAsf;AAAf,AACE,AAAM,AAAUtf,AAAUgc;;AAC1B,AAAWjS,AAAM/J;;AACjB,AAAAqf,AAAC5lB,AAAQX,AAAMkH;;;;AALlC;AAAA,AAAA,AAAAL,AAAAof;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAMA,AAACQ,AAA6B,AAAQvF;;AACtC,AAAM,AAAUA,AAAK6E;;AACrB,AAAMW,AAAY,AAAA,AAACzmB,AAAI,AAAC4gB,AAAQ,AAAW,AAAY,AAAA,AAAA,AAAA3gB,AAAOjB;AAA9D,AACE,AAAA,AAAKynB,AAA0BlC;;AAC/B,AAAA,AAAKkC,AAAwB/B;;AAC7B,AAAA,AAAK+B,AAA0B/C;;AACjC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACrjB;;AACD,AAAA,AAAA,AAACA;;AACD,AAAA,AAACA,AAA4B0hB;;AAC7B,AAAA,AAAC1hB,AAAgB,AAACojB,AAAeiD;;AACjC,AAAA,AAAA,AAACrmB;;AACD,AAAA,AAACA,AAAoBsmB;;AACrB,AAAMC,AAAK,AAAAC,AAAmBjd;AAA9B,AACE,AAAO,AAAOgd,AACP;AAAA,AACE,AAAA,AAAA,AAACvmB;;AACD,AAAA,AAACulB;;;AACZ,AAAMtkB,AAAW,AAAA,AAAgBwlB;AAAjC,AACE,AAAA,AAAM,AAAQxlB;;AACd,AAAc,AAAQwlB,AAAaxlB;;AACnC,AAAA,AAACjB,AAAsBiB;;AACvB,AAAA,AAAM,AAAY,AAASA;;AAC3B,AAACD;;AACH,AAACM","names":["js/ellah","js/ellah.graphics","js/ellah.graphics.graphics-state","ellah.graphics/graphics-state","cljs.core.atom","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","ellah.graphics/get-graphics","p__78847","vec__78848","cljs.core.nth","seq78846","self__4724__auto__","cljs.core/seq","layer","cljs.core.get","cljs.core/deref","or__4126__auto__","cljs.core/first","ellah.constants/ui-layers","ellah.graphics/set-attr!","key","value","p1__78851#","cljs.core.swap_BANG_","cljs.core.assoc","ellah.graphics/update-attr!","p1__78852#","cljs.core.update","ellah.graphics/app-width","js/window","ellah.graphics/app-height","ellah.graphics/app-size","x__4217__auto__","y__4218__auto__","ellah.graphics/app-aspect-ratio","ellah.graphics/hide-text-input","text-input","ellah.graphics/activate-text-input","path","ellah.vedn/get-child","cljs.core.concat","ellah.graphics/resize","current-width","current-height","text-width","ellah.constants/text-input-size","ellah.graphics/screen-x","x","w","h","s","ellah.graphics/layout-path-at","layout","pos","ellah.geometry/in-circle?","map__78853","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","sublayouts","cljs.core/empty?","cljs.core/some","i","sublayout","sub-path","cljs.core.conj","cljs.core.range","cljs.core/count","ellah.graphics/layout-insertion-path-at","map__78855","diff","ellah.geometry/subtract-points","cljs.core/List","cljs.core/mod","ellah.geometry/point-angle","ellah.geometry/PI","ellah.geometry/TAU","ellah.graphics/get-sublayout","G__78857","G__78858","cljs.core/rest","ellah.graphics/form-layout","form","starting-layout","map__78859","current-layout","type","children","cljs.core._EQ_","subform-count","G__78861","G__78862","ellah.constants/sole-subform-shrink-factor","raw-radius","Math/sin","Math/PI","unscaled-radius","radius","ellah.constants/bubble-thickness","cljs.core.mapv","subform","angle","G__78863","G__78864","ellah.geometry.add_points","ellah.geometry/scale-point","ellah.geometry/angle-point","ellah.constants/subform-shrink-factor","ellah.graphics/current-form-layout","ellah.geometry/origin","ellah.graphics/ideal-camera-pos","ellah.graphics/ideal-camera-zoom","ellah.constants/base-zoom","ellah.graphics/screen-y","y","ellah.graphics/rect","p__78868","p__78869","vec__78870","vec__78873","seq78865","G__78866","cljs.core/next","G__78867","self__4723__auto__","size","fill","graphics","ellah.graphics.get_graphics","ellah.graphics/circle","p__78879","p__78880","map__78881","vec__78882","seq78876","G__78877","G__78878","ellah.graphics/polygon","p__78890","vec__78891","seq78887","G__78888","G__78889","points","cljs.core/clj->js","p1__78886#","js/module$node_modules$pixi_DOT_js$dist$cjs$pixi.Point","ellah.graphics/line","p__78899","vec__78900","seq78894","G__78895","G__78896","G__78897","G__78898","start","end","width","color","ellah.graphics/text","p__78908","vec__78909","seq78903","G__78904","G__78905","G__78906","G__78907","length","t","js/module$node_modules$pixi_DOT_js$dist$cjs$pixi.Text","ellah.constants/font-name","scale","ellah.constants/text-max-size","ellah.constants/text-scale-factor","ellah.constants/text-x-offset","ellah.constants/text-y-offset","ellah.graphics/flatten-layout","cljs.core.mapcat","cljs.core.dissoc","ellah.graphics/app-rect","ellah.geometry/rect-around","ellah.geometry/unit-square","ellah.graphics/adjust-layout","zoom","p1__78912#","p1__78913#","cljs.core.partial","cljs.core/*","sub","p1__78914#","ellah.graphics/map-layout","from","to","p__78918","map__78919","offset","radius-change-factor","p1__78915#","p1__78916#","p1__78917#","f","ellah.geometry/unit","ellah.graphics/render-layout","p__78925","vec__78926","seq78923","G__78924","center","G__78930","fexpr__78929","ellah.graphics.circle","ellah.constants/foreground-color","G__78932","fexpr__78931","r","seq__78933","chunk__78934","count__78935","i__78936","temp__5753__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","base-angle","ellah.graphics.polygon","ellah.constants/map-point-width","ellah.constants/map-point-height","G__78938","fexpr__78937","seq__78939","chunk__78940","count__78941","i__78942","base-offset","ellah.constants/set-line-offset","seq__78951","chunk__78952","count__78953","i__78954","seq__78955","chunk__78956","count__78957","i__78958","ellah.graphics.line","ellah.constants/set-line-length","ellah.constants/set-line-width","G__78960","fexpr__78959","ellah.constants/background-color","p1__78921#","ellah.constants/vector-size-factor","ellah.geometry.polygon","p1__78922#","ellah.graphics.text","ellah.constants/text-color","ellah.graphics/formbar-offset","index","ellah.constants/formbar-pos","ellah.constants/formbar-radius","ellah.constants/formbar-spacing","ellah.graphics/formbar-zone-size","side","side-stage-count","ellah.graphics/adjusted-form-layout","vec__78961","current-app-rect","app-pos","app-size","min-y","max-y","min-x","max-x","form-rect","form-circle","ellah.geometry/circle-within","ellah.graphics/formbar-arrangement","cljs.core/zipmap","ellah.constants/screen-sides","cljs.core.map","vec__78964","map__78967","formbars","horizontal?","fexpr__78969","bar-stages","stage","stage-index","sizes","bar","x__4214__auto__","y__4215__auto__","ellah.constants/formbar-outline-thickness","total-size","cljs.core/+","edge-offset","offsets","cljs.core/vec","cljs.core/reverse","cljs.core.reduce","bar-offset","bar-pos","G__78970","cljs.core/Keyword","js/Error","cljs.core.merge","form-index","ellah.constants/formbar-form-size","ellah.graphics/formbar-path-at","full-arrangement","arrangement","fexpr__78971","bar-index","ellah.geometry/point-magnitude","ellah.geometry/in-rect?","ellah.graphics/formbar-form-path-at","map__78972","circles","circle-index","bar-circle","ellah.graphics/get-mouse-zone","vec__78974","map__78977","mouse","eval-zone-radius","cljs.core/select-keys","ellah.constants/discard-zone-radius","ellah.graphics/render-sublayouts","p__78981","vec__78982","seq78979","G__78980","seq__78985","chunk__78986","count__78987","i__78988","ellah.graphics.render_layout","ellah.graphics/mouse-dragging?","ellah.constants/min-drag-dist","ellah.graphics/placement-form","map__78989","map__78990","down?","down-path","down-zone","down-formbar-form-path","cljs.core/last","cljs.core.get_in","ellah.graphics/get-formbar-insertion-index","map__78993","formbar-path","screen-side","bar-arrangement","form-spacing","fexpr__78995","ellah.graphics/render-app-state","state","control-state","vec__78998","mouse-zone","current-placement-form","ellah.graphics.rect","map__79001","dragging?","ellah.graphics.render_sublayouts","ellah.constants/drag-cursor-radius","ellah.constants/highlight-color","layout-path","insertion-path","literal?","and__4115__auto__","parent-radius","ellah.constants/drop-form-radius-factor","child-count","placement-pos","ellah.constants/drop-form-offset-factor","ellah.constants/drag-cursor-line-width","base-sublayout","formbar-form-path","seq__79003","chunk__79004","count__79005","i__79006","fexpr__79729","fexpr__80090","side-arrangement","seq__79730","chunk__79731","count__79732","i__79733","seq__80091","chunk__80092","count__80093","i__80094","seq__79870","chunk__79871","count__79872","i__79873","seq__79938","chunk__79939","count__79940","i__79941","seq__80231","chunk__80232","count__80233","i__80234","seq__80299","chunk__80300","count__80301","i__80302","seq__79906","chunk__79907","count__79908","i__79909","vec__79916","vec__79919","seq__79922","chunk__79923","count__79924","i__79925","vec__79932","vec__79935","seq__79974","chunk__79975","count__79976","i__79977","vec__79984","vec__79987","seq__79990","chunk__79991","count__79992","i__79993","vec__80000","vec__80003","seq__80267","chunk__80268","count__80269","i__80270","vec__80277","vec__80280","seq__80283","chunk__80284","count__80285","i__80286","vec__80293","vec__80296","seq__80335","chunk__80336","count__80337","i__80338","vec__80345","vec__80348","seq__80351","chunk__80352","count__80353","i__80354","vec__80361","vec__80364","radius-factor","cljs.core/butlast","seq__80006","chunk__80007","count__80008","i__80009","seq__80367","chunk__80368","count__80369","i__80370","seq__80050","chunk__80051","count__80052","i__80053","seq__80070","chunk__80071","count__80072","i__80073","seq__80411","chunk__80412","count__80413","i__80414","seq__80431","chunk__80432","count__80433","i__80434","seq__80062","chunk__80063","count__80064","i__80065","seq__80066","chunk__80067","count__80068","i__80069","seq__80082","chunk__80083","count__80084","i__80085","seq__80086","chunk__80087","count__80088","i__80089","seq__80423","chunk__80424","count__80425","i__80426","seq__80427","chunk__80428","count__80429","i__80430","seq__80443","chunk__80444","count__80445","i__80446","seq__80447","chunk__80448","count__80449","i__80450","ellah.constants/discard-zone-bar-thickness","last-discard","ellah.constants/eval-zone-bar-thickness","Math/sqrt","ellah.constants/discard-zone-form-radius-factor","last-eval-form","ellah.constants/eval-zone-form-radius-factor","insertion-index","placement-circle","ellah.constants/formbar-placement-size","fexpr__80451","p1__78996#","p1__78997#","G__80454","G__80455","fexpr__80453","fexpr__80456","cljs.core/-","ellah.constants/formbar-placement-offset","ellah.graphics/get-mouse-pos","plugins","raw-pos","cljs.core.js__GT_clj","height","ellah.graphics/update-graphics","app-state","map__80460","app","delta","move","ellah.constants/camera-speed","p1__80457#","ellah.geometry/tween-points","Math/pow","p1__80458#","Math/E","ellah.util/tween","Math/log","p","ellah.constants/eval-zone-speed","ellah.constants/eval-zone-max-radius","ellah.constants/eval-zone-min-radius","seq__80462","chunk__80463","count__80464","i__80465","texts","seq__80466","chunk__80467","count__80468","i__80469","text-container","cljs.core/vals","seq__80470","chunk__80471","count__80472","i__80473","vec__80480","vec__80483","z","cljs.core/vector","container","js/module$node_modules$pixi_DOT_js$dist$cjs$pixi.Container","p1__80459#","ellah.graphics/log-eval-result","result","p1__80486#","ellah.vedn/clj->vedn","ellah.graphics/update-mouse-pos","event","screen-pos","current-pos","ellah.graphics/track-discard","p1__80487#","ellah.graphics/delete-formbar-form-at","vec__80489","substage","_","p1__80488#","cljs.core.update_in","ellah.vedn/vector-remove","ellah.graphics/on-click-down","map__80492","zone","ellah.graphics/on-click-up","map__80496","map__80497","selected-layout-path","G__80500","ellah.vedn/replace-child","ellah.vedn/insert-child","G__80501","cljs.core/pop","p1__80494#","ellah.vedn/remove-child","map__80502","ellah.evaluation.eval_clj","ellah.vedn/vedn->clj","p1__80495#","ellah.vedn/vector-insert","map__80504","zoomed-form","ellah.util.log","ellah.graphics/init","update-fn","js/module$node_modules$pixi_DOT_js$dist$cjs$pixi.Application","seq__80507","chunk__80508","count__80509","i__80510","vec__80517","vec__80520","p1__80506#","js/module$node_modules$pixi_DOT_js$dist$cjs$pixi.Graphics","js/document.body.appendChild","interaction","ellah.constants/starting-program","ellah.constants/formbar-defaults","font","js/module$node_modules$fontfaceobserver$fontfaceobserver_standalone","js/document"],"sourcesContent":["(ns ellah.graphics\n  (:require [\"pixi.js\" :as pixi]\n            [\"fontfaceobserver\" :as FaceFontObserver]\n            [ellah.util :as u]\n            [ellah.geometry :as geom]\n            [ellah.constants :as constants]\n            [ellah.vedn :as vedn]\n            [ellah.evaluation :as evaluation]))\n\n(defonce graphics-state (atom {}))\n\n(defn get-graphics [& [layer]]\n  (get (:graphics @graphics-state)\n       (or layer (first constants/ui-layers))))\n\n(defn set-attr! [key value]\n  (swap! graphics-state\n         #(assoc % key value))\n  value)\n\n(defn update-attr! [key value]\n  (swap! graphics-state\n         #(update % key value)))\n\n(defn app-width [] (.-innerWidth js/window))\n(defn app-height [] (.-innerHeight js/window))\n(defn app-size [] (min (app-width) (app-height)))\n(defn app-aspect-ratio [] (/ (app-width) (app-height)))\n\n(defn hide-text-input []\n  (let [text-input (:text-input @graphics-state)]\n    (set! (.-display (.-style text-input)) \"none\")))\n\n(defn activate-text-input [path]\n  (let [text-input (:text-input @graphics-state)]\n    (set! (.-display (.-style text-input)) \"block\")\n    (set! (.-value text-input)\n          (:value (vedn/get-child (:form @graphics-state)\n                                  (concat [0] path)))))\n  (set-attr! :text-input-path path))\n\n(defn resize []\n  (let [current-width (app-width)\n        current-height (app-height)]\n    (.resize (.-renderer (:app @graphics-state)) current-width current-height)\n    (let [text-input (:text-input @graphics-state)\n          text-width (* current-width constants/text-input-size)]\n      (set! (.-left (.-style text-input))\n            (str (int (/ (- current-width text-width) 2)) \"px\"))\n      (set! (.-top (.-style text-input))\n            (str (int (/ current-height 2)) \"px\"))\n      (set! (.-width (.-style (:text-input @graphics-state)))\n            (str (int text-width) \"px\")))))\n\n(defn screen-x [x]\n  (let [w (app-width)\n        h (app-height)\n        s (min w h)]\n    (+ (* 0.5 (- w s)) (* x s))))\n\n(defn layout-path-at [layout pos]\n  (when (geom/in-circle? layout pos)\n    (let [{:keys [sublayouts]} layout]\n      (if (empty? sublayouts)\n        '()\n        (or (some (fn [i]\n                    (let [sublayout (nth sublayouts i)\n                          sub-path (layout-path-at sublayout pos)]\n                      (when sub-path\n                        (conj sub-path i))))\n                  (range (count sublayouts)))\n            '())))))\n\n(defn layout-insertion-path-at [layout pos]\n  (when (geom/in-circle? layout pos)\n    (let [{:keys [sublayouts]} layout]\n      (if (empty? sublayouts)\n        '()\n        (or (some (fn [i]\n                    (let [sublayout (nth sublayouts i)\n                          sub-path (layout-insertion-path-at sublayout pos)]\n                      (when sub-path\n                        (conj sub-path i))))\n                  (range (count sublayouts)))\n            (let [diff (geom/subtract-points pos layout)]\n              (list (int (/ (* (count sublayouts)\n                               (mod (+ (geom/point-angle diff) geom/PI)\n                                    geom/TAU))\n                            geom/TAU)))))))))\n\n(defn get-sublayout [layout path]\n  (if (empty? path)\n    layout\n    (get-sublayout (nth (:sublayouts layout)\n                        (first path))\n                   (rest path))))\n\n(defn form-layout [form starting-layout]\n  (let [current-layout starting-layout\n        {:keys [type value children]} form]\n    (if (= type :literal)\n      (assoc current-layout\n             :type type\n             :value value)\n      (assoc current-layout\n             :type type\n             :sublayouts\n             (let [subform-count (count children)]\n               (if (= subform-count 1)\n                 [(form-layout (first children)\n                               (assoc current-layout\n                                      :radius (* constants/sole-subform-shrink-factor (:radius current-layout))))]\n                 (let [raw-radius (Math/sin (/ Math/PI subform-count))\n                       unscaled-radius (/ raw-radius (inc raw-radius))\n                       radius (* unscaled-radius (- 1 constants/bubble-thickness) (:radius current-layout))]\n                   (mapv (fn [subform i]\n                           (let [angle (- (* Math/PI -0.5)\n                                          (/ (* Math/PI 2 i) subform-count))]\n                             (form-layout subform\n                                          (assoc (geom/add-points current-layout\n                                                                  (geom/scale-point (geom/angle-point angle)\n                                                                                    (- (* (:radius current-layout)\n                                                                                          (- 1 constants/bubble-thickness))\n                                                                                       radius)))\n                                                 :radius (* constants/subform-shrink-factor radius)))))\n                         children\n                         (range)))))))))\n\n(defn current-form-layout []\n  (form-layout (first (:children (:form @graphics-state)))\n               (assoc geom/origin\n                      :radius 1)))\n\n(defn ideal-camera-pos []\n  (geom/scale-point (get-sublayout (current-form-layout)\n                                   (:selected-layout-path @graphics-state))\n                    -1))\n\n(defn ideal-camera-zoom []\n  (/ constants/base-zoom\n     (:radius\n      (get-sublayout (current-form-layout)\n                     (:selected-layout-path @graphics-state)))))\n\n(defn screen-y [y]\n  (let [w (app-width)\n        h (app-height)\n        s (min w h)]\n    (+ (* 0.5 (- h s)) (* y s))))\n\n(defn rect [[pos size] fill & [layer]]\n  (let [graphics (get-graphics layer)]\n    (.beginFill graphics fill)\n    (.drawRect graphics\n               (screen-x (:x pos))\n               (screen-y (:y pos))\n               (* (:x size) (app-size))\n               (* (:y size) (app-size)))\n    (.endFill graphics)))\n\n(defn circle [{:keys [x y radius]} fill & [layer]]\n  (let [graphics (get-graphics layer)]\n    (.beginFill graphics fill)\n    (.drawCircle graphics\n                 (screen-x x)\n                 (screen-y y)\n                 (* radius (app-size)))\n    (.endFill graphics)))\n\n(defn polygon [points fill & [layer]]\n  (let [graphics (get-graphics layer)]\n    (.beginFill graphics fill)\n    (.drawPolygon graphics\n                  (clj->js (mapv #(pixi/Point. (screen-x (:x %))\n                                               (screen-y (:y %)))\n                                 points)))\n    (.endFill graphics)))\n\n(defn line [start end width color & [layer]]\n  (let [graphics (get-graphics layer)]\n    (.lineStyle graphics\n                (* width (app-width))\n                color)\n    (.moveTo graphics\n             (screen-x (:x start))\n             (screen-y (:y start)))\n    (.lineTo graphics\n             (screen-x (:x end))\n             (screen-y (:y end)))\n    (.lineStyle graphics 0)))\n\n(defn text [s pos size color & [layer]]\n  (when (:font-loaded? @graphics-state)\n    (let [length (count s)\n          t (pixi/Text. (str s)\n                        (clj->js {:fontFamily constants/font-name\n                                  :fontSize \"8pt\"\n                                  :fill color}))\n          scale (* size (app-size)\n                   (min constants/text-max-size\n                        (/ constants/text-scale-factor\n                           length)))]\n      (set! (.-x t)\n            (- (+ (screen-x (:x pos))\n                  (* scale constants/text-x-offset))\n               (* (.-width t) scale 0.5)))\n      (set! (.-y t)\n            (- (+ (screen-y (:y pos))\n                  (* scale constants/text-y-offset))\n               (* (.-height t) scale 0.5)))\n      (set! (.-x (.-scale t)) scale)\n      (set! (.-y (.-scale t)) scale)\n      (set! (.-resolution t) 10)\n      (.addChild (get (:texts @graphics-state)\n                      (or layer (first constants/ui-layers)))\n                 t))))\n\n(defn flatten-layout [layout]\n  (if (:sublayouts layout)\n    (conj (mapcat flatten-layout\n                  (:sublayouts layout))\n          (dissoc layout :sublayouts))\n    (list layout)))\n\n(defn app-rect []\n  (geom/rect-around geom/unit-square\n                    (app-aspect-ratio)))\n\n(defn adjust-layout [layout pos zoom]\n  (-> layout\n      (update :x #(* zoom (+ % (:x pos))))\n      (update :y #(* zoom (+ % (:y pos))))\n      (update :radius (partial * zoom))\n      (update :sublayouts\n              (fn [sub]\n                (when sub\n                  (mapv #(adjust-layout % pos zoom)\n                        sub))))))\n\n(defn map-layout [layout from to]\n  ((fn f [layout {:keys [x y] :as offset} radius-change-factor]\n     (let []\n       (-> layout\n           (update :x #(+ x (* % radius-change-factor)))\n           (update :y #(+ y (* % radius-change-factor)))\n           (update :radius (partial * radius-change-factor))\n           (update :sublayouts\n                   (fn [sub]\n                     (when sub\n                       (mapv #(f %\n                                 offset\n                                 radius-change-factor)\n                             sub)))))))\n   layout\n   (geom/add-points #_(geom/subtract-points to from)\n                    (geom/subtract-points (geom/subtract-points to (geom/scale-point geom/unit (:radius to)))\n                                          (geom/subtract-points from (geom/scale-point geom/unit (:radius from))))\n                    #_{:x (- (- (:x to) (:radius to))\n                           (- (:x from) (:radius from)))})\n   (/ (:radius to) (:radius from))))\n\n(defn render-layout [layout & [layer]]\n  (let [center layout\n        radius (:radius layout)]\n    (when (#{:list :map :set :lit-fn :literal} (:type layout))\n      (circle layout\n              constants/foreground-color\n              layer))\n    (when (#{:map :lit-fn} (:type layout))\n      (let [r (:radius layout)]\n        (doseq [base-angle [(* geom/PI 0.25)\n                            (* geom/PI 0.75)\n                            (* geom/PI 1.25)\n                            (* geom/PI 1.75)]]\n          (polygon [(geom/add-points layout\n                                     (geom/scale-point (geom/angle-point (- base-angle constants/map-point-width))\n                                                       r))\n                    (geom/add-points layout\n                                     (geom/scale-point (geom/angle-point base-angle)\n                                                       (* (inc constants/map-point-height) r)))\n                    (geom/add-points layout\n                                     (geom/scale-point (geom/angle-point (+ base-angle constants/map-point-width))\n                                                       r))]\n                   constants/foreground-color\n                   layer))))\n    (when (#{:set :lit-fn} (:type layout))\n      (let [r (:radius layout)]\n        (doseq [angle [0\n                       (* geom/PI 0.5)\n                       geom/PI\n                       (* geom/PI 1.5)]]\n          (let [base-offset (geom/scale-point (geom/angle-point (+ angle (* geom/PI 0.5)))\n                                              (* r constants/set-line-offset))]\n            (doseq [offset [base-offset (geom/scale-point base-offset -1)]]\n              (line (geom/add-points offset layout)\n                    (geom/add-points layout\n                                     offset\n                                     (geom/scale-point (geom/angle-point angle)\n                                                       (* (inc constants/set-line-length) r)))\n                    (* r constants/set-line-width)\n                    constants/foreground-color\n                    layer))))))\n    (when (#{:list :map :set :lit-fn} (:type layout))\n      (circle (update layout\n                      :radius (partial *\n                                       (- 1 constants/bubble-thickness)))\n              constants/background-color\n              layer))\n    (when (= (:type layout) :vector)\n      (polygon (mapv #(geom/add-points center\n                                       (geom/scale-point %\n                                                         (* radius\n                                                            constants/vector-size-factor)))\n                     (geom/polygon 8\n                                   (* geom/PI 0.125)))\n               constants/foreground-color\n               layer)\n      (polygon (mapv #(geom/add-points center\n                                       (geom/scale-point %\n                                                         (* radius\n                                                            constants/vector-size-factor\n                                                            (- 1 constants/bubble-thickness))))\n                     (geom/polygon 8\n                                   (* geom/PI 0.125)))\n               constants/background-color\n               layer))\n    (when (= (:type layout) :literal)\n      (text (:value layout)\n            layout\n            (:radius layout)\n            constants/text-color\n            layer))))\n\n(defn formbar-offset [index]\n  (+ constants/formbar-pos\n     constants/formbar-radius\n     (* index (* 2 constants/formbar-radius constants/formbar-spacing))))\n\n(defn formbar-zone-size [side]\n  (let [side-stage-count (count (get (:formbars @graphics-state) side))]\n    (if (zero? side-stage-count)\n      0\n      (- (formbar-offset side-stage-count)\n         constants/formbar-radius))))\n\n(defn adjusted-form-layout []\n  (let [current-app-rect (app-rect)\n        [app-pos app-size] current-app-rect\n        min-y (+ (:y app-pos)\n                 (formbar-zone-size :top))\n        max-y (- (+ (:y app-size)\n                    (:y app-pos))\n                 (formbar-zone-size :bottom))\n        min-x (+ (:x app-pos)\n                 (formbar-zone-size :left))\n        max-x (- (+ (:x app-size)\n                    (:x app-pos))\n                 (formbar-zone-size :right))\n        form-rect [{:x min-x :y min-y}\n                   {:x (- max-x min-x) :y (- max-y min-y)}]\n        form-circle (geom/circle-within form-rect)]\n    (-> (current-form-layout)\n        (adjust-layout (:camera-pos @graphics-state)\n                       (:camera-zoom @graphics-state))\n        (adjust-layout geom/unit 0.5)\n        (map-layout (geom/circle-within current-app-rect)\n                    form-circle))))\n\n(defn formbar-arrangement []\n  (zipmap\n   constants/screen-sides\n   (map (fn [side]\n          (let [[app-pos app-size] (app-rect)\n                {:keys [formbars]} @graphics-state\n                horizontal? (#{:top :bottom} side)\n                bar-stages (get formbars side)]\n            (mapv (fn [stage stage-index]\n                    (let [sizes (mapv (fn [bar]\n                                        (max 0\n                                             (let [size (count (:forms bar))]\n                                               (* (dec size)\n                                                  2\n                                                  constants/formbar-radius\n                                                  (- 1 constants/formbar-outline-thickness)))))\n                                      stage)\n                          total-size (+ (apply + sizes)\n                                        (* (inc constants/formbar-spacing)\n                                           constants/formbar-radius\n                                           (dec (count stage))))\n                          edge-offset (+ constants/formbar-pos\n                                         constants/formbar-radius\n                                         (* stage-index\n                                            (+ constants/formbar-radius\n                                               (* constants/formbar-radius\n                                                  constants/formbar-spacing))))\n                          offsets (vec\n                                   (reverse\n                                    (reduce (fn [offsets size]\n                                              (conj offsets\n                                                    (+ (first offsets)\n                                                       size\n                                                       (* (inc constants/formbar-spacing)\n                                                          constants/formbar-radius))))\n                                            (list (* -0.5 total-size))\n                                            (rest (reverse sizes)))))]\n                      (mapv (fn [bar size bar-offset]\n                              (let [bar-pos (case side\n                                              :bottom {:x (+ (:x app-pos) (* 0.5 (:x app-size)) bar-offset)\n                                                       :y (- (+ (:y app-pos) (:y app-size)) edge-offset)}\n                                              :top {:x (+ (:x app-pos) (* 0.5 (:x app-size)) bar-offset)\n                                                    :y (+ (:y app-pos) edge-offset)}\n                                              :left {:x (+ (:x app-pos) edge-offset)\n                                                     :y (+ (:y app-pos) (* 0.5 (:y app-size)) bar-offset)}\n                                              :right {:x (- (+ (:x app-pos) (:x app-size)) edge-offset)\n                                                      :y (+ (:y app-pos) (* 0.5 (:y app-size)) bar-offset)})]\n                                (merge bar-pos\n                                       {:width (if horizontal? size 0)\n                                        :height (if horizontal? 0 size)\n                                        :circles\n                                        (mapv (fn [form form-index]\n                                                (assoc (geom/add-points bar-pos\n                                                                        (geom/scale-point\n                                                                         {(if horizontal? :x :y)\n                                                                          (* 2\n                                                                             (- 1 constants/formbar-outline-thickness)\n                                                                             constants/formbar-radius)}\n                                                                         form-index))\n                                                       :radius (* constants/formbar-radius\n                                                                  (- 1 constants/formbar-outline-thickness)\n                                                                  constants/formbar-form-size)\n                                                       :form form))\n                                              (:forms bar)\n                                              (range))})))\n                            stage\n                            sizes\n                            offsets)))\n                  bar-stages\n                  (range))))\n        constants/screen-sides)))\n\n(defn formbar-path-at [pos]\n  (let [full-arrangement (formbar-arrangement)]\n    (some (fn [side]\n            (let [arrangement (get full-arrangement side)\n                  horizontal? (#{:top :bottom} side)]\n              (some (fn [stage-index]\n                      (let [stage (nth arrangement stage-index)]\n                        (some (fn [bar-index]\n                                (let [bar (nth stage bar-index)]\n                                  (when (or (<= (geom/point-magnitude\n                                                 (geom/subtract-points pos\n                                                                       bar))\n                                                constants/formbar-radius)\n                                            (<= (geom/point-magnitude\n                                                 (geom/subtract-points pos\n                                                                       (geom/add-points bar\n                                                                                        (if horizontal?\n                                                                                          {:x (:width bar)}\n                                                                                          {:y (:height bar)}))))\n                                                constants/formbar-radius)\n                                            (geom/in-rect? (if horizontal?\n                                                             [(geom/subtract-points bar\n                                                                                    {:y constants/formbar-radius})\n                                                              {:x (:width bar)\n                                                               :y (* 2 constants/formbar-radius)}]\n                                                             [(geom/subtract-points bar\n                                                                                    {:x constants/formbar-radius})\n                                                              {:x (* 2 constants/formbar-radius)\n                                                               :y (:height bar)}])\n                                                           pos))\n                                    [side stage-index bar-index])))\n                              (range (count stage)))))\n                    (range (count arrangement)))))\n          constants/screen-sides)))\n\n(defn formbar-form-path-at [pos]\n  (let [full-arrangement (formbar-arrangement)]\n    (some (fn [side]\n            (let [arrangement (get full-arrangement side)]\n              (some (fn [stage-index]\n                      (let [stage (nth arrangement stage-index)]\n                        (some (fn [bar-index]\n                                (let [bar (nth stage bar-index)\n                                      {:keys [circles]} bar]\n                                  (some (fn [circle-index]\n                                          (let [bar-circle (nth circles circle-index)]\n                                            (when (geom/in-circle? bar-circle pos)\n                                              [side stage-index bar-index :circles circle-index :form])))\n                                        (range (count circles)))))\n                              (range (count stage)))))\n                    (range (count arrangement)))))\n          constants/screen-sides)))\n\n(defn get-mouse-zone []\n  (let [[app-pos app-size] (app-rect)\n        {:keys [mouse eval-zone-radius]} @graphics-state]\n    (cond (<= (geom/point-magnitude\n               (geom/subtract-points (geom/add-points app-pos\n                                                      (select-keys app-size [:y]))\n                                     mouse))\n              constants/discard-zone-radius)\n          :discard\n\n          (<= (geom/point-magnitude\n               (geom/subtract-points (geom/add-points app-pos\n                                                      app-size)\n                                     mouse))\n              eval-zone-radius)\n          :eval\n\n          (formbar-path-at mouse)\n          :formbar\n\n          :else :program)))\n\n(defn render-sublayouts [layout & [layer]]\n  (doseq [sublayout (flatten-layout layout)]\n    (render-layout sublayout layer)))\n\n(defn mouse-dragging? []\n  (> (:drag-dist (:mouse @graphics-state)) constants/min-drag-dist))\n\n(defn placement-form []\n  (let [{:keys [mouse formbars]} @graphics-state\n        {:keys [down? down-path down-zone down-formbar-form-path]} mouse]\n    (when down?\n      (cond (= down-zone :program)\n            (vedn/get-child (:form @graphics-state)\n                            (vec (concat '(0) down-path)))\n\n            (= down-zone :eval)\n            (last (:eval-results @graphics-state))\n\n            (= down-zone :discard)\n            (first (:discard-history @graphics-state))\n\n            down-formbar-form-path\n            (get-in (formbar-arrangement) down-formbar-form-path)))))\n\n(defn get-formbar-insertion-index []\n  (let [{:keys [mouse]} @graphics-state\n        formbar-path (formbar-path-at mouse)]\n    (when formbar-path-at\n      (let [arrangement (formbar-arrangement)\n            screen-side (first formbar-path)\n            bar-arrangement (get-in arrangement formbar-path)\n            form-spacing (* constants/formbar-radius\n                            (- 1 constants/formbar-outline-thickness))]\n        (if (zero? (count (:circles bar-arrangement)))\n              0\n              (let [horizontal? (#{:top :bottom} screen-side)\n                    offset (/ (if horizontal?\n                                (- (:x mouse) (:x bar-arrangement))\n                                (- (:y mouse) (:y bar-arrangement)))\n                              (* 2 form-spacing))]\n                (if (neg? offset)\n                  0\n                  (inc (int offset)))))))))\n\n(defn render-app-state [state control-state]\n  (let [current-app-rect (app-rect)\n        [app-pos app-size] current-app-rect\n        mouse-zone (get-mouse-zone)\n        current-placement-form (placement-form)]\n    (rect current-app-rect\n          constants/background-color\n          :background)\n    (let [{:keys [mouse]} @graphics-state\n          dragging? (mouse-dragging?)]\n      (render-sublayouts (adjusted-form-layout) :program)\n      (when (and dragging? (placement-form))\n        (circle (assoc mouse\n                       :radius constants/drag-cursor-radius)\n                constants/highlight-color\n                :drag))\n      (let [layout-path (layout-path-at (adjusted-form-layout)\n                                        (:mouse @graphics-state))\n            insertion-path (layout-insertion-path-at (adjusted-form-layout)\n                                                     (:mouse @graphics-state))\n            literal? (and (= (count layout-path) (count insertion-path))\n                          (= :literal (:type (vedn/get-child (:form @graphics-state)\n                                                             (vec (concat '(0) insertion-path))))))]\n        (when (and layout-path (not dragging?) literal?)\n          (circle (get-sublayout (adjusted-form-layout) layout-path)\n                  constants/highlight-color\n                  :program))\n        (when (and layout-path current-placement-form)\n          (let [sublayout (get-sublayout (adjusted-form-layout) layout-path)]\n            (when dragging?\n              (let [parent-radius (:radius sublayout)\n                    radius (* constants/drop-form-radius-factor\n                              (:radius (first (:sublayouts sublayout))))\n                    child-count (count (:sublayouts sublayout))\n                    angle (- (* (+ (/ (+ (last insertion-path) 0.5)\n                                      child-count)\n                                   0.25)\n                                geom/TAU))\n                    placement-pos (geom/add-points sublayout\n                                                   (geom/scale-point (geom/angle-point angle)\n                                                                     (- parent-radius\n                                                                        (* constants/drop-form-offset-factor\n                                                                           radius))))]\n                (when (= mouse-zone :program)\n                  (line mouse\n                        placement-pos\n                        constants/drag-cursor-line-width\n                        constants/highlight-color\n                        :drag-forms)\n                  (let [base-sublayout (form-layout (placement-form)\n                                                    (assoc geom/origin :radius 1))]\n                    (if literal?\n                      (render-sublayouts (adjust-layout base-sublayout\n                                                        (geom/scale-point sublayout\n                                                                          (/ (:radius sublayout)))\n                                                        (:radius sublayout))\n                                         :drag-forms)\n                      (if (= 0 (count (:children (vedn/get-child (:form @graphics-state)\n                                                                 (vec (concat '(0) layout-path))))))\n                        (render-sublayouts (adjust-layout base-sublayout\n                                                          (geom/scale-point sublayout\n                                                                            (/ (* constants/drop-form-radius-factor\n                                                                                  (:radius sublayout))))\n                                                          (* constants/drop-form-radius-factor\n                                                             (:radius sublayout)))\n                                           :drag-forms)\n                        (render-sublayouts (adjust-layout base-sublayout\n                                                          (geom/scale-point placement-pos\n                                                                            (/ radius))\n                                                          radius)\n                                           :drag-forms))))))))))\n      (let [arrangement (formbar-arrangement)\n            formbar-form-path (formbar-form-path-at mouse)]\n        (doseq [side constants/screen-sides]\n          (let [horizontal? (#{:top :bottom} side)\n                side-arrangement (get arrangement side)]\n            (doseq [stage side-arrangement]\n              (doseq [bar stage]\n                (doseq [[color radius-factor]\n                        [[constants/foreground-color 1]\n                         [constants/background-color (- 1 constants/formbar-outline-thickness)]]]\n                  (circle (assoc bar :radius (* constants/formbar-radius radius-factor))\n                          color\n                          :formbar)\n                  (if horizontal?\n                    (do (circle (assoc (geom/add-points bar\n                                                        {:x (:width bar)})\n                                       :radius (* constants/formbar-radius radius-factor))\n                                color\n                                :formbar)\n                        (rect [(geom/subtract-points bar {:y (* constants/formbar-radius radius-factor)})\n                               {:x (:width bar)\n                                :y (* 2 constants/formbar-radius radius-factor)}]\n                              color\n                              :formbar))\n                    (do (circle (assoc (geom/add-points bar\n                                                        {:y (:height bar)})\n                                       :radius (* constants/formbar-radius radius-factor))\n                                color\n                                :formbar)\n                        (rect [(geom/subtract-points bar {:x (* constants/formbar-radius radius-factor)})\n                               {:x (* 2 constants/formbar-radius radius-factor)\n                                :y (:height bar)}]\n                              color\n                              :formbar))))))\n            (when (and formbar-form-path\n                       (= (first formbar-form-path) side))\n              (circle (update (get-in arrangement\n                                      (butlast (formbar-form-path-at mouse)))\n                              :radius (partial * (/ constants/formbar-form-size)))\n                      constants/highlight-color\n                      :formbar))\n            (doseq [stage side-arrangement]\n              (doseq [bar stage]\n                (doseq [bar-circle (:circles bar)]\n                  (render-sublayouts (form-layout (:form bar-circle)\n                                                  bar-circle)\n                                     :formbar)))))))\n      \n      (circle (assoc (geom/add-points app-pos\n                                      (select-keys app-size [:y]))\n                     :radius constants/discard-zone-radius)\n              (if (= mouse-zone :discard)\n                constants/highlight-color\n                constants/foreground-color)\n              :menu)\n      (circle (assoc (geom/add-points app-pos\n                                      (select-keys app-size [:y]))\n                     :radius (* (- 1 constants/discard-zone-bar-thickness)\n                                constants/discard-zone-radius))\n              constants/background-color\n              :menu)\n      (let [last-discard (first (:discard-history @graphics-state))]\n        (when last-discard\n          (let [radius (/ (* (- 1 constants/eval-zone-bar-thickness)\n                             constants/discard-zone-radius)\n                          (inc (Math/sqrt 2)))]\n            (render-sublayouts (form-layout last-discard\n                                            (assoc (-> app-pos\n                                                       (update :y (partial + (- (:y app-size) radius)))\n                                                       (update :x (partial + radius)))\n                                                   :radius (* radius\n                                                              constants/discard-zone-form-radius-factor)))\n                               :menu)\n            :menu)))\n      (let [eval-zone-radius (:eval-zone-radius @graphics-state)]\n        (circle (assoc (geom/add-points app-pos app-size)\n                       :radius eval-zone-radius)\n                (if (= mouse-zone :eval)\n                  constants/highlight-color\n                  constants/foreground-color)\n                :menu)\n        (circle (assoc (geom/add-points app-pos app-size)\n                       :radius (* (- 1 constants/discard-zone-bar-thickness)\n                                  eval-zone-radius))\n                constants/background-color\n                :menu)\n        (let [last-eval-form (last (:eval-results @graphics-state))]\n          (when last-eval-form\n            (let [radius (/ (* (- 1 constants/eval-zone-bar-thickness)\n                               (:eval-zone-radius @graphics-state))\n                            (inc (Math/sqrt 2)))]\n              (render-sublayouts (form-layout last-eval-form\n                                              (assoc (geom/subtract-points (geom/add-points app-pos app-size)\n                                                                           (geom/scale-point geom/unit radius))\n                                                     :radius (* radius\n                                                                constants/eval-zone-form-radius-factor)))\n                                 :menu)))))\n      (when (and (= mouse-zone :formbar) current-placement-form)\n        (let [formbar-path (formbar-path-at mouse)]\n          (when formbar-path\n           (let [arrangement (formbar-arrangement)\n                 screen-side (first formbar-path)\n                 bar-arrangement (get-in arrangement formbar-path)\n                 form-spacing (* constants/formbar-radius\n                                 (- 1 constants/formbar-outline-thickness))\n                 insertion-index (get-formbar-insertion-index)\n                 placement-circle\n                 (if (zero? (count (:circles bar-arrangement)))\n                   (-> bar-arrangement\n                       (assoc :radius\n                              (* form-spacing\n                                 constants/formbar-placement-size)))\n                   (let [horizontal? (#{:top :bottom} screen-side)]\n                     (-> bar-arrangement\n                         (assoc :radius\n                                (* form-spacing\n                                   constants/formbar-placement-size))\n                         (update (if horizontal? :x :y)\n                                 #(+ % (* (- insertion-index 0.5) 2 form-spacing)))\n                         (update (if horizontal? :y :x)\n                                 #((if (#{:top :left} screen-side) + -)\n                                   %\n                                   (* form-spacing\n                                      constants/formbar-placement-offset))))))]\n             (render-sublayouts (form-layout (placement-form) placement-circle)\n                                :formbar))))))))\n\n(defn get-mouse-pos []\n  (let [plugins (.-plugins (.-renderer (:app @graphics-state)))\n        raw-pos (clj->js (.-global (.-mouse (get (js->clj plugins) \"interaction\"))))\n        x (.-x raw-pos)\n        y (.-y raw-pos)\n        width (app-width)\n        height (app-height)\n        size (app-size)]\n    {:x (/ (- x (* 0.5 (- width size))) size)\n     :y (/ (- y (* 0.5 (- height size))) size)}))\n\n(defn update-graphics [app-state control-state]\n  (let [app (:app @graphics-state)\n        delta (/ (.-elapsedMS (.-ticker app)) 1000)\n        {:keys [move zoom]} (constants/camera-speed (:camera-move-diff @graphics-state))]\n    (update-attr! :camera-pos\n                  #(geom/tween-points (ideal-camera-pos)\n                                      %\n                                      (Math/pow move\n                                                delta)))\n    (update-attr! :camera-zoom\n                  #(Math/pow Math/E\n                             (u/tween (Math/log (ideal-camera-zoom))\n                                      (Math/log %)\n                                      (Math/pow zoom\n                                                delta))))\n    (update-attr! :eval-zone-radius\n                  (fn [size]\n                    (let [p (Math/pow constants/eval-zone-speed delta)]\n                      (+ (* p size)\n                         (* (- 1 p)\n                            (if (= (get-mouse-zone) :eval)\n                              constants/eval-zone-max-radius\n                              constants/eval-zone-min-radius))))))\n    (resize)\n    (doseq [layer constants/ui-layers]\n      (.clear (get-graphics layer)))\n    (let [stage (.-stage app)\n          texts (:texts @graphics-state)]\n      (when texts\n        (doseq [text-container (vals texts)]\n          (.removeChild stage text-container)\n          (.destroy text-container (clj->js {:children true :texture true :baseTexture true}))))\n      (doseq [[layer z] (mapv vector constants/ui-layers (range))]\n        (let [container (pixi/Container.)]\n          (update-attr! :texts\n                        #(assoc % layer container))\n          (set! (.-zIndex container) (+ 0.5 z))\n          (.addChild stage container))))\n    (render-app-state app-state control-state)))\n\n(defn log-eval-result [result]\n  (update-attr! :eval-results #(conj % (first (:children (vedn/clj->vedn (str result)))))))\n\n(defn update-mouse-pos [event]\n  (let [screen-pos (.-global (.-data event))\n        x (.-x screen-pos)\n        y (.-y screen-pos)\n        width (app-width)\n        height (app-height)\n        size (app-size)\n        current-pos {:x (/ (- x (* 0.5 (- width size))) size)\n                     :y (/ (- y (* 0.5 (- height size))) size)}]\n    (update-attr! :mouse\n                  (fn [state]\n                    (let [diff (geom/subtract-points state\n                                                     current-pos)]\n                      (assoc (merge state current-pos)\n                             :drag-dist (when (:down? state)\n                                          (+ (geom/point-magnitude diff)\n                                             (:drag-dist state)))))))))\n\n(defn track-discard [form]\n  (update-attr! :discard-history\n                #(conj % form)))\n\n(defn delete-formbar-form-at [path]\n  (let [[side stage substage _ form-index] path]\n    (swap! graphics-state\n           (fn [state]\n             (update-in state\n                        [:formbars side stage substage :forms]\n                        #(vedn/vector-remove % form-index))))))\n\n(defn on-click-down [event]\n  (update-mouse-pos event)\n  (let [{:keys [mouse]} @graphics-state\n        layout (adjusted-form-layout)\n        layout-path (layout-path-at layout mouse)\n        zone (get-mouse-zone)]\n    (update-attr! :mouse\n                  (fn [state]\n                    (assoc state\n                           :down? true\n                           :down-path layout-path\n                           :down-zone zone\n                           :down-formbar-form-path (formbar-form-path-at mouse))))))\n\n(defn on-click-up [event]\n  (update-mouse-pos event)\n  (let [{:keys [mouse selected-layout-path]} @graphics-state\n        layout (adjusted-form-layout)\n        layout-path (layout-path-at layout mouse)\n        {:keys [down-zone down-path]} mouse]\n    (when (mouse-dragging?)\n      (case (get-mouse-zone)\n        :program\n        (let [insertion-path (layout-insertion-path-at layout mouse)\n              current-placement-form (placement-form)]\n          (when current-placement-form\n            (update-attr! :form\n                          (fn [form]\n                            (if (= (count layout-path) (count insertion-path))\n                              (if (= :literal (:type (vedn/get-child form (vec (concat '(0) insertion-path)))))\n                                (vedn/replace-child form\n                                                    (vec (concat '(0) layout-path))\n                                                    current-placement-form)\n                                (vedn/insert-child form\n                                                   (vec (concat '(0) insertion-path '(0)))\n                                                   current-placement-form))\n                              (vedn/insert-child form\n                                                 (vec (concat '(0) insertion-path))\n                                                 current-placement-form))))))\n\n        :discard\n        (case down-zone\n          :program\n          (when down-path\n            (if (empty? down-path)\n              (do (track-discard (first (:children (:form @graphics-state))))\n                  (set-attr! :form {:type :vector :children [{:type :list :children []}]})\n                  (set-attr! :selected-layout-path nil))\n              (do (when (and (pos? (count selected-layout-path))\n                             (= selected-layout-path down-path))\n                    (update-attr! :selected-layout-path pop))\n                  (track-discard (vedn/get-child (:form @graphics-state)\n                                                 (vec (concat '(0) down-path))))\n                  (update-attr! :form\n                                #(vedn/remove-child % (vec (concat '(0) down-path)))))))\n\n          :formbar\n          (let [{:keys [down-formbar-form-path]} mouse]\n            (when down-formbar-form-path\n              (let [arrangement (formbar-arrangement)]\n                (track-discard\n                 (get-in arrangement down-formbar-form-path))\n                (delete-formbar-form-at down-formbar-form-path))))\n\n          nil)\n\n        :eval\n        (let [current-placement-form (placement-form)]\n          (when current-placement-form\n            (evaluation/eval-clj (vedn/vedn->clj current-placement-form)\n                                 log-eval-result)))\n\n        :formbar\n        (let [insertion-index (get-formbar-insertion-index)\n              formbar-path (formbar-path-at mouse)]\n          (swap! graphics-state\n                 (fn [state]\n                   (update-in state\n                              (concat [:formbars] formbar-path [:forms])\n                              #(vedn/vector-insert % insertion-index (placement-form))))))\n\n        nil))\n    (when (and (= (:down-zone mouse) :program)\n               (not (mouse-dragging?)))\n      (set-attr! :selected-layout-path (:down-path mouse))\n      (let [zoomed-form (vedn/get-child (:form @graphics-state) (concat [0] down-path))\n            {:keys [type value]} zoomed-form]\n        (if (= type :literal)\n          (activate-text-input down-path)\n          (when (:text-input-path @graphics-state)\n            (hide-text-input)\n            (update-attr! :form\n                          (fn [form]\n                            (vedn/replace-child form\n                                                (concat [0] (:text-input-path @graphics-state))\n                                                {:type :literal\n                                                 :value (.-value (:text-input @graphics-state))})))\n            (u/log (.-value (:text-input @graphics-state)))))))\n    (update-attr! :mouse\n                  (fn [state]\n                    (assoc state\n                           :down? false\n                           :drag-dist 0)))\n    (set-attr! :camera-move-diff (- (count layout-path)\n                                    (count (:selected-layout-path @graphics-state))))))\n\n(defn init [update-fn]\n  (let [app (set-attr! :app\n                       (pixi/Application. (clj->js {:autoResize true})))\n        stage (.-stage app)]\n    (set! (.-sortableChildren stage) true)\n    (set-attr! :graphics {})\n    (doseq [[layer z] (mapv vector constants/ui-layers (range))]\n      (update-attr! :graphics\n                    #(let [graphics (pixi/Graphics.)]\n                       (set! (.-zIndex graphics) z)\n                       (.addChild stage graphics)\n                       (assoc % layer graphics))))\n    (js/document.body.appendChild (.-view app))\n    (.add (.-ticker app) update-fn)\n    (let [interaction (get (js->clj (.-plugins (.-renderer (:app @graphics-state)))) \"interaction\")]\n      (.on interaction \"pointerdown\" on-click-down)\n      (.on interaction \"pointerup\" on-click-up)\n      (.on interaction \"pointermove\" update-mouse-pos))\n    (set-attr! :camera-pos {:x 0 :y 0})\n    (set-attr! :camera-zoom 1)\n    (set-attr! :eval-zone-radius constants/eval-zone-min-radius)\n    (set-attr! :form (vedn/clj->vedn constants/starting-program))\n    (set-attr! :eval-results [])\n    (set-attr! :formbars constants/formbar-defaults)\n    (let [font (FaceFontObserver. constants/font-name)]\n      (.then (.load font)\n             (fn []\n               (set-attr! :font-loaded? true)\n               (u/log \"Font loaded.\"))))\n    (let [text-input (.createElement js/document \"input\")]\n      (set! (.-type text-input) \"text\")\n      (.appendChild (.-body js/document) text-input)\n      (set-attr! :text-input text-input)\n      (set! (.-position (.-style text-input)) \"absolute\")\n      (hide-text-input))\n    (resize)))"]}