{"version":3,"sources":["ellah/graphics.cljs"],"mappings":";;;AASA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAe,AAAA,AAACC;;AAEzB,AAAA,AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD;AAAN,AAAA,AAAAE,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAuBK;AAAvB,AACE,AAACC,AAAI,AAAA,AAAA,AAAAC,AAAYjB,AACZ,AAAAkB,AAAIH;AAAJ,AAAA,AAAAG;AAAAA;;AAAU,AAACC,AAAMC;;;;;AAFxB,AAAA,AAAA,AAAMZ;;AAAN;AAAA,AAAA,AAAA,AAAAI,AAAMJ;AAAN,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAIA,AAAA,AAAMS,AAAWC,AAAIC;AAArB,AACE,AAAA,AAAAC,AAACC,AAAMzB;AAAP,AACQ,AAAAwB,AAACE,AAAQJ,AAAIC;;;AACrBA;;AAEF,AAAA,AAAMI,AAAcL,AAAIC;AAAxB,AACE,AAAA,AAAAK,AAACH,AAAMzB;AAAP,AACQ,AAAA4B,AAACC,AAASP,AAAIC;;;AAExB,AAAA,AAAMO;AAAN,AAAmB,AAAcC;;AACjC,AAAA,AAAMC;AAAN,AAAoB,AAAeD;;AACnC,AAAA,AAAME;AAAN,AAAkB,AAAAC,AAAK,AAACJ;AAANK,AAAiB,AAACH;AAAlB,AAAA,AAAAE,AAAAC,AAAAD,AAAAC;;AAClB,AAAA,AAAMC;AAAN,AAA0B,AAAG,AAACN,AAAW,AAACE;;AAE1C,AAAA,AAAMK;AAAN,AACE,AAAS,AAAY,AAAA,AAAA,AAAApB,AAAOjB,AAAiB,AAAC8B,AAAW,AAACE;;AAE5D,AAAA,AAAMM,AAAUC;AAAhB,AACE,AAAMC,AAAE,AAACV;AACHW,AAAE,AAACT;AACHU,AAAE,AAAAR,AAAKM;AAALL,AAAOM;AAAP,AAAA,AAAAP,AAAAC,AAAAD,AAAAC;;AAFR,AAGE,AAAG,AAAA,AAAO,AAAGK,AAAEE,AAAI,AAAGH,AAAEG;;AAE5B,AAAA,AAAMC,AAAgBC,AAAOC;AAA7B,AACE,AAAM,AAACC,AAAgBF,AAAOC;AAA9B,AACE,AAAAE,AAA2BH;AAA3BG,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAA/B,AAAA+B,AAAA,AAAcI;AAAd,AACE,AAAI,AAACC,AAAOD;AAAZ,AAAA;;AAEE,AAAAjC,AAAI,AAACmC,AAAK,AAAKC;AAAL,AACE,AAAMC,AAAU,AAAC5C,AAAIwC,AAAWG;AAC1BE,AAAS,AAACb,AAAAA,AAAAA,AAAeY,AAAAA,AAAUV,AAAAA;AADzC,AAEE,AAAMW;AAAN,AACE,AAACC,AAAKD,AAASF;;AADjB;;AAEJ,AAACI,AAAM,AAACC,AAAMR;AALxB,AAAA,AAAAjC;AAAAA;;AAAA,AAAA;;;;AAJN;;;AAYF,AAAA,AAAM0C,AAA0BhB,AAAOC;AAAvC,AACE,AAAM,AAACC,AAAgBF,AAAOC;AAA9B,AACE,AAAAgB,AAA2BjB;AAA3BiB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAb,AAAA,AAAAa,AAAA,AAAA,AAAA,AAAA,AAAAZ,AAAAC,AAAAW,AAAAA;AAAA,AAAA7C,AAAA6C,AAAA,AAAcV;AAAd,AACE,AAAI,AAACC,AAAOD;AAAZ,AAAA;;AAEE,AAAAjC,AAAI,AAACmC,AAAK,AAAKC;AAAL,AACE,AAAMC,AAAU,AAAC5C,AAAIwC,AAAWG;AAC1BE,AAAS,AAACI,AAAAA,AAAAA,AAAyBL,AAAAA,AAAUV,AAAAA;AADnD,AAEE,AAAMW;AAAN,AACE,AAACC,AAAKD,AAASF;;AADjB;;AAEJ,AAACI,AAAM,AAACC,AAAMR;AALxB,AAAA,AAAAjC;AAAAA;;AAMI,AAAM4C,AAAK,AAACC,AAAqBlB,AAAID;AAArC,AACE,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAAK,AAAG,AAAG,AAACL,AAAMR,AACP,AAACc,AAAI,AAAG,AAACC,AAAiBJ,AAAMK,AAC3BC,AACRA;;;;AAd1B;;;AAgBF,AAAA,AAAMC,AAAezB,AAAO0B;AAA5B,AACE,AAAI,AAAClB,AAAOkB;AACV1B;;AACA,AAAA2B,AAAe,AAAC5D,AAAI,AAAA,AAAaiC,AACb,AAACzB,AAAMmD;AAD3BE,AAEe,AAACC,AAAKH;AAFrB,AAAA,AAAAC,AAAAC,AAAAD,AAAAC,AAACH,AAAAA,AAAAA;;;AAIL,AAAA,AAAMK,AAAaC,AAAKC;AAAxB,AACE,AAAME,AAAeF;AAArBC,AACoCF;AADpCE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7B,AAAA,AAAA6B,AAAA,AAAA,AAAA,AAAA,AAAA5B,AAAAC,AAAA2B,AAAAA;AAAA,AAAA7D,AAAA6D,AAAA,AACcE;AADd,AAAA/D,AAAA6D,AAAA,AACmBtD;AADnB,AAAAP,AAAA6D,AAAA,AACyBG;AADzB,AAEE,AAAI,AAAA,AAACC,AAAEF;AACL,AAAA,AAAA,AAACrD,AAAMoD,AACMC,AACCxD;;AACd,AAAA,AAAA,AAACG,AAAMoD,AACMC,AAEN,AAAMG,AAAc,AAACvB,AAAMqB;AAA3B,AACE,AAAI,AAAA,AAACC,AAAEC;AAAP,AACG,AAAAC,AAAa,AAAChE,AAAM6D;AAApBI,AACa,AAAA,AAAC1D,AAAMoD,AACQ,AAAGO,AAAqC,AAAA,AAASP;AAF7E,AAAA,AAAAK,AAAAC,AAAAD,AAAAC,AAACV,AAAAA,AAAAA;;;AAGF,AAAMY,AAAW,AAACC,AAAS,AAAGC,AAAQN;AAChCO,AAAgB,AAAGH,AAAW,AAAA,AAAKA;AACnCI,AAAO,AAAA,AAAGD,AAAgB,AAAA,AAAKE,AAA4B,AAAA,AAASb;AAF1E,AAGE,AAACc,AAAK,AAAKC,AAAQvC;AAAb,AACE,AAAMwC,AAAM,AAAG,AAAA,AAAGN,AACH,AAAG,AAAA,AAAA,AAAGA,AAAUlC,AAAG4B;AADlC,AAEE,AAAAa,AAAaF;AAAbG,AACa,AAAA,AAACtE,AAAM,AAACuE,AAAgBnB,AACA,AAACoB,AAAiB,AAACC,AAAiBL,AAClB,AAAG,AAAG,AAAA,AAAShB,AACT,AAAA,AAAKa,AACRD,AAC9B,AAAGU,AAAgCV;AAN/D,AAAA,AAAAK,AAAAC,AAAAD,AAAAC,AAACtB,AAAAA,AAAAA;AAOLM,AACA,AAACtB;;;;;AAE1B,AAAA,AAAM2C;AAAN,AACE,AAAC3B,AAAY,AAACvD,AAAM,AAAA,AAAW,AAAA,AAAA,AAAAF,AAAQjB,AAC1B,AAAA,AAAA,AAAC0B,AAAM4E;;AAGtB,AAAA,AAAMC;AAAN,AACE,AAAA,AAACL,AAAiB,AAAC7B,AAAc,AAACgC,AACD,AAAA,AAAA,AAAApF,AAAwBjB;;AAG3D,AAAA,AAAMwG;AAAN,AACE,AAAGC,AACA,AAAA,AACC,AAACpC,AAAc,AAACgC,AACD,AAAA,AAAA,AAAApF,AAAwBjB;;AAE7C,AAAA,AAAM0G,AAAUC;AAAhB,AACE,AAAMnE,AAAE,AAACV;AACHW,AAAE,AAACT;AACHU,AAAE,AAAAR,AAAKM;AAALL,AAAOM;AAAP,AAAA,AAAAP,AAAAC,AAAAD,AAAAC;;AAFR,AAGE,AAAG,AAAA,AAAO,AAAGM,AAAEC,AAAI,AAAGiE,AAAEjE;;AAE5B,AAAA,AAAA,AAAAxC,AAAM0G;AAAN,AAAA,AAAAzG,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAtG;;;AAAA,AAAA,AAAA,AAAA,AAAAuG,AAAMD,AAAM/D,AAAIwE,AAAKC;AAArB,AAAA,AAAAR,AAAAD;AAAA,AAAAlG,AAAAmG,AAAA,AAAA,AAA6B/F;AAA7B,AACE,AAAMwG,AAAS,AAACC,AAAazG;AAA7B,AACE,AAAYwG,AAASD;;AACrB,AAAWC,AACA,AAACjF,AAAS,AAAA,AAAIO,AACd,AAAC6D,AAAS,AAAA,AAAI7D,AACd,AAAG,AAAA,AAAIwE,AAAM,AAACpF,AACd,AAAG,AAAA,AAAIoF,AAAM,AAACpF;;AACzB,AAAUsF;;;AARd,AAAA,AAAA,AAAMX;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAA7F,AAAA4F;AAAAA,AAAA,AAAAE,AAAAF;AAAAG,AAAA,AAAA/F,AAAA4F;AAAAA,AAAA,AAAAE,AAAAF;AAAAI,AAAA,AAAAhG,AAAA4F;AAAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA,AAAAJ,AAAAE,AAAAC,AAAAJ;;;AAAA,AAUA,AAAA,AAAA,AAAA7G,AAAMuH;AAAN,AAAA,AAAAtH,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAnH;;;AAAA,AAAA,AAAA,AAAA,AAAAoH,AAAAC,AAAMF,AAA6BH;AAAnC,AAAA,AAAAM,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5E,AAAA,AAAA4E,AAAA,AAAA,AAAA,AAAA,AAAA3E,AAAAC,AAAA0E,AAAAA;AAAA,AAAA5G,AAAA4G,AAAA,AAAsBrF;AAAtB,AAAAvB,AAAA4G,AAAA,AAAwBjB;AAAxB,AAAA3F,AAAA4G,AAAA,AAA0BlC;AAA1BmC,AAAAF;AAAA,AAAAhH,AAAAkH,AAAA,AAAA,AAA2C9G;AAA3C,AACE,AAAMwG,AAAS,AAACC,AAAazG;AAA7B,AACE,AAAYwG,AAASD;;AACrB,AAAaC,AACA,AAACjF,AAASC,AACV,AAACmE,AAASC,AACV,AAAGjB,AAAO,AAACzD;;AACxB,AAAUsF;;;AAPd,AAAA,AAAA,AAAME;;AAAN;AAAA,AAAA,AAAA,AAAAK,AAAML;AAAN,AAAA,AAAAM,AAAA,AAAA5G,AAAA2G;AAAAA,AAAA,AAAAb,AAAAa;AAAAE,AAAA,AAAA7G,AAAA2G;AAAAA,AAAA,AAAAb,AAAAa;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAA,AAAAA,AAAAW,AAAAC,AAAAF;;;AAAA,AASA,AAAA,AAAA,AAAA5H,AAAM+H;AAAN,AAAA,AAAA9H,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8H,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA3H;;;AAAA,AAAA,AAAA,AAAA,AAAA4H,AAAMD,AAASM,AAAOjB;AAAtB,AAAA,AAAAa,AAAAD;AAAA,AAAAvH,AAAAwH,AAAA,AAAA,AAA8BpH;AAA9B,AACE,AAAMwG,AAAS,AAACC,AAAazG;AAA7B,AACE,AAAYwG,AAASD;;AACrB,AAAcC,AACA,AAACiB,AAAQ,AAAA,AAAAC,AAAC7C;AAAD,AAAO,AAAA8C,AAAa,AAACpG,AAAS,AAAA,AAAAmG,AACV,AAAC/B,AAAS,AAAA,AAAA+B;AACxBF;;AAC7B,AAAUhB;;;AAPd,AAAA,AAAA,AAAMU;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAlH,AAAAiH;AAAAA,AAAA,AAAAnB,AAAAmB;AAAAE,AAAA,AAAAnH,AAAAiH;AAAAA,AAAA,AAAAnB,AAAAmB;AAAA,AAAA,AAAAhB,AAAA;AAAA,AAAA,AAAAA,AAAAiB,AAAAC,AAAAF;;;AAAA,AASA,AAAA,AAAA,AAAAlI,AAAMyI;AAAN,AAAA,AAAAxI,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAArI;;;AAAA,AAAA,AAAA,AAAA,AAAAsI,AAAMD,AAAMQ,AAAMC,AAAIC,AAAMC;AAA5B,AAAA,AAAAT,AAAAD;AAAA,AAAAjI,AAAAkI,AAAA,AAAA,AAAqC9H;AAArC,AACE,AAAMwG,AAAS,AAACC,AAAazG;AAA7B,AACE,AAAYwG,AACA,AAAG8B,AAAM,AAACvH,AACVwH;;AACZ,AAAS/B,AACA,AAACjF,AAAS,AAAA,AAAI6G,AACd,AAACzC,AAAS,AAAA,AAAIyC;;AACvB,AAAS5B,AACA,AAACjF,AAAS,AAAA,AAAI8G,AACd,AAAC1C,AAAS,AAAA,AAAI0C;;AACvB,AAAA,AAAY7B;;;AAXhB,AAAA,AAAA,AAAMoB;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAA5H,AAAA2H;AAAAA,AAAA,AAAA7B,AAAA6B;AAAAE,AAAA,AAAA7H,AAAA2H;AAAAA,AAAA,AAAA7B,AAAA6B;AAAAG,AAAA,AAAA9H,AAAA2H;AAAAA,AAAA,AAAA7B,AAAA6B;AAAAI,AAAA,AAAA/H,AAAA2H;AAAAA,AAAA,AAAA7B,AAAA6B;AAAA,AAAA,AAAA1B,AAAA;AAAA,AAAA,AAAAA,AAAA2B,AAAAC,AAAAC,AAAAC,AAAAJ;;;AAAA,AAaA,AAAA,AAAA,AAAA5I,AAAMqJ;AAAN,AAAA,AAAApJ,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAjJ;;;AAAA,AAAA,AAAA,AAAA,AAAAkJ,AAAMD,AAAM7G,AAAEG,AAAIwE,AAAKiC;AAAvB,AAAA,AAAAG,AAAAD;AAAA,AAAA7I,AAAA8I,AAAA,AAAA,AAAgC1I;AAAhC,AACE,AAAM,AAAA,AAAA,AAAAE,AAAgBjB;AAAtB,AACE,AAAM+J,AAAO,AAACpG,AAAMjB;AACdsH,AAAE,AAAAC,AAAY,AAAKvH,AACL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC8F,AAAqB0B,AAENZ;AAC9Ba,AAAM,AAAA,AAAG9C,AAAK,AAACpF,AACN,AAAAC,AAAKkI;AAALjI,AACK,AAAGkI,AACAN;AAFR,AAAA,AAAA7H,AAAAC,AAAAD,AAAAC;;AANf,AASE,AAAM,AAAK6H,AACL,AAAG,AAAG,AAAC1H,AAAS,AAAA,AAAIO,AACd,AAAGsH,AAAMG,AACZ,AAAA,AAAA,AAAG,AAASN,AAAGG;;AACxB,AAAM,AAAKH,AACL,AAAG,AAAG,AAACtD,AAAS,AAAA,AAAI7D,AACd,AAAGsH,AAAMI,AACZ,AAAA,AAAA,AAAG,AAAUP,AAAGG;;AACzB,AAAM,AAAK,AAASH,AAAIG;;AACxB,AAAM,AAAK,AAASH,AAAIG;;AACxB,AAAA,AAAM,AAAcH;;AACpB,AAAW,AAAChJ,AAAI,AAAA,AAAA,AAAAC,AAASjB,AACT,AAAAkB,AAAIH;AAAJ,AAAA,AAAAG;AAAAA;;AAAU,AAACC,AAAMC;;AACtB4I;;AAvBf;;;;AADF,AAAA,AAAA,AAAMT;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAxI,AAAAuI;AAAAA,AAAA,AAAAzC,AAAAyC;AAAAE,AAAA,AAAAzI,AAAAuI;AAAAA,AAAA,AAAAzC,AAAAyC;AAAAG,AAAA,AAAA1I,AAAAuI;AAAAA,AAAA,AAAAzC,AAAAyC;AAAAI,AAAA,AAAA3I,AAAAuI;AAAAA,AAAA,AAAAzC,AAAAyC;AAAA,AAAA,AAAAtC,AAAA;AAAA,AAAA,AAAAA,AAAAuC,AAAAC,AAAAC,AAAAC,AAAAJ;;;AAAA,AA0BA,AAAA,AAAMc,AAAgB5H;AAAtB,AACE,AAAI,AAAA,AAAaA;AACf,AAACa,AAAK,AAACgH,AAAOD,AACA,AAAA,AAAa5H,AACrB,AAAA,AAAC8H,AAAO9H;;AACd,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAMpB;;;AAEV,AAAA,AAAM+H;AAAN,AACE,AAACC,AAAiBC,AACA,AAACzI;;AAErB,AAAA,AAAM0I,AAAejI,AAAIkI,AAAKnI;AAA9B,AACMA,AACA,AAAA,AAAA,AAAAoI,AAACnJ,AACD,AAACA,AACD,AAACA,AACD,AAACA;AAHD,AAAY,AAAGkJ,AAAK,AAAAC,AAAK,AAAA,AAAInI;AAC7B,AAAA,AAAAoI;AAAA,AAAY,AAAGF,AAAK,AAAAE,AAAK,AAAA,AAAIpI;AAC7B,AAAgB,AAACqI,AAAQC,AAAEJ,AAC3B,AAAA,AAAAK;AAAA,AACS,AAAAA;AAAA,AACE,AAAAA,AAACxF,AAAK,AAACsF,AAAQJ,AAAcjI,AAAIkI;;AADnC;;;;AAIf,AAAA,AAAA,AAAA7K,AAAMmL;AAAN,AAAA,AAAAlL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkL,AAAA,AAAA,AAAA,AAAA/K;;;AAAA,AAAA,AAAA,AAAA,AAAAgL,AAAMD,AAAezI;AAArB,AAAA,AAAA2I,AAAAD;AAAA,AAAA3K,AAAA4K,AAAA,AAAA,AAA+BxK;AAA/B,AACE,AAAM2K,AAAO9I;AACP8C,AAAO,AAAA,AAAS9C;AADtB,AAEE,AAAM,AAAA,AAACqC,AAAE,AAAA,AAAOrC;AAAhB,AACE,AAAC+I,AAAO/I,AACAgJ,AACA7K;;AACR,AAAC4K,AAAO,AAAA,AAAC9J,AAAOe,AACQ,AAACsI,AAAQC,AACA,AAAA,AAAKxF,AAC9BkG,AACA9K;;AARV;;AASA,AAAM,AAAA,AAACkE,AAAE,AAAA,AAAOrC;AAAhB,AACE,AAACkJ,AAAQ,AAAA,AAAAC,AAACnG;AAAD,AAAO,AAACK,AAAgByF,AACA,AAAAK,AAAC7F,AACiB,AAAGR,AACAsG;AACvC,AAAA,AAACC,AACa,AAAA,AAAG9H,AACvByH,AACA7K;;AACT,AAAC+K,AAAQ,AAAA,AAAAI,AAACtG;AAAD,AAAO,AAACK,AAAgByF,AACA,AAAAQ,AAAChG,AACiB,AAAA,AAAGR,AACAsG,AACA,AAAA,AAAKrG;AAC5C,AAAA,AAACsG,AACa,AAAA,AAAG9H,AACvB0H,AACA9K;;AAjBX;;AAkBA,AAAM,AAAA,AAACkE,AAAE,AAAA,AAAOrC;AAAhB,AACE,AAAC+I,AAAO/I,AACAgJ,AACA7K;;AACR,AAACoL,AAAK,AAAA,AAAQvJ,AACRA,AACA,AAAA,AAASA,AACTwJ,AACArL;;AARR;;;;AA9BJ,AAAA,AAAA,AAAMsK;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAtK,AAAAqK;AAAAA,AAAA,AAAAvE,AAAAuE;AAAA,AAAA,AAAApE,AAAA;AAAA,AAAA,AAAAA,AAAAqE,AAAAD;;;AAAA,AAwCA,AAAA,AAAMa,AAAWC;AAAjB,AACE,AAAAC,AAAyB,AAAC5B;AAA1B,AAAAhK,AAAA4L,AAAA,AAAA,AAAOC;AAAP,AAAA7L,AAAA4L,AAAA,AAAA,AAAeE;AAAf,AACE,AAAA,AAAA,AAAG,AAAG,AAAA,AAAID,AAAS,AAAA,AAAIC,AACpBC,AACAC,AACA,AAAGL,AAAM,AAAA,AAAA,AAAKK,AAAyBC;;AAE9C,AAAA,AAAMC;AAAN,AACE,AAAG,AAACR,AAAU,AAAA,AAAK,AAAC1I,AAAM,AAAA,AAAA,AAAA1C,AAAYjB,AACnC2M;;AAEL,AAAA,AAAMG;AAAN,AACE,AAAAC,AAAwB,AAACpC;AAAzB,AAAAhK,AAAAoM,AAAA,AAAA,AAAOP;AAAP,AAAA7L,AAAAoM,AAAA,AAAA,AAAeN;AACTO,AAAM,AAAA9K,AAAA;AAAAC,AAAO,AAAA,AAAIqK;AAAX,AAAA,AAAAtK,AAAAC,AAAAD,AAAAC;;AACN8K,AAAM,AAAA/K,AAAK,AAAG,AAAA,AAAIuK,AACJ,AAAA,AAAID;AADZrK,AAEK,AAAC0K;AAFN,AAAA,AAAA3K,AAAAC,AAAAD,AAAAC;;AAGN+K,AAAQ,AAAGD,AAAMD;AACjBtH,AAAO,AAAAxD,AAAK,AAAA,AAAIuK;AAATtK,AAAmB+K;AAAnB,AAAA,AAAAhL,AAAAC,AAAAD,AAAAC;;AANb,AAOE,AAAA,AAAC2I,AAAcqC,AAEA,AAAA,AAAA,AAACrC,AAAkB,AAAG,AAAGoC,AACA,AAAA,AAAIT,AACP/G,AACPA,AACA,AAACoF,AAAc,AAAA,AAAA,AAAA7J,AAAcjB,AACd,AAAA,AAAA,AAAAiB,AAAejB,AACf,AAACqG;;AAElD,AAAA,AAAM+G,AAAed;AAArB,AACE,AAAAe,AAAA;AAAAC,AACK,AAAMjG,AAAK,AAAC1D,AAAM,AAAA,AAAQ,AAAChD,AAAI,AAAA,AAAA,AAAAM,AAAYjB,AAAgBsM;AAA3D,AACE,AAAA,AAAA,AAAA,AAAG,AAAA,AAAKjF,AAELsF,AACAY;;AALV,AAAA,AAAAF,AAAAC,AAAAD,AAAAC;;AAOF,AAAKE,AAAqB,AAAA,AAAA,AAAKb,AAAyBY;AAExD,AAAA,AAAME,AAAgBC,AAAYC;AAAlC,AAAA,AAAA,AAAA,AAAA,AACM,AAAG,AAAA,AAAO,AAAA,AAAK,AAACP,AAAcM,AAC3B,AAAGC,AAAYH,AAClB,AAACnB,AAAUqB,AACN,AAAA,AAAGf,AACAY,AACA,AAAA,AAAKK;;AAEnB,AAAA,AAAMC;AAAN,AACE,AAAAC,AAAyB,AAACnD;AAA1B,AAAAhK,AAAAmN,AAAA,AAAA,AAAOtB;AAAP,AAAA7L,AAAAmN,AAAA,AAAA,AAAerB;AAAfsB,AAAA,AAAA9M,AACsCjB;AADtC+N,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/K,AAAA,AAAA+K,AAAA,AAAA,AAAA,AAAA,AAAA9K,AAAAC,AAAA6K,AAAAA;AAAA,AAAA/M,AAAA+M,AAAA,AACcC;AADd,AAAAhN,AAAA+M,AAAA,AACoBE;AADpB,AAEE,AAAM,AAAI,AAAA,AAAID,AACJ,AAAG,AAAA,AAAG,AAAA,AAAIvB,AACJ,AAAA,AAAID,AACJ,AAAG,AAAA,AAAIwB,AAAO,AAAA,AAAIxB,AACrB0B;AAJb;;AAAA,AAOM,AAAI,AAAA,AAAIF,AACJ,AAAG,AAAA,AAAG,AAAA,AAAIvB,AACJ,AAAA,AAAID,AACJ,AAAG,AAAA,AAAK,AAAA,AAAIwB,AAAQ,AAAA,AAAIxB,AAC3ByB;AAXb;;AAAA,AAcM,AAACE,AAAO,AAAKC,AAAeC;AAApB,AACE,AAAAnN,AAAIkN;AAAJ,AAAA,AAAAlN;AAAAA;;AAAA,AACI,AAAA,AAAA,AAAA,AAAA,AAAC4B,AAAoB,AAAA,AAAO,AAAA,AAAK,AAACsK,AAAciB,AAC3B,AAAChC,AAAUgC,AACN1B,AACTqB,AACjB,AAAA,AAAA,AAAA,AAAA,AAAClL,AAAoB,AAAA,AAAO,AAAA,AAAK,AAACsK,AAAciB,AAC3B,AAAChC,AAAUgC,AACN1B,AACTqB,AACjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACM,AAAmB,AAAA,AAAO,AAAA,AAAK,AAAClB,AAAciB,AAC3B,AAAG,AAAChC,AAAUgC,AAAe1B,AAC7B,AAACS,AAAciB,AAAkB,AAAA,AAAK1B,AAC3CqB;;AAb7B,AAeQ,AAACtK,AAAM,AAACC,AAAM,AAAA,AAAA,AAAA1C,AAAYjB;AA7BxC;;AAAA,AAAA;;;;;;AAkCJ,AAAA,AAAA,AAAAE,AAAMqO;AAAN,AAAA,AAAApO,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoO,AAAA,AAAA,AAAA,AAAAjO;;;AAAA,AAAA,AAAA,AAAA,AAAAkO,AAAMD,AAAmB3L;AAAzB,AAAA,AAAA6L,AAAAD;AAAA,AAAA7N,AAAA8N,AAAA,AAAA,AAAmC1N;AAAnC,AACE,AAAA6N,AAAA,AAAA9N,AAAkB,AAAC0J,AAAe5H;AAAlCiM,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQxL;AAAR,AAAA,AACE,AAAC8L,AAAc9L,AAAUxC;;AAD3B;AAAA,AAAA6N;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAAlO,AAAA8N;AAAA,AAAA,AAAAI;AAAA,AAAA,AAAAJ,AAAAI;AAAA,AAAA,AAAA,AAAAC,AAAAL;AAAA,AAAAM,AAAA,AAAAC,AAAAP;AAAA,AAAA,AAAA,AAAAQ,AAAAR;AAAAM;AAAA,AAAAvL,AAAAuL;AAAA;;;;;;;AAAA,AAAA,AAAA/N,AAAAyN,AAAQrL;AAAR,AAAA,AACE,AAAC8L,AAAc9L,AAAUxC;;AAD3B;AAAA,AAAA,AAAAkG,AAAA2H;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;;AADF,AAAA,AAAA,AAAML;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAxN,AAAAuN;AAAAA,AAAA,AAAAzH,AAAAyH;AAAA,AAAA,AAAAtH,AAAA;AAAA,AAAA,AAAAA,AAAAuH,AAAAD;;;AAAA,AAIA,AAAA,AAAMY;AAAN,AACE,AAAG,AAAA,AAAY,AAAA,AAAA,AAAArO,AAASjB,AAAiBuP;;AAE3C,AAAA,AAAMC;AAAN,AACE,AAAMG,AAAY,AAAA,AAAA,AAAA1O,AAASjB;AAA3ByP,AAC+DE;AAD/DF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzM,AAAA,AAAAyM,AAAA,AAAA,AAAA,AAAA,AAAAxM,AAAAC,AAAAuM,AAAAA;AAAA,AAAAzO,AAAAyO,AAAA,AACcG;AADd,AAAA5O,AAAAyO,AAAA,AACoBI;AADpB,AAAA7O,AAAAyO,AAAA,AAC8BK;AAD9B,AAAA9O,AAAAyO,AAAA,AACwCM;AADxCL,AAE0DK;AAF1D,AAAApP,AAAA+O,AAAA,AAAA,AAEOM;AAFP,AAAArP,AAAA+O,AAAA,AAAA,AAEgCO;AAFhC,AAGE,AAAML;AAAN,AACE,AAAM,AAAA,AAAC3K,AAAE6K;AACH,AAACI,AAAe,AAAA,AAAA,AAAAjP,AAAQjB,AACR,AAACmQ,AAAI,AAAA,AAAA,AAACC,AAAYP;;AAFxC,AAIM,AAAA,AAAC5K,AAAE6K;AACH,AAACO,AAAK,AAAA,AAAA,AAAApP,AAAgBjB;;AAL5B,AAOM+P;AACA,AAACpP,AAAI,AAAA,AACC,AAACA,AAAI,AAAA,AAAA,AAAAM,AAAYjB,AACZgQ,AACNC;;AAXX;;;;;AADF;;;AAcJ,AAAA,AAAAK,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvN,AAAA,AAAAuN,AAAA,AAAA,AAAA,AAAA,AAAAtN,AAAAC,AAAAqN,AAAAA;AAAA,AAAAvP,AAAAuP,AAAA,AAAyChO;AAAzC,AAAAvB,AAAAuP,AAAA,AAA2C5J;AAA3C,AACE,AAAA8J,AAAA,AAAAxP,AAA0BjB;AAA1ByQ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzN,AAAA,AAAAyN,AAAA,AAAA,AAAA,AAAA,AAAAxN,AAAAC,AAAAuN,AAAAA;AAAA,AAAAzP,AAAAyP,AAAA,AAAcC;AACRC,AAAc,AAAChN,AAAM+M;AACrBhD,AAAY,AAAA,AAAAkD,AAACvN;AAAD,AAAO,AAAM,AAAG,AAAG,AAAAuN,AAACvE,AAAaM,AAA0BhG;AAApD,AAAAiK;;AAAA;;AAED,AAAClN,AAAMiN;AACzBtH,AAAM,AAAC+D,AAAcM;AACrBmD,AAAS,AAAGtO,AACA,AAAG,AAAA,AAAO,AAAA,AAAK8G,AACZsD;AACfmE,AAAW,AAAA,AAAG,AAAGD,AACArD;AAEjBG,AAAY,AAAA,AAAI,AAAA,AAAMmD,AAER,AAAA,AAAKA;AAdzB,AAAA,AAeGpD,AAAYC;;AAEjB,AAAA,AAAMoD,AAAkBC,AAAMC;AAA9B,AACE,AAAAC,AAAyB,AAACvG;AAA1B,AAAAhK,AAAAuQ,AAAA,AAAA,AAAO1E;AAAP,AAAA7L,AAAAuQ,AAAA,AAAA,AAAezE;AACT0E,AAAW,AAACtD;AACZuD,AAAuB,AAAC5B;AAF9B,AAGE,AAAC5I,AAAK4F,AAAQC,AAASZ;;AACvB,AAAAwF,AAAA,AAAApQ,AAAuBjB;AAAvBqR,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArO,AAAA,AAAAqO,AAAA,AAAA,AAAA,AAAA,AAAApO,AAAAC,AAAAmO,AAAAA;AAAA,AAAArQ,AAAAqQ,AAAA,AAAcrD;AACRsD,AAAU,AAAChC;AADjB,AAEE,AAACf,AAAkB,AAACzB;;AACpB,AAAM,AAAA,AAAKwE,AAAU,AAAC9B;AAAtB,AACE,AAAA,AAAC7D,AAAO,AAAA,AAACjK,AAAMsM,AACQuD,AACfC;;AAHV;;AAKA,AAAMC,AAAY,AAAC9O,AAAe,AAACmK,AACD,AAAA,AAAA,AAAA7L,AAASjB;AACrC0R,AAAe,AAAC9N,AAAyB,AAACkJ,AACD,AAAA,AAAA,AAAA7L,AAASjB;AAClD2R,AAAS,AAAK,AAAC1M,AAAE,AAACtB,AAAM8N,AAAa,AAAC9N,AAAM+N,AAC9B,AAAA,AAACzM,AAAW,AAAA,AAAO,AAACiL,AAAe,AAAA,AAAA,AAAAjP,AAAQjB,AACR,AAACmQ,AAAI,AAAA,AAAA,AAACC,AAAYsB;AANzE,AAOE,AAAM,AAAAE,AAAKH;AAAL,AAAA,AAAAG;AAAA,AAAiB,AAAKN,AAAWK;;AAAjCC;;;AAAN,AACE,AAACnK,AAAO,AAACpD,AAAc,AAACyI,AAAsB2E,AACtCD;;AAFV;;AAGA,AAAM,AAAAI,AAAKH;AAAL,AAAA,AAAAG;AAAiBR;;AAAjBQ;;;AAAN,AACE,AAAMrO,AAAU,AAACc,AAAc,AAACyI,AAAsB2E;AAAtD,AACE,AAAMH;AAAN,AACE,AAAMO,AAAc,AAAA,AAAStO;AACvBmC,AAAO,AAAGoM,AACA,AAAA,AAAS,AAAC3Q,AAAM,AAAA,AAAaoC;AACvCwO,AAAY,AAACpO,AAAM,AAAA,AAAaJ;AAChCuC,AAAM,AAAG,AAAG,AAAA,AAAG,AAAG,AAAA,AAAG,AAACuK,AAAKqB,AACTK,AAEN3N;AACZ4N,AAAc,AAAC/L,AAAgB1C,AACA,AAAC2C,AAAiB,AAACC,AAAiBL,AAClB,AAAG+L,AACA,AAAGI,AACAvM;AAZ7D,AAaE,AAAM,AAAA,AAACT,AAAEkM;AAAT,AACE,AAAA,AAACe,AAAKlE,AACAgE,AACAG,AACAX;;AAEN,AAAMY,AAAe,AAAC1N,AAAY,AAAC8K,AACD,AAAA,AAAA,AAAC9N,AAAM4E;AADzC,AAEE,AAAIqL;AACF,AAAA,AAACU,AAAkB,AAACvH,AAAc,AAAC5E,AAAiB3C,AACA,AAAA,AAAG,AAAA,AAASA,AAC9B,AAAA,AAASA,AACT6O;;AAElC,AAAI,AAAA,AAACnN,AAAI,AAACtB,AAAM,AAAA,AAAW,AAACuM,AAAe,AAAA,AAAA,AAAAjP,AAAQjB,AACR,AAACmQ,AAAI,AAAA,AAAA,AAACC,AAAYqB;AAC3D,AAAA,AAACY,AAAkB,AAACvH,AAAc,AAAC5E,AAAiB3C,AACA,AAAA,AAAG,AAAGuO,AACA,AAAA,AAASvO,AACjC,AAAGuO,AACA,AAAA,AAASvO,AACZ6O;;AAElC,AAAA,AAACC,AAAkB,AAACvH,AAAc,AAAC5E,AAAiB8L,AACA,AAAA,AAAGtM,AACrBA,AACA0M;;;;AA1B1C;;AAdJ;;AAFJ;;AA4CF,AAAA,AAAA,AAACtG,AAAS,AAAA,AAAA,AAAA,AAAA,AAAC7F,AAAgBuG,AAAiB,AAAA,AAAIC,AACtC,AAAA,AAAA,AAAA,AAACxG,AAAgBuG,AAAY0B,AAA+B,AAAA,AAAIzB,AAChE,AAAA,AAAA,AAAA,AAAA,AAACxG,AAAgBuG,AAAiB,AAAG,AAAA,AAAIC,AAAUyB,AACpD,AAAI,AAAA,AAACjJ,AAAEkM,AACLK,AACA5F;;AAEX,AAAA,AAAA,AAACE,AAAS,AAAA,AAAA,AAAA,AAAA,AAAC7F,AAAgBuG,AAAiB,AAAA,AAAIC,AACtC,AAAA,AAAA,AAAA,AAACxG,AAAgBuG,AAAY,AAAG,AAAA,AAAK8F,AACLpE,AACH,AAAA,AAAIzB,AACjC,AAAA,AAAA,AAAA,AAAA,AAACxG,AAAgBuG,AACY,AAAG,AAAA,AAAIC,AACJ,AAAG,AAAA,AAAK6F,AACLpE,AACpCrC;;AAET,AAAMoC,AAAe,AAAA,AAAA,AAAAhN,AAAkBjB;AAAvC,AACE,AAAA,AAAA,AAAC8L,AAAS,AAAA,AAAA,AAAA,AAAC7F,AAAgBuG,AAAY,AAAA,AAAIC,AAAa,AAAA,AAAIA,AAClD,AAAA,AAAA,AAAA,AAACxG,AAAgBuG,AAAY,AAAG,AAAA,AAAIC,AAAUwB,AAAmB,AAAA,AAAIxB,AACrE,AAAA,AAAA,AAAA,AAACxG,AAAgBuG,AAAY,AAAA,AAAIC,AAAa,AAAG,AAAA,AAAIA,AAAUwB,AAChE,AAAI,AAAA,AAAChJ,AAAEkM,AACLK,AACA5F;;AAEX,AAAA,AAAA,AAACE,AAAS,AAAC7F,AAAgBuG,AAAQC,AACzB,AAAA,AAAA,AAAA,AAACxG,AAAgBuG,AAAY,AAAG,AAAA,AAAIC,AACJ,AAAG,AAAA,AAAK8F,AACLtE,AACN,AAAA,AAAIxB,AACjC,AAAA,AAAA,AAAA,AAACxG,AAAgBuG,AAAY,AAAA,AAAIC,AACJ,AAAG,AAAA,AAAIA,AACJ,AAAG,AAAA,AAAK8F,AACLtE,AACpCpC;;AAET,AAAM2G,AAAe,AAACnC,AAAK,AAAA,AAAA,AAAApP,AAAgBjB;AAA3C,AACE,AAAMwS;AAAN,AACE,AAAM9P,AAAE,AAAG,AAAA,AAAK6P,AACL,AAAA,AAAA,AAAAtR,AAAkBjB;AACvB0F,AAAO,AAAGhD,AAAE,AAAA,AAAG,AAAA,AAAC+P;AAFtB,AAGE,AAAA,AAACJ,AAAkB,AAAC3N,AAAY8N,AACA,AAAA,AAAC9Q,AAAM,AAACqC,AAAqB,AAACkC,AAAgBuG,AAAQC,AACzB,AAACvG,AAAiBiH,AAAUzH,AAC1C,AAAGA,AACAgN;;AARtD;;AAUJ,AAAAC,AAAA,AAAA7R,AAAsB,AAAC4C,AAAM,AAACC,AAAM,AAAA,AAAA,AAAA1C,AAAYjB;AAAhD4S,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQzE;AAAR,AAAA,AACE,AAAA0E,AAAsB,AAACpS,AAAI,AAAA,AAAA,AAAAM,AAAYjB,AAAgBqO;AAAvD0E,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/P,AAAA,AAAA+P,AAAA,AAAA,AAAA,AAAA,AAAA9P,AAAAC,AAAA6P,AAAAA;AAAA,AAAA/R,AAAA+R,AAAA,AAAcE;AAAd,AACE,AAAAC,AAAA,AAAApS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAC+C8K,AACQ,AAAA,AAAKgC,AACb/B;AAH/CsH,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtQ,AAAA,AAAAsQ,AAAA,AAAA,AAAA,AAAA,AAAArQ,AAAAC,AAAAoQ,AAAAA;AAAA,AAAAtS,AAAAsS,AAAA,AAAgBhK;AAAhB,AAAAtI,AAAAsS,AAAA,AAAsBQ;AAAtB,AAAA,AAIE,AAAAC,AAAA,AAAAjT,AAAA,AAAA,AAAA;AAAAkT,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQa;AAAR,AAAA,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACpJ,AAAW,AAAA,AAAO,AAAA,AAAK,AAAGoJ,AAAK,AAAC3H,AAAciB,AACnC,AAAChC,AAAUgC,AACN,AAAG1B,AAAyBmH,AACrCxK;;AAJV;AAAA,AAAAyK;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAlF,AAAA,AAAAlO,AAAAiT;AAAA,AAAA,AAAA/E;AAAA,AAAA,AAAA+E,AAAA/E;AAAA,AAAA,AAAA,AAAAC,AAAA8E;AAAA,AAAA7E,AAAA,AAAAC,AAAA4E;AAAA,AAAA,AAAA,AAAA3E,AAAA2E;AAAA7E;AAAA,AAAAvL,AAAAuL;AAAA;;;;;;;AAAA,AAAA,AAAA/N,AAAA4S,AAAQgB;AAAR,AAAA,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACpJ,AAAW,AAAA,AAAO,AAAA,AAAK,AAAGoJ,AAAK,AAAC3H,AAAciB,AACnC,AAAChC,AAAUgC,AACN,AAAG1B,AAAyBmH,AACrCxK;;AAJV;AAAA,AAAA,AAAArC,AAAA8M;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAMA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACiB,AAAS,AAAA,AAAO,AAAA,AAAK,AAAC5H,AAAciB,AAC3B,AAAG,AAAChC,AAAUgC,AAAe,AAAG1B,AAAyBmH,AACzD,AAAC1G,AAAciB,AACf,AAAA,AAAK,AAAG1B,AAAyBmH,AACrCxK;;AAdR;AAAA,AAAA4J;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAArE,AAAA,AAAAlO,AAAAoS;AAAA,AAAA,AAAAlE;AAAA,AAAA,AAAAkE,AAAAlE;AAAA,AAAA,AAAA,AAAAC,AAAAiE;AAAA,AAAAhE,AAAA,AAAAC,AAAA+D;AAAA,AAAA,AAAA,AAAA9D,AAAA8D;AAAAhE;AAAA,AAAAvL,AAAAuL;AAAA;;;;;;;AAAA,AAAAqE,AAAA,AAAApS,AAAA+R;AAAAK,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvQ,AAAA,AAAAuQ,AAAA,AAAA,AAAA,AAAA,AAAAtQ,AAAAC,AAAAqQ,AAAAA;AAAA,AAAAvS,AAAAuS,AAAA,AAAgBjK;AAAhB,AAAAtI,AAAAuS,AAAA,AAAsBO;AAAtB,AAAA,AAIE,AAAAK,AAAA,AAAArT,AAAA,AAAA,AAAA;AAAAsT,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQS;AAAR,AAAA,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACpJ,AAAW,AAAA,AAAO,AAAA,AAAK,AAAGoJ,AAAK,AAAC3H,AAAciB,AACnC,AAAChC,AAAUgC,AACN,AAAG1B,AAAyBmH,AACrCxK;;AAJV;AAAA,AAAA6K;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAtF,AAAA,AAAAlO,AAAAqT;AAAA,AAAA,AAAAnF;AAAA,AAAA,AAAAmF,AAAAnF;AAAA,AAAA,AAAA,AAAAC,AAAAkF;AAAA,AAAAjF,AAAA,AAAAC,AAAAgF;AAAA,AAAA,AAAA,AAAA/E,AAAA+E;AAAAjF;AAAA,AAAAvL,AAAAuL;AAAA;;;;;;;AAAA,AAAA,AAAA/N,AAAAgT,AAAQY;AAAR,AAAA,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACpJ,AAAW,AAAA,AAAO,AAAA,AAAK,AAAGoJ,AAAK,AAAC3H,AAAciB,AACnC,AAAChC,AAAUgC,AACN,AAAG1B,AAAyBmH,AACrCxK;;AAJV;AAAA,AAAA,AAAArC,AAAAkN;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAMA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACa,AAAS,AAAA,AAAO,AAAA,AAAK,AAAC5H,AAAciB,AAC3B,AAAG,AAAChC,AAAUgC,AAAe,AAAG1B,AAAyBmH,AACzD,AAAC1G,AAAciB,AACf,AAAA,AAAK,AAAG1B,AAAyBmH,AACrCxK;;AAdR;AAAA,AAAA,AAAArC,AAAAiM;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAgBA,AAAA+B,AAAA,AAAAnU,AAAU,AAAC4C,AAAM,AAACC,AAAMsP;AAAxBiC,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQ9R;AAAR,AAAA,AACE,AAAMqB,AAAK,AAAChE,AAAIsS,AAAM3P;AAChBmS,AAAe,AAAChI,AAAeY,AAAc/K;AADnD,AAEE,AAAM,AAACR,AAAgB2S,AAAezH;AAAtC,AACE,AAACrC,AAAO,AAAA,AAAA,AAAC9J,AAAO4T;AAARC;AAAA,AACiB,AAAAA,AAAKnI;;AAD9B,AAEQiE;;AAHV;;AAKA,AAAA,AAACa,AAAkB,AAAC3N,AAAYC,AACA8Q;;AATpC;AAAA,AAAAR;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAApG,AAAA,AAAAlO,AAAAmU;AAAA,AAAA,AAAAjG;AAAA,AAAA,AAAAiG,AAAAjG;AAAA,AAAA,AAAA,AAAAC,AAAAgG;AAAA,AAAA/F,AAAA,AAAAC,AAAA8F;AAAA,AAAA,AAAA,AAAA7F,AAAA6F;AAAA/F;AAAA,AAAAvL,AAAAuL;AAAA;;;;;;;AAAA,AAAA,AAAA/N,AAAA8T,AAAQ3R;AAAR,AAAA,AACE,AAAMqB,AAAK,AAAChE,AAAIsS,AAAM3P;AAChBmS,AAAe,AAAChI,AAAeY,AAAc/K;AADnD,AAEE,AAAM,AAACR,AAAgB2S,AAAezH;AAAtC,AACE,AAACrC,AAAO,AAAA,AAAA,AAAC9J,AAAO4T;AAARC;AAAA,AACiB,AAAAA,AAAKnI;;AAD9B,AAEQiE;;AAHV;;AAKA,AAAA,AAACa,AAAkB,AAAC3N,AAAYC,AACA8Q;;AATpC;AAAA,AAAA,AAAAxO,AAAAgO;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAlBJ;AAAA,AAAAtC;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA9D,AAAA,AAAAlO,AAAA6R;AAAA,AAAA,AAAA3D;AAAA,AAAA,AAAA2D,AAAA3D;AAAA,AAAA,AAAA,AAAAC,AAAA0D;AAAA,AAAAzD,AAAA,AAAAC,AAAAwD;AAAA,AAAA,AAAA,AAAAvD,AAAAuD;AAAAzD;AAAA,AAAAvL,AAAAuL;AAAA;;;;;;;AAAA,AAAA,AAAA/N,AAAAwR,AAAQtE;AAAR,AAAA,AACE,AAAA2E,AAAsB,AAACrS,AAAI,AAAA,AAAA,AAAAM,AAAYjB,AAAgBqO;AAAvD2E,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhQ,AAAA,AAAAgQ,AAAA,AAAA,AAAA,AAAA,AAAA/P,AAAAC,AAAA8P,AAAAA;AAAA,AAAAhS,AAAAgS,AAAA,AAAcC;AAAd,AACE,AAAAO,AAAA,AAAA1S,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAC+C8K,AACQ,AAAA,AAAKgC,AACb/B;AAH/C4H,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5Q,AAAA,AAAA4Q,AAAA,AAAA,AAAA,AAAA,AAAA3Q,AAAAC,AAAA0Q,AAAAA;AAAA,AAAA5S,AAAA4S,AAAA,AAAgBtK;AAAhB,AAAAtI,AAAA4S,AAAA,AAAsBE;AAAtB,AAAA,AAIE,AAAAS,AAAA,AAAAzT,AAAA,AAAA,AAAA;AAAA0T,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQK;AAAR,AAAA,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACpJ,AAAW,AAAA,AAAO,AAAA,AAAK,AAAGoJ,AAAK,AAAC3H,AAAciB,AACnC,AAAChC,AAAUgC,AACN,AAAG1B,AAAyBmH,AACrCxK;;AAJV;AAAA,AAAAiL;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA1F,AAAA,AAAAlO,AAAAyT;AAAA,AAAA,AAAAvF;AAAA,AAAA,AAAAuF,AAAAvF;AAAA,AAAA,AAAA,AAAAC,AAAAsF;AAAA,AAAArF,AAAA,AAAAC,AAAAoF;AAAA,AAAA,AAAA,AAAAnF,AAAAmF;AAAArF;AAAA,AAAAvL,AAAAuL;AAAA;;;;;;;AAAA,AAAA,AAAA/N,AAAAoT,AAAQQ;AAAR,AAAA,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACpJ,AAAW,AAAA,AAAO,AAAA,AAAK,AAAGoJ,AAAK,AAAC3H,AAAciB,AACnC,AAAChC,AAAUgC,AACN,AAAG1B,AAAyBmH,AACrCxK;;AAJV;AAAA,AAAA,AAAArC,AAAAsN;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAMA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACS,AAAS,AAAA,AAAO,AAAA,AAAK,AAAC5H,AAAciB,AAC3B,AAAG,AAAChC,AAAUgC,AAAe,AAAG1B,AAAyBmH,AACzD,AAAC1G,AAAciB,AACf,AAAA,AAAK,AAAG1B,AAAyBmH,AACrCxK;;AAdR;AAAA,AAAAkK;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA3E,AAAA,AAAAlO,AAAA0S;AAAA,AAAA,AAAAxE;AAAA,AAAA,AAAAwE,AAAAxE;AAAA,AAAA,AAAA,AAAAC,AAAAuE;AAAA,AAAAtE,AAAA,AAAAC,AAAAqE;AAAA,AAAA,AAAA,AAAApE,AAAAoE;AAAAtE;AAAA,AAAAvL,AAAAuL;AAAA;;;;;;;AAAA,AAAA2E,AAAA,AAAA1S,AAAAqS;AAAAK,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7Q,AAAA,AAAA6Q,AAAA,AAAA,AAAA,AAAA,AAAA5Q,AAAAC,AAAA2Q,AAAAA;AAAA,AAAA7S,AAAA6S,AAAA,AAAgBvK;AAAhB,AAAAtI,AAAA6S,AAAA,AAAsBC;AAAtB,AAAA,AAIE,AAAAa,AAAA,AAAA7T,AAAA,AAAA,AAAA;AAAA8T,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQC;AAAR,AAAA,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACpJ,AAAW,AAAA,AAAO,AAAA,AAAK,AAAGoJ,AAAK,AAAC3H,AAAciB,AACnC,AAAChC,AAAUgC,AACN,AAAG1B,AAAyBmH,AACrCxK;;AAJV;AAAA,AAAAqL;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA9F,AAAA,AAAAlO,AAAA6T;AAAA,AAAA,AAAA3F;AAAA,AAAA,AAAA2F,AAAA3F;AAAA,AAAA,AAAA,AAAAC,AAAA0F;AAAA,AAAAzF,AAAA,AAAAC,AAAAwF;AAAA,AAAA,AAAA,AAAAvF,AAAAuF;AAAAzF;AAAA,AAAAvL,AAAAuL;AAAA;;;;;;;AAAA,AAAA,AAAA/N,AAAAwT,AAAQI;AAAR,AAAA,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACpJ,AAAW,AAAA,AAAO,AAAA,AAAK,AAAGoJ,AAAK,AAAC3H,AAAciB,AACnC,AAAChC,AAAUgC,AACN,AAAG1B,AAAyBmH,AACrCxK;;AAJV;AAAA,AAAA,AAAArC,AAAA0N;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAMA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACK,AAAS,AAAA,AAAO,AAAA,AAAK,AAAC5H,AAAciB,AAC3B,AAAG,AAAChC,AAAUgC,AAAe,AAAG1B,AAAyBmH,AACzD,AAAC1G,AAAciB,AACf,AAAA,AAAK,AAAG1B,AAAyBmH,AACrCxK;;AAdR;AAAA,AAAA,AAAArC,AAAAuM;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAgBA,AAAA6B,AAAA,AAAAvU,AAAU,AAAC4C,AAAM,AAACC,AAAMsP;AAAxBqC,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQlS;AAAR,AAAA,AACE,AAAMqB,AAAK,AAAChE,AAAIsS,AAAM3P;AAChBmS,AAAe,AAAChI,AAAeY,AAAc/K;AADnD,AAEE,AAAM,AAACR,AAAgB2S,AAAezH;AAAtC,AACE,AAACrC,AAAO,AAAA,AAAA,AAAC9J,AAAO4T;AAARC;AAAA,AACiB,AAAAA,AAAKnI;;AAD9B,AAEQiE;;AAHV;;AAKA,AAAA,AAACa,AAAkB,AAAC3N,AAAYC,AACA8Q;;AATpC;AAAA,AAAAJ;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAxG,AAAA,AAAAlO,AAAAuU;AAAA,AAAA,AAAArG;AAAA,AAAA,AAAAqG,AAAArG;AAAA,AAAA,AAAA,AAAAC,AAAAoG;AAAA,AAAAnG,AAAA,AAAAC,AAAAkG;AAAA,AAAA,AAAA,AAAAjG,AAAAiG;AAAAnG;AAAA,AAAAvL,AAAAuL;AAAA;;;;;;;AAAA,AAAA,AAAA/N,AAAAkU,AAAQ/R;AAAR,AAAA,AACE,AAAMqB,AAAK,AAAChE,AAAIsS,AAAM3P;AAChBmS,AAAe,AAAChI,AAAeY,AAAc/K;AADnD,AAEE,AAAM,AAACR,AAAgB2S,AAAezH;AAAtC,AACE,AAACrC,AAAO,AAAA,AAAA,AAAC9J,AAAO4T;AAARC;AAAA,AACiB,AAAAA,AAAKnI;;AAD9B,AAEQiE;;AAHV;;AAKA,AAAA,AAACa,AAAkB,AAAC3N,AAAYC,AACA8Q;;AATpC;AAAA,AAAA,AAAAxO,AAAAoO;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAlBJ;AAAA,AAAA,AAAApO,AAAA0L;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AA6BA,AAAM,AAAA,AAAK,AAAA,AAAC1N,AAAEkM,AAAqBC;AAAnC,AACE,AAAMuE,AAAkB,AAACnF,AAA0BxC;AAC7C4H,AAAY,AAAC3S,AAAMwK,AAAekI;AADxC,AAEE,AAACtD,AAAkB,AAAC3N,AAAY0M,AACIwE,AACA,AAAA,AAAA,AAAAC,AAAChU,AACD,AAACA,AACD,AAACA;AAFD,AAAY,AAAAgU,AAAK,AAAA,AAAOrI;AACxB,AAAA,AAAAsI;AAAA,AAAY,AAAAA,AAAK,AAAA,AAAA,AAAOtI,AAAqBuI;AAC7C,AAAA,AAAAC;AAAA,AAAiB,AAAAA,AAAKC;AAJ1D;;AAHJ;;;AAUN,AAAA,AAAMC;AAAN,AACE,AAAMC,AAAQ,AAAW,AAAY,AAAA,AAAA,AAAAlV,AAAOjB;AACtCoW,AAAQ,AAAC5N,AAAQ,AAAU,AAAS,AAAA,AAACxH,AAAI,AAACqV,AAAQF;AAClD5T,AAAE,AAAK6T;AACPzP,AAAE,AAAKyP;AACP/M,AAAM,AAACvH;AACPwU,AAAO,AAACtU;AACRqF,AAAK,AAACpF;AANZ,AAAA,AAAA,AAAA,AAOM,AAAG,AAAGM,AAAE,AAAA,AAAO,AAAG8G,AAAMhC,AAAQA,AAChC,AAAG,AAAGV,AAAE,AAAA,AAAO,AAAG2P,AAAOjP,AAAQA;;AAEzC,AAAA,AAAMkP,AAAiBC,AAAUvF;AAAjC,AACE,AAACwF,AAAM,AAAA,AAAY,AAAA,AAAA,AAAAxV,AAASjB,AAAiB,AAACwP;;AAC9C,AAAMmH,AAAI,AAAA,AAAA,AAAA1V,AAAOjB;AACX4W,AAAM,AAAA,AAAG,AAAa,AAAUD;AADtCD,AAE0B,AAACI,AAAuB,AAAA,AAAA,AAAA7V,AAAoBjB;AAFtE0W,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1T,AAAA,AAAA0T,AAAA,AAAA,AAAA,AAAA,AAAAzT,AAAAC,AAAAwT,AAAAA;AAAA,AAAA1V,AAAA0V,AAAA,AAEcG;AAFd,AAAA7V,AAAA0V,AAAA,AAEmB3L;AAFnB,AAGE,AAAA,AAAA,AAAAgM,AAACpV;AAAD,AACe,AAAAoV,AAACC,AAAkB,AAACzQ,AAED,AAAC0Q,AAASJ,AACAD;;;AAC5C,AAAA,AAAA,AAAAM,AAACvV;AAAD,AACe,AAACsV,AAASE,AACA,AAACC,AAAQ,AAACC,AAAS,AAAC7Q,AACX,AAAA0Q,AAACG,AACD,AAACJ,AAASlM,AACA6L;;;AAC5C,AAAA,AAACjV,AACa,AAAK0F;AAAL,AACE,AAAMiQ,AAAE,AAACL,AAASM,AAA0BX;AAA5C,AACE,AAAG,AAAGU,AAAEjQ,AACL,AAAG,AAAA,AAAKiQ,AACL,AAAI,AAAA,AAACrS,AAAE,AAAC4I,AACN2J,AACAC;;;AAC1B,AAACpV;;AACD,AAAAqV,AAAA,AAAA5W,AAAcM;AAAduW,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQ9W;AAAR,AAAA,AACE,AAAQ,AAACyG,AAAazG;;AADxB;AAAA,AAAA2W;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA7I,AAAA,AAAAlO,AAAA4W;AAAA,AAAA,AAAA1I;AAAA,AAAA,AAAA0I,AAAA1I;AAAA,AAAA,AAAA,AAAAC,AAAAyI;AAAA,AAAAxI,AAAA,AAAAC,AAAAuI;AAAA,AAAA,AAAA,AAAAtI,AAAAsI;AAAAxI;AAAA,AAAAvL,AAAAuL;AAAA;;;;;;;AAAA,AAAA,AAAA/N,AAAAuW,AAAQ3W;AAAR,AAAA,AACE,AAAQ,AAACyG,AAAazG;;AADxB;AAAA,AAAA,AAAAkG,AAAAyQ;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAEA,AAAMI,AAAM,AAASnB;AACfoB,AAAM,AAAA,AAAA,AAAA9W,AAASjB;AADrB,AAEE,AAAM+X;AAAN,AACE,AAAAC,AAAA,AAAAlX,AAAuB,AAACuX,AAAKN;AAA7BE,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQC;AAAR,AAAA,AACE,AAAcN,AAAMM;;AACpB,AAAUA,AAAe,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC5P;;AAF5B;AAAA,AAAAwP;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAnJ,AAAA,AAAAlO,AAAAkX;AAAA,AAAA,AAAAhJ;AAAA,AAAA,AAAAgJ,AAAAhJ;AAAA,AAAA,AAAA,AAAAC,AAAA+I;AAAA,AAAA9I,AAAA,AAAAC,AAAA6I;AAAA,AAAA,AAAA,AAAA5I,AAAA4I;AAAA9I;AAAA,AAAAvL,AAAAuL;AAAA;;;;;;;AAAA,AAAA,AAAA/N,AAAA6W,AAAQI;AAAR,AAAA,AACE,AAAcN,AAAMM;;AACpB,AAAUA,AAAe,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC5P;;AAF5B;AAAA,AAAA,AAAAvB,AAAA+Q;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;;AAIA,AAAAM,AAAA,AAAAxX,AAAkB,AAAC8E,AAAKiT,AAAOzX,AAAoB,AAACsC;AAApD6U,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAA9X,AAAA+X,AAAA,AAAA,AAAS3X;AAAT,AAAAJ,AAAA+X,AAAA,AAAA,AAAeE;AAAf,AAAA,AACE,AAAME,AAAU,AAAAC;AAAhB,AACE,AAAA,AAAA,AAACpX;AAADqX;AAAA,AACe,AAAAA,AAACtX,AAAQX,AAAM+X;;;;AAC9B,AAAM,AAAUA,AAAW,AAAA,AAAOF;;AAClC,AAAWd,AAAMgB;;AALrB;AAAA,AAAAR;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAzJ,AAAA,AAAAlO,AAAAwX;AAAA,AAAA,AAAAtJ;AAAA,AAAA,AAAAsJ,AAAAtJ;AAAA,AAAA,AAAA,AAAAC,AAAAqJ;AAAA,AAAApJ,AAAA,AAAAC,AAAAmJ;AAAA,AAAA,AAAA,AAAAlJ,AAAAkJ;AAAApJ;AAAA,AAAAvL,AAAAuL;AAAA;;;;;;;AAAA,AAAAyJ,AAAA,AAAAxX,AAAAmX;AAAA,AAAA3X,AAAAgY,AAAA,AAAA,AAAS5X;AAAT,AAAAJ,AAAAgY,AAAA,AAAA,AAAeC;AAAf,AAAA,AACE,AAAME,AAAU,AAAAC;AAAhB,AACE,AAAA,AAAA,AAACpX;AAADqX;AAAA,AACe,AAAAA,AAACtX,AAAQX,AAAM+X;;;;AAC9B,AAAM,AAAUA,AAAW,AAAA,AAAOF;;AAClC,AAAWd,AAAMgB;;AALrB;AAAA,AAAA,AAAA7R,AAAAqR;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAMF,AAACvH,AAAiByF,AAAUvF;;AAEhC,AAAA,AAAMgI,AAAiBC;AAAvB,AACE,AAAA,AAAA,AAAAC,AAACxX;AAAD,AAA6B,AAAAwX,AAAC1V,AAAO,AAACtC,AAAM,AAAA,AAAW,AAACiY,AAAe,AAAKF;;;AAE9E,AAAA,AAAMG,AAAkBC;AAAxB,AACE,AAAMC,AAAW,AAAU,AAAQD;AAC7B/W,AAAE,AAAKgX;AACP5S,AAAE,AAAK4S;AACPlQ,AAAM,AAACvH;AACPwU,AAAO,AAACtU;AACRqF,AAAK,AAACpF;AALZ,AAAA,AAAA,AAMMuX,AAAgB,AAAG,AAAGjX,AAAE,AAAA,AAAO,AAAG8G,AAAMhC,AAAQA,AAChC,AAAG,AAAGV,AAAE,AAAA,AAAO,AAAG2P,AAAOjP,AAAQA;AAPvD,AAQE,AAAA,AAAC1F,AACa,AAAKqP;AAAL,AACE,AAAMlN,AAAK,AAACC,AAAqBiN,AACAwI;AADjC,AAEE,AAAA,AAAC9X,AAAM,AAAC+X,AAAMzI,AAAMwI,AACF,AAAA,AAAA,AAAM,AAAA,AAAQxI,AACZ,AAAG,AAAC0I,AAAqB5V,AACtB,AAAA,AAAYkN;;;AAEzD,AAAA,AAAM2I,AAAeL;AAArB,AACE,AAACD,AAAiBC;;AAClB,AAAAM,AAAA,AAAA3Y,AAAgCjB;AAAhC4Z,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5W,AAAA,AAAA4W,AAAA,AAAA,AAAA,AAAA,AAAA3W,AAAAC,AAAA0W,AAAAA;AAAA,AAAA5Y,AAAA4Y,AAAA,AAAclJ;AAAd,AAAA1P,AAAA4Y,AAAA,AAAuB5L;AACjBpL,AAAO,AAACkK;AACR2E,AAAY,AAAC9O,AAAeC,AAAOoL;AACnC6L,AAAK,AAAChM;AACNiM,AAAqB,AAAA,AAAM,AAAA,AAAC7U,AAAE4U,AACP,AAAA,AAAAE,AAAC1W;AAAD,AAAO,AAAM,AAACP,AAAgB,AAAAiX,AAAC9W,AAAMwK,AAAkBO;AAAhD,AAAA+L;;AAAA;;AAED,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAjL,AAAA,AAAAlO,AAAAmZ;AAAA,AAAA,AAAAjL;AAAA,AAAA,AAAAmL,AAAAnL;AAAA,AAAA,AAAA,AAAA7N,AAAAgZ,AAAM7W;AAAN,AAAA,AAAA8W,AAAA;AAAAC;AAAA,AAAA,AAAAH,AAAA,AAAA;;AAAA,AAAA,AAAAG,AAAAA;;AAAA,AAAA,AAAArL,AAAA,AAAAlO,AAAAuZ;AAAA,AAAA,AAAArL;AAAA,AAAA,AAAAqL,AAAArL;AAAA,AAAA,AAAA,AAAAC,AAAAoL;AAAA,AAAAC,AA21Dc,AAAAnL,AAAAkL;AA31DdE,AAAA,AAAA5W,AAAA2W;AAAAE,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAH;AAAA,AAAA,AAAAI,AAAAL,AAAAI,AACMS;AADN,AAAA,AAAA,AAAAP,AAAAJ,AAAA,AAEGlX,AAAE6X;;AAFL,AAAA,AAAAT,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAA3L,AAAAiL;;AAAA,AAAAQ,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAArZ,AAAAkZ,AACMc;AADN,AAAA,AAAAH,AAAA,AAAA,AAAAD,AAAA,AAAAtW,AAAA4V,AAEG/W,AAAE6X;;;AAFL;;;;;AAAA,AAAA;;;AAAAF,AAAA,AAAAna,AAAA,AAAAsZ,AACS,AAAC1W,AAAM,AAACC,AAAM,AAAA,AAAQ,AAAChD,AAAI+P,AAASpN;AAD7C,AAAA,AAAA2X;AAAA,AAAA7K,AAAA6K,AAAA,AAAAC,AAAA,AAAAzW,AAAAwV;;AAAA,AAAA,AAAAxV,AAAAwV;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAD,AAAQ,AAACtW,AAAM,AAACC,AAAM+M;AAH9B;AAJ3B,AAUE,AAAA,AAAC/O,AACa,AAAKqP;AAAL,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACtP,AAAMsP,AAEWS,AACAoI,AACWC;;;AAEjD,AAAA,AAAMsB,AAAa9B;AAAnB,AACE,AAACD,AAAiBC;;AAClB,AAAM3J,AAAY,AAAA,AAAA,AAAA1O,AAASjB;AACrB4C,AAAO,AAACkK;AACR2E,AAAY,AAAC9O,AAAeC,AAAO+M;AAFzC0L,AAGoC1L;AAHpC0L,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArY,AAAA,AAAAqY,AAAA,AAAA,AAAA,AAAA,AAAApY,AAAAC,AAAAmY,AAAAA;AAAA,AAAAra,AAAAqa,AAAA,AAGcvL;AAHd,AAAA9O,AAAAqa,AAAA,AAGwBxL;AAHxB,AAIE,AAAM,AAACP;AAAP,AACE,AAAAgM,AAAM,AAACzN;AAAPyN,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAEE,AAAM5J,AAAe,AAAC9N,AAAyBhB,AAAO+M;AAChDyB,AAAuB,AAAC5B;AAD9B,AAEE,AAAM4B;AAAN,AACE,AAAA,AAACzP,AACa,AAAKgD;AAAL,AACE,AAAI,AAACM,AAAE,AAACtB,AAAM8N,AAAa,AAAC9N,AAAM+N;AAChC,AAAI,AAAA,AAACzM,AAAW,AAAA,AAAO,AAACiL,AAAevL,AAAK,AAACwL,AAAI,AAAA,AAAA,AAACC,AAAYsB;AAC5D,AAAC8J,AAAmB7W,AACA,AAACwL,AAAI,AAAA,AAAA,AAACC,AAAYqB,AAClBL;;AACpB,AAACqK,AAAkB9W,AACA,AAACwL,AAAI,AAAA,AAAA,AAAA,AAAA,AAACC,AAAYsB,AAClBN;;;AACrB,AAACqK,AAAkB9W,AACA,AAACwL,AAAI,AAAA,AAAA,AAACC,AAAYsB,AAClBN;;;;AAbvC;;;AAJJ;AAoBE,AAAAsK,AAAM5L;AAAN4L,AAAA,AAAA,AAAAA,AAAAH,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAAA;AAAA;AAEE,AAAM7L;AAAN,AACE,AAAA,AAAA,AAAA8L,AAACha;AAAD,AACe,AAAAga,AAACC,AAAoB,AAACzL,AAAI,AAAA,AAAA,AAACC,AAAYP;;;AAFxD;;;AAFF;AAOE,AAAAgM,AAAgC,AAAA,AAAuBlM;AAAvD,AAAAhP,AAAAkb,AAAA,AAAA,AAAOnO;AAAP,AAAA/M,AAAAkb,AAAA,AAAA,AAAmBlO;AAAnB,AACE,AAAA,AAAChM,AACa,AAAK+O;AAAL,AACE,AAAA,AAAA,AAAA,AAAAoL,AAACC,AAAUrL,AACChD;AADZ,AAEY,AAAAoO,AAACE,AAAqBrO;;;;;;AAZtD;;;;AApBF;AAqCE,AAAMkC;AAAN,AACE,AAAMoM,AAAU,AAAC/L,AAAe,AAAA,AAAA,AAAAjP,AAAQjB,AACR,AAACmQ,AAAI,AAAA,AAAA,AAACC,AAAYP;AADlD,AAEE,AAACqM,AAAoB,AAACC,AAAeF,AAChBhD;;AAJzB;;;AArCF;AA4CE,AAAM7H,AAAuB,AAAC5B;AAA9B,AACE,AAAM4B;AAAN,AACE,AAAAgL,AAAgC,AAAC5L,AAA0Bb;AAA3D,AAAAhP,AAAAyb,AAAA,AAAA,AAAO1O;AAAP,AAAA/M,AAAAyb,AAAA,AAAA,AAAmBzO;AAAnB,AACE,AAAA,AAAChM,AACa,AAAK+O;AAAL,AACE,AAAA,AAAA,AAAA,AAAA2L,AAACN,AAAUrL,AACChD;AADZ,AAEY,AAAA2O,AAACC,AACmB,AAAA,AAAK3O,AACLyD;;;;AARpD;;;;AA7CJ;;;AADF;;AAyDA,AAAM,AAAK,AAAA,AAACnM,AAAE,AAAA,AAAY0K,AACf,AAAK,AAACL;AADjB,AAEE,AAAA,AAACjO,AACU,AAAA,AAAYsO;;AAHzB;;AAIA,AAAA,AAAChO,AACa,AAAKqP;AAAL,AACE,AAAA,AAAA,AAAA,AAAA,AAACtP,AAAMsP;;;AAGvB,AAAA,AAAC3P,AAA4B,AAAG,AAACsC,AAAM8N,AACP,AAAC9N,AAAM,AAAA,AAAA,AAAA1C,AAAwBjB;;AAEnE,AAAA,AAAMuc,AAAMC;AAAZ,AACE,AAAM7F,AAAI,AAAA,AAACtV,AACU,AAAAob,AAAmB,AAAA,AAAA,AAAA,AAACjU;AACnCsP,AAAM,AAASnB;AAFrB,AAGE,AAAA,AAAM,AAAoBmB;;AAC1B,AAAA,AAAA,AAACzW;;AACD,AAAAqb,AAAA,AAAA5b,AAAkB,AAAC8E,AAAKiT,AAAOzX,AAAoB,AAACsC;AAApDiZ,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAAlc,AAAAmc,AAAA,AAAA,AAAS/b;AAAT,AAAAJ,AAAAmc,AAAA,AAAA,AAAelE;AAAf,AAAA,AACE,AAAA,AAAA,AAACjX;AAADqb;AAAA,AACe,AAAMzV,AAAS,AAAA0V;AAAf,AACE,AAAM,AAAU1V,AAAUqR;;AAC1B,AAAWd,AAAMvQ;;AACjB,AAAAyV,AAACtb,AAAQX,AAAMwG;;;;AALlC;AAAA,AAAAmV;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA7N,AAAA,AAAAlO,AAAA4b;AAAA,AAAA,AAAA1N;AAAA,AAAA,AAAA0N,AAAA1N;AAAA,AAAA,AAAA,AAAAC,AAAAyN;AAAA,AAAAxN,AAAA,AAAAC,AAAAuN;AAAA,AAAA,AAAA,AAAAtN,AAAAsN;AAAAxN;AAAA,AAAAvL,AAAAuL;AAAA;;;;;;;AAAA,AAAA6N,AAAA,AAAA5b,AAAAub;AAAA,AAAA/b,AAAAoc,AAAA,AAAA,AAAShc;AAAT,AAAAJ,AAAAoc,AAAA,AAAA,AAAenE;AAAf,AAAA,AACE,AAAA,AAAA,AAACjX;AAADqb;AAAA,AACe,AAAMzV,AAAS,AAAA0V;AAAf,AACE,AAAM,AAAU1V,AAAUqR;;AAC1B,AAAWd,AAAMvQ;;AACjB,AAAAyV,AAACtb,AAAQX,AAAMwG;;;;AALlC;AAAA,AAAA,AAAAN,AAAAyV;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAMA,AAACQ,AAA6B,AAAQvG;;AACtC,AAACtU;;AACD,AAAM,AAAUsU,AAAK6F;;AACrB,AAAMW,AAAY,AAAA,AAACnc,AAAI,AAACqV,AAAQ,AAAW,AAAY,AAAA,AAAA,AAAApV,AAAOjB;AAA9D,AACE,AAAA,AAAKmd,AAA0BxD;;AAC/B,AAAA,AAAKwD,AAAwB/B;;AAC7B,AAAA,AAAK+B,AAA0B9D;;AACjC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAChY;;AACD,AAAA,AAAA,AAACA;;AACD,AAAA,AAACA,AAA0BoW;;AAC3B,AAAA,AAACpW,AAAgB,AAAC+X,AAAegE;;AACjC,AAAA,AAAA,AAAC/b;;AACD,AAAA,AAACA,AAAoBgc;;AACrB,AAAMC,AAAK,AAAAC,AAAmBrT;AAA9B,AACE,AAAO,AAAOoT,AACP;AAAA,AACE,AAAA,AAAA,AAACjc;;AACD,AAAA,AAACoV","names":["js/ellah","js/ellah.graphics","js/ellah.graphics.graphics-state","ellah.graphics/graphics-state","cljs.core.atom","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","ellah.graphics/get-graphics","p__91019","vec__91020","cljs.core.nth","seq91018","self__4724__auto__","cljs.core/seq","layer","cljs.core.get","cljs.core/deref","or__4126__auto__","cljs.core/first","ellah.constants/ui-layers","ellah.graphics/set-attr!","key","value","p1__91023#","cljs.core.swap_BANG_","cljs.core.assoc","ellah.graphics/update-attr!","p1__91024#","cljs.core.update","ellah.graphics/app-width","js/window","ellah.graphics/app-height","ellah.graphics/app-size","x__4217__auto__","y__4218__auto__","ellah.graphics/app-aspect-ratio","ellah.graphics/resize","ellah.graphics/screen-x","x","w","h","s","ellah.graphics/layout-path-at","layout","pos","ellah.geometry/in-circle?","map__91025","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","sublayouts","cljs.core/empty?","cljs.core/some","i","sublayout","sub-path","cljs.core.conj","cljs.core.range","cljs.core/count","ellah.graphics/layout-insertion-path-at","map__91027","diff","ellah.geometry/subtract-points","cljs.core/List","cljs.core/mod","ellah.geometry/point-angle","ellah.geometry/PI","ellah.geometry/TAU","ellah.graphics/get-sublayout","path","G__91029","G__91030","cljs.core/rest","ellah.graphics/form-layout","form","starting-layout","map__91031","current-layout","type","children","cljs.core._EQ_","subform-count","G__91033","G__91034","ellah.constants/sole-subform-shrink-factor","raw-radius","Math/sin","Math/PI","unscaled-radius","radius","ellah.constants/bubble-thickness","cljs.core.mapv","subform","angle","G__91035","G__91036","ellah.geometry.add_points","ellah.geometry/scale-point","ellah.geometry/angle-point","ellah.constants/subform-shrink-factor","ellah.graphics/current-form-layout","ellah.geometry/origin","ellah.graphics/ideal-camera-pos","ellah.graphics/ideal-camera-zoom","ellah.constants/base-zoom","ellah.graphics/screen-y","y","ellah.graphics/rect","p__91041","vec__91042","seq91037","G__91038","cljs.core/next","G__91039","G__91040","self__4723__auto__","size","fill","graphics","ellah.graphics.get_graphics","ellah.graphics/circle","p__91048","p__91049","map__91050","vec__91051","seq91045","G__91046","G__91047","ellah.graphics/polygon","p__91059","vec__91060","seq91056","G__91057","G__91058","points","cljs.core/clj->js","p1__91055#","js/module$node_modules$pixi_DOT_js$dist$cjs$pixi.Point","ellah.graphics/line","p__91068","vec__91069","seq91063","G__91064","G__91065","G__91066","G__91067","start","end","width","color","ellah.graphics/text","p__91077","vec__91078","seq91072","G__91073","G__91074","G__91075","G__91076","length","t","js/module$node_modules$pixi_DOT_js$dist$cjs$pixi.Text","ellah.constants/font-name","scale","ellah.constants/text-max-size","ellah.constants/text-scale-factor","ellah.constants/text-x-offset","ellah.constants/text-y-offset","ellah.graphics/flatten-layout","cljs.core.mapcat","cljs.core.dissoc","ellah.graphics/app-rect","ellah.geometry/rect-around","ellah.geometry/unit-square","ellah.graphics/adjust-layout","zoom","p1__91081#","p1__91082#","cljs.core.partial","cljs.core/*","p1__91083#","ellah.graphics/render-layout","p__91088","vec__91089","seq91086","G__91087","center","ellah.graphics.circle","ellah.constants/foreground-color","ellah.constants/background-color","ellah.graphics.polygon","p1__91084#","ellah.constants/vector-size-factor","ellah.geometry.polygon","p1__91085#","ellah.graphics.text","ellah.constants/text-color","ellah.graphics/formbar-y","index","vec__91092","app-pos","app-size","ellah.constants/formbar-pos","ellah.constants/formbar-radius","ellah.constants/formbar-spacing","ellah.graphics/formbar-zone-top","ellah.graphics/adjusted-form-layout","vec__91095","min-y","max-y","y-space","ellah.geometry/unit","ellah.graphics/formbar-width","x__4214__auto__","y__4215__auto__","ellah.constants/formbar-form-size","ellah.graphics/formbar-form-spacing","ellah.graphics/formbar-circle","outer-index","inner-index","ellah.constants/formbar-outline-thickness","ellah.graphics/get-mouse-zone","vec__91098","map__91101","mouse","eval-zone-size","ellah.constants/discard-zone-size","cljs.core.reduce","previous-true?","formbar-index","ellah.geometry/in-rect?","ellah.graphics/render-sublayouts","p__91105","vec__91106","seq91103","G__91104","seq__91109","chunk__91110","count__91111","i__91112","temp__5753__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","ellah.graphics.render_layout","ellah.graphics/mouse-dragging?","ellah.constants/min-drag-dist","ellah.graphics/placement-form","map__91113","vec__91114","mouse-state","down?","down-path","down-zone","down-formbar-indeces","down-formbar-outer-index","down-formbar-inner-index","ellah.vedn/get-child","cljs.core/vec","cljs.core.concat","cljs.core/last","p__91119","map__91120","ellah.graphics/formbar-insertion-indeces","map__91122","formbars","formbar-count","p1__91118#","x-offset","adjusted-x","ellah.graphics/render-app-state","state","control-state","vec__91128","mouse-zone","current-placement-form","map__91131","dragging?","ellah.constants/drag-cursor-radius","ellah.constants/highlight-color","layout-path","insertion-path","literal?","and__4115__auto__","parent-radius","ellah.constants/drop-form-radius-factor","child-count","placement-pos","ellah.constants/drop-form-offset-factor","ellah.graphics.line","ellah.constants/drag-cursor-line-width","base-sublayout","ellah.graphics.render_sublayouts","ellah.constants/discard-zone-bar-thickness","ellah.constants/eval-zone-bar-thickness","last-eval-form","Math/sqrt","ellah.constants/eval-zone-form-radius-factor","seq__91133","chunk__91134","count__91135","i__91136","map__91205","map__91239","forms","seq__91207","chunk__91208","count__91209","i__91210","map__91223","map__91229","seq__91241","chunk__91242","count__91243","i__91244","map__91257","map__91263","radius-factor","seq__91225","chunk__91226","count__91227","i__91228","seq__91231","chunk__91232","count__91233","i__91234","seq__91259","chunk__91260","count__91261","i__91262","seq__91265","chunk__91266","count__91267","i__91268","side","ellah.graphics.rect","seq__91235","chunk__91236","count__91237","i__91238","seq__91269","chunk__91270","count__91271","i__91272","current-circle","p1__91124#","insertion-indeces","base-circle","p1__91125#","p1__91126#","ellah.constants/formbar-placement-offset","p1__91127#","ellah.constants/formbar-placement-size","ellah.graphics/get-mouse-pos","plugins","raw-pos","cljs.core.js__GT_clj","height","ellah.graphics/update-graphics","app-state","ellah.util.log","map__91276","app","delta","move","ellah.constants/camera-speed","p1__91273#","ellah.geometry/tween-points","Math/pow","p1__91274#","Math/E","ellah.util/tween","Math/log","p","ellah.constants/eval-zone-speed","ellah.constants/eval-zone-max-size","ellah.constants/eval-zone-min-size","seq__91278","chunk__91279","count__91280","i__91281","stage","texts","seq__91282","chunk__91283","count__91284","i__91285","text-container","cljs.core/vals","seq__91286","chunk__91287","count__91288","i__91289","vec__91296","vec__91299","z","cljs.core/vector","container","js/module$node_modules$pixi_DOT_js$dist$cjs$pixi.Container","p1__91275#","ellah.graphics/log-eval-result","result","p1__91302#","ellah.vedn/clj->vedn","ellah.graphics/update-mouse-pos","event","screen-pos","current-pos","cljs.core.merge","ellah.geometry/point-magnitude","ellah.graphics/on-click-down","map__91304","zone","formbar-zone-indeces","p1__91303#","iter__4529__auto__","s__91307","cljs.core/LazySeq","xs__6308__auto__","iterys__4525__auto__","s__91309","c__4527__auto__","size__4528__auto__","b__91311","cljs.core/chunk-buffer","i__91310","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__91308","cljs.core/cons","fs__4526__auto__","iter__91306","i2","ellah.graphics/on-click-up","map__91315","G__91317","cljs.core/Keyword","ellah.vedn/replace-child","ellah.vedn/insert-child","G__91318","p1__91312#","ellah.vedn/remove-child","vec__91319","p1__91313#","cljs.core.update_in","ellah.vedn/vector-remove","down-form","ellah.evaluation.eval_clj","ellah.vedn/vedn->clj","vec__91322","p1__91314#","ellah.vedn/vector-insert","ellah.graphics/init","update-fn","js/module$node_modules$pixi_DOT_js$dist$cjs$pixi.Application","seq__91326","chunk__91327","count__91328","i__91329","vec__91336","vec__91339","p1__91325#","js/module$node_modules$pixi_DOT_js$dist$cjs$pixi.Graphics","js/document.body.appendChild","interaction","ellah.vedn/test-str","ellah.constants/formbar-defaults","font","js/module$node_modules$fontfaceobserver$fontfaceobserver_standalone"],"sourcesContent":["(ns ellah.graphics\n  (:require [\"pixi.js\" :as pixi]\n            [\"fontfaceobserver\" :as FaceFontObserver]\n            [ellah.util :as u]\n            [ellah.geometry :as geom]\n            [ellah.constants :as constants]\n            [ellah.vedn :as vedn]\n            [ellah.evaluation :as evaluation]))\n\n(defonce graphics-state (atom {}))\n\n(defn get-graphics [& [layer]]\n  (get (:graphics @graphics-state)\n       (or layer (first constants/ui-layers))))\n\n(defn set-attr! [key value]\n  (swap! graphics-state\n         #(assoc % key value))\n  value)\n\n(defn update-attr! [key value]\n  (swap! graphics-state\n         #(update % key value)))\n\n(defn app-width [] (.-innerWidth js/window))\n(defn app-height [] (.-innerHeight js/window))\n(defn app-size [] (min (app-width) (app-height)))\n(defn app-aspect-ratio [] (/ (app-width) (app-height)))\n\n(defn resize []\n  (.resize (.-renderer (:app @graphics-state)) (app-width) (app-height)))\n\n(defn screen-x [x]\n  (let [w (app-width)\n        h (app-height)\n        s (min w h)]\n    (+ (* 0.5 (- w s)) (* x s))))\n\n(defn layout-path-at [layout pos]\n  (when (geom/in-circle? layout pos)\n    (let [{:keys [sublayouts]} layout]\n      (if (empty? sublayouts)\n        '()\n        (or (some (fn [i]\n                    (let [sublayout (nth sublayouts i)\n                          sub-path (layout-path-at sublayout pos)]\n                      (when sub-path\n                        (conj sub-path i))))\n                  (range (count sublayouts)))\n            '())))))\n\n(defn layout-insertion-path-at [layout pos]\n  (when (geom/in-circle? layout pos)\n    (let [{:keys [sublayouts]} layout]\n      (if (empty? sublayouts)\n        '()\n        (or (some (fn [i]\n                    (let [sublayout (nth sublayouts i)\n                          sub-path (layout-insertion-path-at sublayout pos)]\n                      (when sub-path\n                        (conj sub-path i))))\n                  (range (count sublayouts)))\n            (let [diff (geom/subtract-points pos layout)]\n              (list (int (/ (* (count sublayouts)\n                               (mod (+ (geom/point-angle diff) geom/PI)\n                                    geom/TAU))\n                            geom/TAU)))))))))\n\n(defn get-sublayout [layout path]\n  (if (empty? path)\n    layout\n    (get-sublayout (nth (:sublayouts layout)\n                        (first path))\n                   (rest path))))\n\n(defn form-layout [form starting-layout]\n  (let [current-layout starting-layout\n        {:keys [type value children]} form]\n    (if (= type :literal)\n      (assoc current-layout\n             :type type\n             :value value)\n      (assoc current-layout\n             :type type\n             :sublayouts\n             (let [subform-count (count children)]\n               (if (= subform-count 1)\n                 [(form-layout (first children)\n                               (assoc current-layout\n                                      :radius (* constants/sole-subform-shrink-factor (:radius current-layout))))]\n                 (let [raw-radius (Math/sin (/ Math/PI subform-count))\n                       unscaled-radius (/ raw-radius (inc raw-radius))\n                       radius (* unscaled-radius (- 1 constants/bubble-thickness) (:radius current-layout))]\n                   (mapv (fn [subform i]\n                           (let [angle (- (* Math/PI -0.5)\n                                          (/ (* Math/PI 2 i) subform-count))]\n                             (form-layout subform\n                                          (assoc (geom/add-points current-layout\n                                                                  (geom/scale-point (geom/angle-point angle)\n                                                                                    (- (* (:radius current-layout)\n                                                                                          (- 1 constants/bubble-thickness))\n                                                                                       radius)))\n                                                 :radius (* constants/subform-shrink-factor radius)))))\n                         children\n                         (range)))))))))\n\n(defn current-form-layout []\n  (form-layout (first (:children (:form @graphics-state)))\n               (assoc geom/origin\n                      :radius 1)))\n\n(defn ideal-camera-pos []\n  (geom/scale-point (get-sublayout (current-form-layout)\n                                   (:selected-layout-path @graphics-state))\n                    -1))\n\n(defn ideal-camera-zoom []\n  (/ constants/base-zoom\n     (:radius\n      (get-sublayout (current-form-layout)\n                     (:selected-layout-path @graphics-state)))))\n\n(defn screen-y [y]\n  (let [w (app-width)\n        h (app-height)\n        s (min w h)]\n    (+ (* 0.5 (- h s)) (* y s))))\n\n(defn rect [pos size fill & [layer]]\n  (let [graphics (get-graphics layer)]\n    (.beginFill graphics fill)\n    (.drawRect graphics\n               (screen-x (:x pos))\n               (screen-y (:y pos))\n               (* (:x size) (app-size))\n               (* (:y size) (app-size)))\n    (.endFill graphics)))\n\n(defn circle [{:keys [x y radius]} fill & [layer]]\n  (let [graphics (get-graphics layer)]\n    (.beginFill graphics fill)\n    (.drawCircle graphics\n                 (screen-x x)\n                 (screen-y y)\n                 (* radius (app-size)))\n    (.endFill graphics)))\n\n(defn polygon [points fill & [layer]]\n  (let [graphics (get-graphics layer)]\n    (.beginFill graphics fill)\n    (.drawPolygon graphics\n                  (clj->js (mapv #(pixi/Point. (screen-x (:x %))\n                                               (screen-y (:y %)))\n                                 points)))\n    (.endFill graphics)))\n\n(defn line [start end width color & [layer]]\n  (let [graphics (get-graphics layer)]\n    (.lineStyle graphics\n                (* width (app-width))\n                color)\n    (.moveTo graphics\n             (screen-x (:x start))\n             (screen-y (:y start)))\n    (.lineTo graphics\n             (screen-x (:x end))\n             (screen-y (:y end)))\n    (.lineStyle graphics 0)))\n\n(defn text [s pos size color & [layer]]\n  (when (:font-loaded? @graphics-state)\n    (let [length (count s)\n          t (pixi/Text. (str s)\n                        (clj->js {:fontFamily constants/font-name\n                                  :fontSize \"8pt\"\n                                  :fill color}))\n          scale (* size (app-size)\n                   (min constants/text-max-size\n                        (/ constants/text-scale-factor\n                           length)))]\n      (set! (.-x t)\n            (- (+ (screen-x (:x pos))\n                  (* scale constants/text-x-offset))\n               (* (.-width t) scale 0.5)))\n      (set! (.-y t)\n            (- (+ (screen-y (:y pos))\n                  (* scale constants/text-y-offset))\n               (* (.-height t) scale 0.5)))\n      (set! (.-x (.-scale t)) scale)\n      (set! (.-y (.-scale t)) scale)\n      (set! (.-resolution t) 10)\n      (.addChild (get (:texts @graphics-state)\n                      (or layer (first constants/ui-layers)))\n                 t))))\n\n(defn flatten-layout [layout]\n  (if (:sublayouts layout)\n    (conj (mapcat flatten-layout\n                  (:sublayouts layout))\n          (dissoc layout :sublayouts))\n    (list layout)))\n\n(defn app-rect []\n  (geom/rect-around geom/unit-square\n                    (app-aspect-ratio)))\n\n(defn adjust-layout [pos zoom layout]\n  (-> layout\n      (update :x #(* zoom (+ % (:x pos))))\n      (update :y #(* zoom (+ % (:y pos))))\n      (update :radius (partial * zoom))\n      (update :sublayouts\n              #(when %\n                 (mapv (partial adjust-layout pos zoom)\n                       %)))))\n\n(defn render-layout [layout & [layer]]\n  (let [center layout\n        radius (:radius layout)]\n    (when (= (:type layout) :list)\n      (circle layout\n              constants/foreground-color\n              layer)\n      (circle (update layout\n                      :radius (partial *\n                                       (- 1 constants/bubble-thickness)))\n              constants/background-color\n              layer))\n    (when (= (:type layout) :vector)\n      (polygon (mapv #(geom/add-points center\n                                       (geom/scale-point %\n                                                         (* radius\n                                                            constants/vector-size-factor)))\n                     (geom/polygon 8\n                                   (* geom/PI 0.125)))\n               constants/foreground-color\n               layer)\n      (polygon (mapv #(geom/add-points center\n                                       (geom/scale-point %\n                                                         (* radius\n                                                            constants/vector-size-factor\n                                                            (- 1 constants/bubble-thickness))))\n                     (geom/polygon 8\n                                   (* geom/PI 0.125)))\n               constants/background-color\n               layer))\n    (when (= (:type layout) :literal)\n      (circle layout\n              constants/foreground-color\n              layer)\n      (text (:value layout)\n            layout\n            (:radius layout)\n            constants/text-color\n            layer))))\n\n(defn formbar-y [index]\n  (let [[app-pos app-size] (app-rect)]\n    (- (+ (:y app-pos) (:y app-size))\n       constants/formbar-pos\n       constants/formbar-radius\n       (* index (* 2 constants/formbar-radius constants/formbar-spacing)))))\n\n(defn formbar-zone-top []\n  (- (formbar-y (dec (count (:formbars @graphics-state))))\n     constants/formbar-radius))\n\n(defn adjusted-form-layout []\n  (let [[app-pos app-size](app-rect)\n        min-y (min 0 (:y app-pos))\n        max-y (min (+ (:y app-size)\n                      (:y app-pos))\n                   (formbar-zone-top))\n        y-space (- max-y min-y)\n        radius (min (:x app-size) y-space)]\n    (adjust-layout geom/unit\n                   0.5\n                   (adjust-layout {:y (/ (- y-space\n                                            (:y app-size))\n                                         radius)}\n                                  radius\n                                  (adjust-layout (:camera-pos @graphics-state)\n                                                 (:camera-zoom @graphics-state)\n                                                 (current-form-layout))))))\n\n(defn formbar-width [index]\n  (max 0\n       (let [size (count (:forms (nth (:formbars @graphics-state) index)))]\n         (* (dec size)\n            2\n            constants/formbar-radius\n            constants/formbar-form-size))))\n\n(def formbar-form-spacing (* 2 constants/formbar-radius constants/formbar-form-size))\n\n(defn formbar-circle [outer-index inner-index]\n  {:x (+ (* 0.5 (- 1 (formbar-width outer-index)))\n         (* inner-index formbar-form-spacing))\n   :y (formbar-y outer-index)\n   :radius (* constants/formbar-radius\n              constants/formbar-form-size\n              (- 1 constants/formbar-outline-thickness))})\n\n(defn get-mouse-zone []\n  (let [[app-pos app-size] (app-rect)\n        {:keys [mouse eval-zone-size]} @graphics-state]\n    (cond (>= (:y mouse)\n              (- (+ (:y app-size)\n                    (:y app-pos)\n                    (- (:x mouse) (:x app-pos)))\n                 constants/discard-zone-size))\n          :discard\n\n          (>= (:y mouse)\n              (- (+ (:y app-size)\n                    (:y app-pos)\n                    (- (- 1 (:x mouse)) (:x app-pos)))\n                 eval-zone-size))\n          :eval\n\n          (reduce (fn [previous-true? formbar-index]\n                    (or previous-true?\n                        (geom/in-circle? {:x (* 0.5 (- 1 (formbar-width formbar-index)))\n                                          :y (formbar-y formbar-index)\n                                          :radius constants/formbar-radius}\n                                         mouse)\n                        (geom/in-circle? {:x (* 0.5 (+ 1 (formbar-width formbar-index)))\n                                          :y (formbar-y formbar-index)\n                                          :radius constants/formbar-radius}\n                                         mouse)\n                        (geom/in-rect? [{:x (* 0.5 (- 1 (formbar-width formbar-index)))\n                                         :y (- (formbar-y formbar-index) constants/formbar-radius)}\n                                        {:x (formbar-width formbar-index) :y (* 2 constants/formbar-radius)}]\n                                       mouse)))\n                  false\n                  (range (count (:formbars @graphics-state))))\n          :formbar\n\n          :else :program)))\n\n(defn render-sublayouts [layout & [layer]]\n  (doseq [sublayout (flatten-layout layout)]\n    (render-layout sublayout layer)))\n\n(defn mouse-dragging? []\n  (> (:drag-dist (:mouse @graphics-state)) constants/min-drag-dist))\n\n(defn placement-form []\n  (let [mouse-state (:mouse @graphics-state)\n        {:keys [down? down-path down-zone down-formbar-indeces]} mouse-state\n        [down-formbar-outer-index down-formbar-inner-index] down-formbar-indeces]\n    (when down?\n      (cond (= down-zone :program)\n            (vedn/get-child (:form @graphics-state)\n                            (vec (concat '(0) down-path)))\n\n            (= down-zone :eval)\n            (last (:eval-results @graphics-state))\n\n            down-formbar-indeces\n            (nth (:forms\n                  (nth (:formbars @graphics-state)\n                       down-formbar-outer-index))\n                 down-formbar-inner-index)))))\n\n(defn formbar-insertion-indeces [{:keys [x y]}]\n  (let [{:keys [formbars]} @graphics-state\n        formbar-count (count formbars)\n        outer-index (some #(when (< (- (formbar-y %) constants/formbar-radius) y)\n                             %)\n                          (range formbar-count))\n        width (formbar-width outer-index)\n        x-offset (- x\n                    (- (* 0.5 (- 1 width))\n                       constants/formbar-radius))\n        adjusted-x (- (/ x-offset\n                         formbar-form-spacing)\n                      0.5)\n        inner-index (if (neg? adjusted-x)\n                      -1\n                      (int adjusted-x))]\n    [outer-index inner-index]))\n\n(defn render-app-state [state control-state]\n  (let [[app-pos app-size] (app-rect)\n        mouse-zone (get-mouse-zone)\n        current-placement-form (placement-form)]\n    (rect app-pos app-size constants/background-color)\n    (let [{:keys [mouse]} @graphics-state\n          dragging? (mouse-dragging?)]\n      (render-sublayouts (adjusted-form-layout))\n      (when (and dragging? (placement-form))\n        (circle (assoc mouse\n                       :radius constants/drag-cursor-radius)\n                constants/highlight-color\n                :drag))\n      (let [layout-path (layout-path-at (adjusted-form-layout)\n                                        (:mouse @graphics-state))\n            insertion-path (layout-insertion-path-at (adjusted-form-layout)\n                                                     (:mouse @graphics-state))\n            literal? (and (= (count layout-path) (count insertion-path))\n                          (= :literal (:type (vedn/get-child (:form @graphics-state)\n                                                             (vec (concat '(0) insertion-path))))))]\n        (when (and layout-path (not dragging?) literal?)\n          (circle (get-sublayout (adjusted-form-layout) layout-path)\n                  constants/highlight-color))\n        (when (and layout-path current-placement-form)\n          (let [sublayout (get-sublayout (adjusted-form-layout) layout-path)]\n            (when dragging?\n              (let [parent-radius (:radius sublayout)\n                    radius (* constants/drop-form-radius-factor\n                              (:radius (first (:sublayouts sublayout))))\n                    child-count (count (:sublayouts sublayout))\n                    angle (- (* (+ (/ (+ (last insertion-path) 0.5)\n                                      child-count)\n                                   0.25)\n                                geom/TAU))\n                    placement-pos (geom/add-points sublayout\n                                                   (geom/scale-point (geom/angle-point angle)\n                                                                     (- parent-radius\n                                                                        (* constants/drop-form-offset-factor\n                                                                           radius))))]\n                (when (= mouse-zone :program)\n                  (line mouse\n                        placement-pos\n                        constants/drag-cursor-line-width\n                        constants/highlight-color\n                        :drag-forms)\n                  (let [base-sublayout (form-layout (placement-form)\n                                                    (assoc geom/origin :radius 1))]\n                    (if literal?\n                      (render-sublayouts (adjust-layout (geom/scale-point sublayout\n                                                                          (/ (:radius sublayout)))\n                                                        (:radius sublayout)\n                                                        base-sublayout)\n                                         :drag-forms)\n                      (if (= 0 (count (:children (vedn/get-child (:form @graphics-state)\n                                                                 (vec (concat '(0) layout-path))))))\n                        (render-sublayouts (adjust-layout (geom/scale-point sublayout\n                                                                            (/ (* constants/drop-form-radius-factor\n                                                                                  (:radius sublayout))))\n                                                          (* constants/drop-form-radius-factor\n                                                             (:radius sublayout))\n                                                          base-sublayout)\n                                           :drag-forms)\n                        (render-sublayouts (adjust-layout (geom/scale-point placement-pos\n                                                                            (/ radius))\n                                                          radius\n                                                          base-sublayout)\n                                           :drag-forms))))))))))\n      (polygon [(geom/add-points app-pos {:x 0 :y (:y app-size)})\n                (geom/add-points app-pos {:x constants/discard-zone-size :y (:y app-size)})\n                (geom/add-points app-pos {:x 0 :y (- (:y app-size) constants/discard-zone-size)})]\n               (if (= mouse-zone :discard)\n                 constants/highlight-color\n                 constants/foreground-color)\n               :menu)\n      (polygon [(geom/add-points app-pos {:x 0 :y (:y app-size)})\n                (geom/add-points app-pos {:x (* (- 1 constants/discard-zone-bar-thickness)\n                                                constants/discard-zone-size)\n                                          :y (:y app-size)})\n                (geom/add-points app-pos {:x 0\n                                          :y (- (:y app-size)\n                                                (* (- 1 constants/discard-zone-bar-thickness)\n                                                   constants/discard-zone-size))})]\n               constants/background-color\n               :menu)\n      (let [eval-zone-size (:eval-zone-size @graphics-state)]\n        (polygon [(geom/add-points app-pos {:x (:x app-size) :y (:y app-size)})\n                  (geom/add-points app-pos {:x (- (:x app-size) eval-zone-size) :y (:y app-size)})\n                  (geom/add-points app-pos {:x (:x app-size) :y (- (:y app-size) eval-zone-size)})]\n                 (if (= mouse-zone :eval)\n                   constants/highlight-color\n                   constants/foreground-color)\n                 :menu)\n        (polygon [(geom/add-points app-pos app-size)\n                  (geom/add-points app-pos {:x (- (:x app-size)\n                                                  (* (- 1 constants/eval-zone-bar-thickness)\n                                                     eval-zone-size))\n                                            :y (:y app-size)})\n                  (geom/add-points app-pos {:x (:x app-size)\n                                            :y (- (:y app-size)\n                                                  (* (- 1 constants/eval-zone-bar-thickness)\n                                                     eval-zone-size))})]\n                 constants/background-color\n                 :menu)\n        (let [last-eval-form (last (:eval-results @graphics-state))]\n          (when last-eval-form\n            (let [s (* (- 1 constants/eval-zone-bar-thickness)\n                       (:eval-zone-size @graphics-state))\n                  radius (/ s (+ (Math/sqrt 2) 2))]\n              (render-sublayouts (form-layout last-eval-form\n                                              (assoc (geom/subtract-points (geom/add-points app-pos app-size)\n                                                                           (geom/scale-point geom/unit radius))\n                                                     :radius (* radius\n                                                                constants/eval-zone-form-radius-factor)))\n                                 :menu)))))\n      (doseq [formbar-index (range (count (:formbars @graphics-state)))]\n        (let [{:keys [forms]} (nth (:formbars @graphics-state) formbar-index)]\n          (doseq [{:keys [color radius-factor]} [{:radius-factor 1\n                                                  :color constants/foreground-color}\n                                                 {:radius-factor (- 1 constants/formbar-outline-thickness)\n                                                  :color constants/background-color}]]\n            (doseq [side [1 -1]]\n              (circle {:x (* 0.5 (+ 1 (* side (formbar-width formbar-index))))\n                       :y (formbar-y formbar-index)\n                       :radius (* constants/formbar-radius radius-factor)}\n                      color\n                      :formbar))\n            (rect {:x (* 0.5 (- 1 (formbar-width formbar-index)))\n                   :y (- (formbar-y formbar-index) (* constants/formbar-radius radius-factor))}\n                  {:x (formbar-width formbar-index)\n                   :y (* 2 (* constants/formbar-radius radius-factor))}\n                  color\n                  :formbar))\n          (doseq [i (range (count forms))]\n            (let [form (nth forms i)\n                  current-circle (formbar-circle formbar-index i)]\n              (when (geom/in-circle? current-circle mouse)\n                (circle (update current-circle\n                                :radius #(/ % constants/formbar-form-size))\n                        constants/highlight-color\n                        :formbar))\n              (render-sublayouts (form-layout form\n                                              current-circle)\n                                 :formbar)))))\n      (when (and (= mouse-zone :formbar) current-placement-form)\n        (let [insertion-indeces (formbar-insertion-indeces mouse)\n              base-circle (apply formbar-circle insertion-indeces)]\n          (render-sublayouts (form-layout current-placement-form\n                                          (-> base-circle\n                                              (update :x #(+ % (* 0.5 formbar-form-spacing)))\n                                              (update :y #(- % (* 0.5 formbar-form-spacing constants/formbar-placement-offset)))\n                                              (update :radius #(* % constants/formbar-placement-size))))\n                             :formbar))))))\n\n(defn get-mouse-pos []\n  (let [plugins (.-plugins (.-renderer (:app @graphics-state)))\n        raw-pos (clj->js (.-global (.-mouse (get (js->clj plugins) \"interaction\"))))\n        x (.-x raw-pos)\n        y (.-y raw-pos)\n        width (app-width)\n        height (app-height)\n        size (app-size)]\n    {:x (/ (- x (* 0.5 (- width size))) size)\n     :y (/ (- y (* 0.5 (- height size))) size)}))\n\n(defn update-graphics [app-state control-state]\n  (u/log (:down-zone (:mouse @graphics-state)) (placement-form))\n  (let [app (:app @graphics-state)\n        delta (/ (.-elapsedMS (.-ticker app)) 1000)\n        {:keys [move zoom]} (constants/camera-speed (:camera-move-diff @graphics-state))]\n    (update-attr! :camera-pos\n                  #(geom/tween-points (ideal-camera-pos)\n                                      %\n                                      (Math/pow move\n                                                delta)))\n    (update-attr! :camera-zoom\n                  #(Math/pow Math/E\n                             (u/tween (Math/log (ideal-camera-zoom))\n                                      (Math/log %)\n                                      (Math/pow zoom\n                                                delta))))\n    (update-attr! :eval-zone-size\n                  (fn [size]\n                    (let [p (Math/pow constants/eval-zone-speed delta)]\n                      (+ (* p size)\n                         (* (- 1 p)\n                            (if (= (get-mouse-zone) :eval)\n                              constants/eval-zone-max-size\n                              constants/eval-zone-min-size))))))\n    (resize)\n    (doseq [layer constants/ui-layers]\n      (.clear (get-graphics layer)))\n    (let [stage (.-stage app)\n          texts (:texts @graphics-state)]\n      (when texts\n        (doseq [text-container (vals texts)]\n          (.removeChild stage text-container)\n          (.destroy text-container (clj->js {:children true :texture true :baseTexture true}))))\n      (doseq [[layer z] (mapv vector constants/ui-layers (range))]\n        (let [container (pixi/Container.)]\n          (update-attr! :texts\n                        #(assoc % layer container))\n          (set! (.-zIndex container) (+ 0.5 z))\n          (.addChild stage container))))\n    (render-app-state app-state control-state)))\n\n(defn log-eval-result [result]\n  (update-attr! :eval-results #(conj % (first (:children (vedn/clj->vedn (str result)))))))\n\n(defn update-mouse-pos [event]\n  (let [screen-pos (.-global (.-data event))\n        x (.-x screen-pos)\n        y (.-y screen-pos)\n        width (app-width)\n        height (app-height)\n        size (app-size)\n        current-pos {:x (/ (- x (* 0.5 (- width size))) size)\n                     :y (/ (- y (* 0.5 (- height size))) size)}]\n    (update-attr! :mouse\n                  (fn [state]\n                    (let [diff (geom/subtract-points state\n                                                     current-pos)]\n                      (assoc (merge state current-pos)\n                             :drag-dist (when (:down? state)\n                                          (+ (geom/point-magnitude diff)\n                                             (:drag-dist state)))))))))\n\n(defn on-click-down [event]\n  (update-mouse-pos event)\n  (let [{:keys [formbars mouse]} @graphics-state\n        layout (adjusted-form-layout)\n        layout-path (layout-path-at layout mouse)\n        zone (get-mouse-zone)\n        formbar-zone-indeces (when (= zone :formbar)\n                               (some #(when (geom/in-circle? (apply formbar-circle %) mouse)\n                                        %)\n                                     (for [i (range (count formbars))\n                                           i2 (range (count (:forms (nth formbars i))))]\n                                       [i i2])))]\n    (update-attr! :mouse\n                  (fn [state]\n                    (assoc state\n                           :down? true\n                           :down-path layout-path\n                           :down-zone zone\n                           :down-formbar-indeces formbar-zone-indeces)))))\n\n(defn on-click-up [event]\n  (update-mouse-pos event)\n  (let [mouse-state (:mouse @graphics-state)\n        layout (adjusted-form-layout)\n        layout-path (layout-path-at layout mouse-state)\n        {:keys [down-zone down-path]} mouse-state]\n    (when (mouse-dragging?)\n      (case (get-mouse-zone)\n        :program\n        (let [insertion-path (layout-insertion-path-at layout mouse-state)\n              current-placement-form (placement-form)]\n          (when current-placement-form\n            (update-attr! :form\n                          (fn [form]\n                            (if (= (count layout-path) (count insertion-path))\n                              (if (= :literal (:type (vedn/get-child form (vec (concat '(0) insertion-path)))))\n                                (vedn/replace-child form\n                                                    (vec (concat '(0) layout-path))\n                                                    current-placement-form)\n                                (vedn/insert-child form\n                                                   (vec (concat '(0) insertion-path '(0)))\n                                                   current-placement-form))\n                              (vedn/insert-child form\n                                                 (vec (concat '(0) insertion-path))\n                                                 current-placement-form))))))\n        \n        :discard\n        (case down-zone\n          :program\n          (when down-path\n            (update-attr! :form\n                          #(vedn/remove-child % (vec (concat '(0) down-path)))))\n          \n          :formbar\n          (let [[outer-index inner-index] (:down-formbar-indeces mouse-state)]\n            (update-attr! :formbars\n                          (fn [formbars]\n                            (update-in formbars\n                                       [outer-index :forms]\n                                       #(vedn/vector-remove % inner-index)))))\n          \n          nil)\n        \n        :eval\n        (when down-path\n          (let [down-form (vedn/get-child (:form @graphics-state)\n                                          (vec (concat '(0) down-path)))]\n            (evaluation/eval-clj (vedn/vedn->clj down-form)\n                                 log-eval-result)))\n        \n        :formbar\n        (let [current-placement-form (placement-form)]\n          (when current-placement-form\n            (let [[outer-index inner-index] (formbar-insertion-indeces mouse-state)]\n              (update-attr! :formbars\n                            (fn [formbars]\n                              (update-in formbars\n                                         [outer-index :forms]\n                                         #(vedn/vector-insert %\n                                                              (inc inner-index)\n                                                              current-placement-form)))))))\n        \n        nil))\n    (when (and (= (:down-zone mouse-state) :program)\n               (not (mouse-dragging?)))\n      (set-attr! :selected-layout-path\n                 (:down-path mouse-state)))\n    (update-attr! :mouse\n                  (fn [state]\n                    (assoc state\n                           :down? false\n                           :drag-dist 0)))\n    (set-attr! :camera-move-diff (- (count layout-path)\n                                    (count (:selected-layout-path @graphics-state))))))\n\n(defn init [update-fn]\n  (let [app (set-attr! :app\n                       (pixi/Application. (clj->js {:autoResize true})))\n        stage (.-stage app)]\n    (set! (.-sortableChildren stage) true)\n    (set-attr! :graphics {})\n    (doseq [[layer z] (mapv vector constants/ui-layers (range))]\n      (update-attr! :graphics\n                    #(let [graphics (pixi/Graphics.)]\n                       (set! (.-zIndex graphics) z)\n                       (.addChild stage graphics)\n                       (assoc % layer graphics))))\n    (js/document.body.appendChild (.-view app))\n    (resize)\n    (.add (.-ticker app) update-fn)\n    (let [interaction (get (js->clj (.-plugins (.-renderer (:app @graphics-state)))) \"interaction\")]\n      (.on interaction \"pointerdown\" on-click-down)\n      (.on interaction \"pointerup\" on-click-up)\n      (.on interaction \"pointermove\" update-mouse-pos))\n    (set-attr! :camera-pos {:x 0 :y 0})\n    (set-attr! :camera-zoom 1)\n    (set-attr! :eval-zone-size constants/eval-zone-min-size)\n    (set-attr! :form (vedn/clj->vedn vedn/test-str))\n    (set-attr! :eval-results [])\n    (set-attr! :formbars constants/formbar-defaults)\n    (let [font (FaceFontObserver. constants/font-name)]\n      (.then (.load font)\n             (fn []\n               (set-attr! :font-loaded? true)\n               (u/log \"Font loaded.\"))))))"]}