{"version":3,"sources":["ellah/evaluation.cljs"],"mappings":";AAOA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAQ,AAACC;;AAClB,AAAA,AAAAJ,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAASC,AAAa,AAAA,AAACC;;AAEvB,AAAA,AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AAAUS;AAAhB,AAAA,AAAAP,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAA0BQ;AAA1B,AACE,AAAMA,AAAS,AAAAC,AAAID;AAAJ,AAAA,AAAAC;AAAAA;;AAAaC;;;AAA5B,AAAA,AAAA,AAAA,AAAA,AACMC,AAAeC,AACA,AAACC,AAAQC,AAAsB3B;AAE9C4B,AAAE,AAAKC;AAAL,AAAQ,AAAM,AAAA,AAAQA;AAAd,AACE,AAACC,AAAiB,AAACC,AAAS,AAAA,AAAQF;;AADtC;;AAEN,AAACG,AAAKH;;AACN,AAAAI,AAAU,AAAA,AAAQJ;AAAlB,AAAA,AAAAI,AAAAA,AAACZ,AAAAA,AAAAA;;AAPX,AAQE,AAAA,AAACa,AAAclC,AAAQ,AAAKoB,AAAiBI,AAAQI;;;AATzD,AAAA,AAAA,AAAMjB;;AAAN;AAAA,AAAA,AAAA,AAAAI,AAAMJ;AAAN,AAAA,AAAAK,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAWA,AAAA,AAAMoB;AAAN,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAsBpC;AAAvB,AAGwB,AAAA,AAACqC,AAAOlC","names":["js/ellah","js/ellah.evaluation","js/ellah.evaluation.c-state","ellah.evaluation/c-state","cljs.js.empty_state","js/ellah.evaluation.!eval-ready?","ellah.evaluation/!eval-ready?","cljs.core.atom","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","ellah.evaluation/eval-clj","p__182100","vec__182101","cljs.core.nth","seq182098","G__182099","cljs.core/first","cljs.core/next","self__4723__auto__","source","callback","or__4126__auto__","ellah.util/log","options","cljs.js/js-eval","cljs.core.partial","shadow.cljs.bootstrap.browser/load","f","x","js/console.error","cljs.core/ex-cause","cljs.core/tap>","G__182110","cljs.js.eval_str","ellah.evaluation/init","shadow.cljs.bootstrap.browser/init","cljs.core/reset!"],"sourcesContent":["(ns ellah.evaluation\n  (:require [cljs.js :as cljs]\n            [shadow.cljs.bootstrap.browser :as shadow.bootstrap]\n            [ellah.vedn :as vedn]\n            [ellah.util :as u]))\n\n;; Set up eval environment\n(defonce c-state (cljs/empty-state))\n(defonce !eval-ready? (atom false))\n\n(defn eval-clj [source & [callback]]\n  (let [callback (or callback u/log)\n        options {:eval cljs/js-eval\n                 :load (partial shadow.bootstrap/load c-state)\n                 :context :expr}\n        f (fn [x] (when (:error x)\n                    (js/console.error (ex-cause (:error x))))\n            (tap> x)\n            (callback (:value x)))]\n    (cljs/eval-str c-state (str source) \"[test]\" options f)))\n\n(defn init []\n  (shadow.bootstrap/init c-state\n                         {:path \"/js/bootstrap\"\n                          :load-on-init '#{ellah.user}}\n                         #(reset! !eval-ready? true)))"]}