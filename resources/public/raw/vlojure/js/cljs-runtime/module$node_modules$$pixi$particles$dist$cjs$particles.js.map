{
"version":3,
"file":"module$node_modules$$pixi$particles$dist$cjs$particles.js",
"lineCount":26,
"mappings":"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",
"sources":["node_modules/@pixi/particles/dist/cjs/particles.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$particles$dist$cjs$particles\"] = function(global,require,module,exports) {\n/*!\n * @pixi/particles - v6.0.4\n * Compiled Tue, 11 May 2021 18:00:23 UTC\n *\n * @pixi/particles is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar constants = require('@pixi/constants');\nvar display = require('@pixi/display');\nvar utils = require('@pixi/utils');\nvar core = require('@pixi/core');\nvar math = require('@pixi/math');\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * The ParticleContainer class is a really fast version of the Container built solely for speed,\n * so use when you need a lot of sprites or particles.\n *\n * The tradeoff of the ParticleContainer is that most advanced functionality will not work.\n * ParticleContainer implements the basic object transform (position, scale, rotation)\n * and some advanced functionality like tint (as of v4.5.6).\n *\n * Other more advanced functionality like masking, children, filters, etc will not work on sprites in this batch.\n *\n * It's extremely easy to use:\n * ```js\n * let container = new ParticleContainer();\n *\n * for (let i = 0; i < 100; ++i)\n * {\n *     let sprite = PIXI.Sprite.from(\"myImage.png\");\n *     container.addChild(sprite);\n * }\n * ```\n *\n * And here you have a hundred sprites that will be rendered at the speed of light.\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nvar ParticleContainer = /** @class */ (function (_super) {\n    __extends(ParticleContainer, _super);\n    /**\n     * @param {number} [maxSize=1500] - The maximum number of particles that can be rendered by the container.\n     *  Affects size of allocated buffers.\n     * @param {object} [properties] - The properties of children that should be uploaded to the gpu and applied.\n     * @param {boolean} [properties.vertices=false] - When true, vertices be uploaded and applied.\n     *                  if sprite's ` scale/anchor/trim/frame/orig` is dynamic, please set `true`.\n     * @param {boolean} [properties.position=true] - When true, position be uploaded and applied.\n     * @param {boolean} [properties.rotation=false] - When true, rotation be uploaded and applied.\n     * @param {boolean} [properties.uvs=false] - When true, uvs be uploaded and applied.\n     * @param {boolean} [properties.tint=false] - When true, alpha and tint be uploaded and applied.\n     * @param {number} [batchSize=16384] - Number of particles per batch. If less than maxSize, it uses maxSize instead.\n     * @param {boolean} [autoResize=false] - If true, container allocates more batches in case\n     *  there are more than `maxSize` particles.\n     */\n    function ParticleContainer(maxSize, properties, batchSize, autoResize) {\n        if (maxSize === void 0) { maxSize = 1500; }\n        if (batchSize === void 0) { batchSize = 16384; }\n        if (autoResize === void 0) { autoResize = false; }\n        var _this = _super.call(this) || this;\n        // Making sure the batch size is valid\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        var maxBatchSize = 16384;\n        if (batchSize > maxBatchSize) {\n            batchSize = maxBatchSize;\n        }\n        /**\n         * Set properties to be dynamic (true) / static (false)\n         *\n         * @member {boolean[]}\n         * @private\n         */\n        _this._properties = [false, true, false, false, false];\n        /**\n         * @member {number}\n         * @private\n         */\n        _this._maxSize = maxSize;\n        /**\n         * @member {number}\n         * @private\n         */\n        _this._batchSize = batchSize;\n        /**\n         * @member {Array<PIXI.Buffer>}\n         * @private\n         */\n        _this._buffers = null;\n        /**\n         * for every batch stores _updateID corresponding to the last change in that batch\n         * @member {number[]}\n         * @private\n         */\n        _this._bufferUpdateIDs = [];\n        /**\n         * when child inserted, removed or changes position this number goes up\n         * @member {number[]}\n         * @private\n         */\n        _this._updateID = 0;\n        /**\n         * @member {boolean}\n         *\n         */\n        _this.interactiveChildren = false;\n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL`\n         * to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        _this.blendMode = constants.BLEND_MODES.NORMAL;\n        /**\n         * If true, container allocates more batches in case there are more than `maxSize` particles.\n         * @member {boolean}\n         * @default false\n         */\n        _this.autoResize = autoResize;\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * Default to true here as performance is usually the priority for particles.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        _this.roundPixels = true;\n        /**\n         * The texture used to render the children.\n         *\n         * @readonly\n         * @member {PIXI.BaseTexture}\n         */\n        _this.baseTexture = null;\n        _this.setProperties(properties);\n        /**\n         * The tint applied to the container.\n         * This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n         *\n         * @private\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        _this._tint = 0;\n        _this.tintRgb = new Float32Array(4);\n        _this.tint = 0xFFFFFF;\n        return _this;\n    }\n    /**\n     * Sets the private properties array to dynamic / static based on the passed properties object\n     *\n     * @param {object} properties - The properties to be uploaded\n     */\n    ParticleContainer.prototype.setProperties = function (properties) {\n        if (properties) {\n            this._properties[0] = 'vertices' in properties || 'scale' in properties\n                ? !!properties.vertices || !!properties.scale : this._properties[0];\n            this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];\n            this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];\n            this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];\n            this._properties[4] = 'tint' in properties || 'alpha' in properties\n                ? !!properties.tint || !!properties.alpha : this._properties[4];\n        }\n    };\n    /**\n     * Updates the object transform for rendering\n     *\n     * @private\n     */\n    ParticleContainer.prototype.updateTransform = function () {\n        // TODO don't need to!\n        this.displayObjectUpdateTransform();\n    };\n    Object.defineProperty(ParticleContainer.prototype, \"tint\", {\n        /**\n         * The tint applied to the container. This is a hex value.\n         * A value of 0xFFFFFF will remove any tint effect.\n         ** IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        get: function () {\n            return this._tint;\n        },\n        set: function (value) {\n            this._tint = value;\n            utils.hex2rgb(value, this.tintRgb);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Renders the container using the WebGL renderer\n     *\n     * @private\n     * @param {PIXI.Renderer} renderer - The webgl renderer\n     */\n    ParticleContainer.prototype.render = function (renderer) {\n        var _this = this;\n        if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable) {\n            return;\n        }\n        if (!this.baseTexture) {\n            this.baseTexture = this.children[0]._texture.baseTexture;\n            if (!this.baseTexture.valid) {\n                this.baseTexture.once('update', function () { return _this.onChildrenChange(0); });\n            }\n        }\n        renderer.batch.setObjectRenderer(renderer.plugins.particle);\n        renderer.plugins.particle.render(this);\n    };\n    /**\n     * Set the flag that static data should be updated to true\n     *\n     * @private\n     * @param {number} smallestChildIndex - The smallest child index\n     */\n    ParticleContainer.prototype.onChildrenChange = function (smallestChildIndex) {\n        var bufferIndex = Math.floor(smallestChildIndex / this._batchSize);\n        while (this._bufferUpdateIDs.length < bufferIndex) {\n            this._bufferUpdateIDs.push(0);\n        }\n        this._bufferUpdateIDs[bufferIndex] = ++this._updateID;\n    };\n    ParticleContainer.prototype.dispose = function () {\n        if (this._buffers) {\n            for (var i = 0; i < this._buffers.length; ++i) {\n                this._buffers[i].destroy();\n            }\n            this._buffers = null;\n        }\n    };\n    /**\n     * Destroys the container\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    ParticleContainer.prototype.destroy = function (options) {\n        _super.prototype.destroy.call(this, options);\n        this.dispose();\n        this._properties = null;\n        this._buffers = null;\n        this._bufferUpdateIDs = null;\n    };\n    return ParticleContainer;\n}(display.Container));\n\n/*\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that\n * they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n/**\n * The particle buffer manages the static and dynamic buffers for a particle container.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nvar ParticleBuffer = /** @class */ (function () {\n    /**\n     * @private\n     * @param {object} properties - The properties to upload.\n     * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.\n     * @param {number} size - The size of the batch.\n     */\n    function ParticleBuffer(properties, dynamicPropertyFlags, size) {\n        this.geometry = new core.Geometry();\n        this.indexBuffer = null;\n        /**\n         * The number of particles the buffer can hold\n         *\n         * @private\n         * @member {number}\n         */\n        this.size = size;\n        /**\n         * A list of the properties that are dynamic.\n         *\n         * @private\n         * @member {object[]}\n         */\n        this.dynamicProperties = [];\n        /**\n         * A list of the properties that are static.\n         *\n         * @private\n         * @member {object[]}\n         */\n        this.staticProperties = [];\n        for (var i = 0; i < properties.length; ++i) {\n            var property = properties[i];\n            // Make copy of properties object so that when we edit the offset it doesn't\n            // change all other instances of the object literal\n            property = {\n                attributeName: property.attributeName,\n                size: property.size,\n                uploadFunction: property.uploadFunction,\n                type: property.type || constants.TYPES.FLOAT,\n                offset: property.offset,\n            };\n            if (dynamicPropertyFlags[i]) {\n                this.dynamicProperties.push(property);\n            }\n            else {\n                this.staticProperties.push(property);\n            }\n        }\n        this.staticStride = 0;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n        this.dynamicStride = 0;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n        this._updateID = 0;\n        this.initBuffers();\n    }\n    /**\n     * Sets up the renderer context and necessary buffers.\n     *\n     * @private\n     */\n    ParticleBuffer.prototype.initBuffers = function () {\n        var geometry = this.geometry;\n        var dynamicOffset = 0;\n        /**\n         * Holds the indices of the geometry (quads) to draw\n         *\n         * @member {Uint16Array}\n         * @private\n         */\n        this.indexBuffer = new core.Buffer(utils.createIndicesForQuads(this.size), true, true);\n        geometry.addIndex(this.indexBuffer);\n        this.dynamicStride = 0;\n        for (var i = 0; i < this.dynamicProperties.length; ++i) {\n            var property = this.dynamicProperties[i];\n            property.offset = dynamicOffset;\n            dynamicOffset += property.size;\n            this.dynamicStride += property.size;\n        }\n        var dynBuffer = new ArrayBuffer(this.size * this.dynamicStride * 4 * 4);\n        this.dynamicData = new Float32Array(dynBuffer);\n        this.dynamicDataUint32 = new Uint32Array(dynBuffer);\n        this.dynamicBuffer = new core.Buffer(this.dynamicData, false, false);\n        // static //\n        var staticOffset = 0;\n        this.staticStride = 0;\n        for (var i = 0; i < this.staticProperties.length; ++i) {\n            var property = this.staticProperties[i];\n            property.offset = staticOffset;\n            staticOffset += property.size;\n            this.staticStride += property.size;\n        }\n        var statBuffer = new ArrayBuffer(this.size * this.staticStride * 4 * 4);\n        this.staticData = new Float32Array(statBuffer);\n        this.staticDataUint32 = new Uint32Array(statBuffer);\n        this.staticBuffer = new core.Buffer(this.staticData, true, false);\n        for (var i = 0; i < this.dynamicProperties.length; ++i) {\n            var property = this.dynamicProperties[i];\n            geometry.addAttribute(property.attributeName, this.dynamicBuffer, 0, property.type === constants.TYPES.UNSIGNED_BYTE, property.type, this.dynamicStride * 4, property.offset * 4);\n        }\n        for (var i = 0; i < this.staticProperties.length; ++i) {\n            var property = this.staticProperties[i];\n            geometry.addAttribute(property.attributeName, this.staticBuffer, 0, property.type === constants.TYPES.UNSIGNED_BYTE, property.type, this.staticStride * 4, property.offset * 4);\n        }\n    };\n    /**\n     * Uploads the dynamic properties.\n     *\n     * @private\n     * @param {PIXI.DisplayObject[]} children - The children to upload.\n     * @param {number} startIndex - The index to start at.\n     * @param {number} amount - The number to upload.\n     */\n    ParticleBuffer.prototype.uploadDynamic = function (children, startIndex, amount) {\n        for (var i = 0; i < this.dynamicProperties.length; i++) {\n            var property = this.dynamicProperties[i];\n            property.uploadFunction(children, startIndex, amount, property.type === constants.TYPES.UNSIGNED_BYTE ? this.dynamicDataUint32 : this.dynamicData, this.dynamicStride, property.offset);\n        }\n        this.dynamicBuffer._updateID++;\n    };\n    /**\n     * Uploads the static properties.\n     *\n     * @private\n     * @param {PIXI.DisplayObject[]} children - The children to upload.\n     * @param {number} startIndex - The index to start at.\n     * @param {number} amount - The number to upload.\n     */\n    ParticleBuffer.prototype.uploadStatic = function (children, startIndex, amount) {\n        for (var i = 0; i < this.staticProperties.length; i++) {\n            var property = this.staticProperties[i];\n            property.uploadFunction(children, startIndex, amount, property.type === constants.TYPES.UNSIGNED_BYTE ? this.staticDataUint32 : this.staticData, this.staticStride, property.offset);\n        }\n        this.staticBuffer._updateID++;\n    };\n    /**\n     * Destroys the ParticleBuffer.\n     *\n     * @private\n     */\n    ParticleBuffer.prototype.destroy = function () {\n        this.indexBuffer = null;\n        this.dynamicProperties = null;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n        this.staticProperties = null;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n        // all buffers are destroyed inside geometry\n        this.geometry.destroy();\n    };\n    return ParticleBuffer;\n}());\n\nvar fragment = \"varying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler;\\n\\nvoid main(void){\\n    vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\\n    gl_FragColor = color;\\n}\";\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\n\\nattribute vec2 aPositionCoord;\\nattribute float aRotation;\\n\\nuniform mat3 translationMatrix;\\nuniform vec4 uColor;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nvoid main(void){\\n    float x = (aVertexPosition.x) * cos(aRotation) - (aVertexPosition.y) * sin(aRotation);\\n    float y = (aVertexPosition.x) * sin(aRotation) + (aVertexPosition.y) * cos(aRotation);\\n\\n    vec2 v = vec2(x, y);\\n    v = v + aPositionCoord;\\n\\n    gl_Position = vec4((translationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = aTextureCoord;\\n    vColor = aColor * uColor;\\n}\\n\";\n\n/*\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now\n * share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleRenderer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleRenderer.java\n */\n/**\n * Renderer for Particles that is designer for speed over feature set.\n *\n * @class\n * @memberof PIXI\n */\nvar ParticleRenderer = /** @class */ (function (_super) {\n    __extends(ParticleRenderer, _super);\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this sprite batch works for.\n     */\n    function ParticleRenderer(renderer) {\n        var _this = _super.call(this, renderer) || this;\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        // and max number of element in the index buffer is 16384 * 6 = 98304\n        // Creating a full index buffer, overhead is 98304 * 2 = 196Ko\n        // let numIndices = 98304;\n        /**\n         * The default shader that is used if a sprite doesn't have a more specific one.\n         *\n         * @member {PIXI.Shader}\n         */\n        _this.shader = null;\n        _this.properties = null;\n        _this.tempMatrix = new math.Matrix();\n        _this.properties = [\n            // verticesData\n            {\n                attributeName: 'aVertexPosition',\n                size: 2,\n                uploadFunction: _this.uploadVertices,\n                offset: 0,\n            },\n            // positionData\n            {\n                attributeName: 'aPositionCoord',\n                size: 2,\n                uploadFunction: _this.uploadPosition,\n                offset: 0,\n            },\n            // rotationData\n            {\n                attributeName: 'aRotation',\n                size: 1,\n                uploadFunction: _this.uploadRotation,\n                offset: 0,\n            },\n            // uvsData\n            {\n                attributeName: 'aTextureCoord',\n                size: 2,\n                uploadFunction: _this.uploadUvs,\n                offset: 0,\n            },\n            // tintData\n            {\n                attributeName: 'aColor',\n                size: 1,\n                type: constants.TYPES.UNSIGNED_BYTE,\n                uploadFunction: _this.uploadTint,\n                offset: 0,\n            } ];\n        _this.shader = core.Shader.from(vertex, fragment, {});\n        /**\n         * The WebGL state in which this renderer will work.\n         *\n         * @member {PIXI.State}\n         * @readonly\n         */\n        _this.state = core.State.for2d();\n        return _this;\n    }\n    /**\n     * Renders the particle container object.\n     *\n     * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer\n     */\n    ParticleRenderer.prototype.render = function (container) {\n        var children = container.children;\n        var maxSize = container._maxSize;\n        var batchSize = container._batchSize;\n        var renderer = this.renderer;\n        var totalChildren = children.length;\n        if (totalChildren === 0) {\n            return;\n        }\n        else if (totalChildren > maxSize && !container.autoResize) {\n            totalChildren = maxSize;\n        }\n        var buffers = container._buffers;\n        if (!buffers) {\n            buffers = container._buffers = this.generateBuffers(container);\n        }\n        var baseTexture = children[0]._texture.baseTexture;\n        // if the uvs have not updated then no point rendering just yet!\n        this.state.blendMode = utils.correctBlendMode(container.blendMode, baseTexture.alphaMode);\n        renderer.state.set(this.state);\n        var gl = renderer.gl;\n        var m = container.worldTransform.copyTo(this.tempMatrix);\n        m.prepend(renderer.globalUniforms.uniforms.projectionMatrix);\n        this.shader.uniforms.translationMatrix = m.toArray(true);\n        this.shader.uniforms.uColor = utils.premultiplyRgba(container.tintRgb, container.worldAlpha, this.shader.uniforms.uColor, baseTexture.alphaMode);\n        this.shader.uniforms.uSampler = baseTexture;\n        this.renderer.shader.bind(this.shader);\n        var updateStatic = false;\n        // now lets upload and render the buffers..\n        for (var i = 0, j = 0; i < totalChildren; i += batchSize, j += 1) {\n            var amount = (totalChildren - i);\n            if (amount > batchSize) {\n                amount = batchSize;\n            }\n            if (j >= buffers.length) {\n                buffers.push(this._generateOneMoreBuffer(container));\n            }\n            var buffer = buffers[j];\n            // we always upload the dynamic\n            buffer.uploadDynamic(children, i, amount);\n            var bid = container._bufferUpdateIDs[j] || 0;\n            updateStatic = updateStatic || (buffer._updateID < bid);\n            // we only upload the static content when we have to!\n            if (updateStatic) {\n                buffer._updateID = container._updateID;\n                buffer.uploadStatic(children, i, amount);\n            }\n            // bind the buffer\n            renderer.geometry.bind(buffer.geometry);\n            gl.drawElements(gl.TRIANGLES, amount * 6, gl.UNSIGNED_SHORT, 0);\n        }\n    };\n    /**\n     * Creates one particle buffer for each child in the container we want to render and updates internal properties\n     *\n     * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer\n     * @return {PIXI.ParticleBuffer[]} The buffers\n     * @private\n     */\n    ParticleRenderer.prototype.generateBuffers = function (container) {\n        var buffers = [];\n        var size = container._maxSize;\n        var batchSize = container._batchSize;\n        var dynamicPropertyFlags = container._properties;\n        for (var i = 0; i < size; i += batchSize) {\n            buffers.push(new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize));\n        }\n        return buffers;\n    };\n    /**\n     * Creates one more particle buffer, because container has autoResize feature\n     *\n     * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer\n     * @return {PIXI.ParticleBuffer} generated buffer\n     * @private\n     */\n    ParticleRenderer.prototype._generateOneMoreBuffer = function (container) {\n        var batchSize = container._batchSize;\n        var dynamicPropertyFlags = container._properties;\n        return new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize);\n    };\n    /**\n     * Uploads the vertices.\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their vertices uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    ParticleRenderer.prototype.uploadVertices = function (children, startIndex, amount, array, stride, offset) {\n        var w0 = 0;\n        var w1 = 0;\n        var h0 = 0;\n        var h1 = 0;\n        for (var i = 0; i < amount; ++i) {\n            var sprite = children[startIndex + i];\n            var texture = sprite._texture;\n            var sx = sprite.scale.x;\n            var sy = sprite.scale.y;\n            var trim = texture.trim;\n            var orig = texture.orig;\n            if (trim) {\n                // if the sprite is trimmed and is not a tilingsprite then we need to add the\n                // extra space before transforming the sprite coords..\n                w1 = trim.x - (sprite.anchor.x * orig.width);\n                w0 = w1 + trim.width;\n                h1 = trim.y - (sprite.anchor.y * orig.height);\n                h0 = h1 + trim.height;\n            }\n            else {\n                w0 = (orig.width) * (1 - sprite.anchor.x);\n                w1 = (orig.width) * -sprite.anchor.x;\n                h0 = orig.height * (1 - sprite.anchor.y);\n                h1 = orig.height * -sprite.anchor.y;\n            }\n            array[offset] = w1 * sx;\n            array[offset + 1] = h1 * sy;\n            array[offset + stride] = w0 * sx;\n            array[offset + stride + 1] = h1 * sy;\n            array[offset + (stride * 2)] = w0 * sx;\n            array[offset + (stride * 2) + 1] = h0 * sy;\n            array[offset + (stride * 3)] = w1 * sx;\n            array[offset + (stride * 3) + 1] = h0 * sy;\n            offset += stride * 4;\n        }\n    };\n    /**\n     * Uploads the position.\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their positions uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    ParticleRenderer.prototype.uploadPosition = function (children, startIndex, amount, array, stride, offset) {\n        for (var i = 0; i < amount; i++) {\n            var spritePosition = children[startIndex + i].position;\n            array[offset] = spritePosition.x;\n            array[offset + 1] = spritePosition.y;\n            array[offset + stride] = spritePosition.x;\n            array[offset + stride + 1] = spritePosition.y;\n            array[offset + (stride * 2)] = spritePosition.x;\n            array[offset + (stride * 2) + 1] = spritePosition.y;\n            array[offset + (stride * 3)] = spritePosition.x;\n            array[offset + (stride * 3) + 1] = spritePosition.y;\n            offset += stride * 4;\n        }\n    };\n    /**\n     * Uploads the rotation.\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their rotation uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    ParticleRenderer.prototype.uploadRotation = function (children, startIndex, amount, array, stride, offset) {\n        for (var i = 0; i < amount; i++) {\n            var spriteRotation = children[startIndex + i].rotation;\n            array[offset] = spriteRotation;\n            array[offset + stride] = spriteRotation;\n            array[offset + (stride * 2)] = spriteRotation;\n            array[offset + (stride * 3)] = spriteRotation;\n            offset += stride * 4;\n        }\n    };\n    /**\n     * Uploads the Uvs\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their rotation uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    ParticleRenderer.prototype.uploadUvs = function (children, startIndex, amount, array, stride, offset) {\n        for (var i = 0; i < amount; ++i) {\n            var textureUvs = children[startIndex + i]._texture._uvs;\n            if (textureUvs) {\n                array[offset] = textureUvs.x0;\n                array[offset + 1] = textureUvs.y0;\n                array[offset + stride] = textureUvs.x1;\n                array[offset + stride + 1] = textureUvs.y1;\n                array[offset + (stride * 2)] = textureUvs.x2;\n                array[offset + (stride * 2) + 1] = textureUvs.y2;\n                array[offset + (stride * 3)] = textureUvs.x3;\n                array[offset + (stride * 3) + 1] = textureUvs.y3;\n                offset += stride * 4;\n            }\n            else {\n                // TODO you know this can be easier!\n                array[offset] = 0;\n                array[offset + 1] = 0;\n                array[offset + stride] = 0;\n                array[offset + stride + 1] = 0;\n                array[offset + (stride * 2)] = 0;\n                array[offset + (stride * 2) + 1] = 0;\n                array[offset + (stride * 3)] = 0;\n                array[offset + (stride * 3) + 1] = 0;\n                offset += stride * 4;\n            }\n        }\n    };\n    /**\n     * Uploads the tint.\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their rotation uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    ParticleRenderer.prototype.uploadTint = function (children, startIndex, amount, array, stride, offset) {\n        for (var i = 0; i < amount; ++i) {\n            var sprite = children[startIndex + i];\n            var premultiplied = sprite._texture.baseTexture.alphaMode > 0;\n            var alpha = sprite.alpha;\n            // we dont call extra function if alpha is 1.0, that's faster\n            var argb = alpha < 1.0 && premultiplied\n                ? utils.premultiplyTint(sprite._tintRGB, alpha) : sprite._tintRGB + (alpha * 255 << 24);\n            array[offset] = argb;\n            array[offset + stride] = argb;\n            array[offset + (stride * 2)] = argb;\n            array[offset + (stride * 3)] = argb;\n            offset += stride * 4;\n        }\n    };\n    /**\n     * Destroys the ParticleRenderer.\n     */\n    ParticleRenderer.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        if (this.shader) {\n            this.shader.destroy();\n            this.shader = null;\n        }\n        this.tempMatrix = null;\n    };\n    return ParticleRenderer;\n}(core.ObjectRenderer));\n\nexports.ParticleContainer = ParticleContainer;\nexports.ParticleRenderer = ParticleRenderer;\n//# sourceMappingURL=particles.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","defineProperty","value","constants","display","utils","core","math","setPrototypeOf","__proto__","Array","p","hasOwnProperty","ParticleContainer","_super","maxSize","properties","batchSize","autoResize","_this","call","maxBatchSize","_properties","_maxSize","_batchSize","_buffers","_bufferUpdateIDs","_updateID","interactiveChildren","blendMode","BLEND_MODES","NORMAL","roundPixels","baseTexture","setProperties","_tint","tintRgb","Float32Array","tint","ParticleContainer.prototype.setProperties","vertices","scale","position","rotation","uvs","alpha","updateTransform","ParticleContainer.prototype.updateTransform","displayObjectUpdateTransform","get","set","hex2rgb","enumerable","configurable","render","ParticleContainer.prototype.render","renderer","visible","worldAlpha","children","length","renderable","_texture","valid","once","onChildrenChange","batch","setObjectRenderer","plugins","particle","ParticleContainer.prototype.onChildrenChange","smallestChildIndex","bufferIndex","Math","floor","push","dispose","ParticleContainer.prototype.dispose","i","destroy","ParticleContainer.prototype.destroy","options","Container","ParticleBuffer","dynamicPropertyFlags","size","geometry","Geometry","indexBuffer","dynamicProperties","staticProperties","property","attributeName","uploadFunction","type","TYPES","FLOAT","offset","staticStride","staticDataUint32","staticData","staticBuffer","dynamicStride","dynamicDataUint32","dynamicData","dynamicBuffer","initBuffers","ParticleBuffer.prototype.initBuffers","dynamicOffset","Buffer","createIndicesForQuads","addIndex","dynBuffer","ArrayBuffer","Uint32Array","staticOffset","statBuffer","addAttribute","UNSIGNED_BYTE","uploadDynamic","ParticleBuffer.prototype.uploadDynamic","startIndex","amount","uploadStatic","ParticleBuffer.prototype.uploadStatic","ParticleBuffer.prototype.destroy","ParticleRenderer","shader","tempMatrix","Matrix","uploadVertices","uploadPosition","uploadRotation","uploadUvs","uploadTint","Shader","from","vertex","fragment","state","State","for2d","ParticleRenderer.prototype.render","container","totalChildren","buffers","generateBuffers","correctBlendMode","alphaMode","gl","m","worldTransform","copyTo","prepend","globalUniforms","uniforms","projectionMatrix","translationMatrix","toArray","uColor","premultiplyRgba","uSampler","bind","updateStatic","j","_generateOneMoreBuffer","buffer","bid","drawElements","TRIANGLES","UNSIGNED_SHORT","ParticleRenderer.prototype.generateBuffers","ParticleRenderer.prototype._generateOneMoreBuffer","ParticleRenderer.prototype.uploadVertices","array","stride","w0","w1","h0","h1","sprite","texture","sx","x","sy","y","trim","orig","anchor","width","height","ParticleRenderer.prototype.uploadPosition","spritePosition","ParticleRenderer.prototype.uploadRotation","spriteRotation","ParticleRenderer.prototype.uploadUvs","textureUvs","_uvs","x0","y0","x1","y1","x2","y2","x3","y3","ParticleRenderer.prototype.uploadTint","premultiplied","argb","premultiplyTint","_tintRGB","ParticleRenderer.prototype.destroy","ObjectRenderer"]
}
