{
"version":3,
"file":"module$node_modules$$pixi$filter_noise$dist$cjs$filter_noise.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@pixi/filter-noise/dist/cjs/filter-noise.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$filter_noise$dist$cjs$filter_noise\"] = function(global,require,module,exports) {\n/*!\n * @pixi/filter-noise - v6.1.1\n * Compiled Fri, 06 Aug 2021 03:30:25 UTC\n *\n * @pixi/filter-noise is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar core = require('@pixi/core');\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\nvar fragment = \"precision highp float;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform float uNoise;\\nuniform float uSeed;\\nuniform sampler2D uSampler;\\n\\nfloat rand(vec2 co)\\n{\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvoid main()\\n{\\n    vec4 color = texture2D(uSampler, vTextureCoord);\\n    float randomValue = rand(gl_FragCoord.xy * uSeed);\\n    float diff = (randomValue - 0.5) * uNoise;\\n\\n    // Un-premultiply alpha before applying the color matrix. See issue #3539.\\n    if (color.a > 0.0) {\\n        color.rgb /= color.a;\\n    }\\n\\n    color.r += diff;\\n    color.g += diff;\\n    color.b += diff;\\n\\n    // Premultiply alpha again.\\n    color.rgb *= color.a;\\n\\n    gl_FragColor = color;\\n}\\n\";\n\n/**\n * A Noise effect filter.\n *\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @author Vico @vicocotea\n */\nvar NoiseFilter = /** @class */ (function (_super) {\n    __extends(NoiseFilter, _super);\n    /**\n     * @param {number} [noise=0.5] - The noise intensity, should be a normalized value in the range [0, 1].\n     * @param {number} [seed] - A random seed for the noise generation. Default is `Math.random()`.\n     */\n    function NoiseFilter(noise, seed) {\n        if (noise === void 0) { noise = 0.5; }\n        if (seed === void 0) { seed = Math.random(); }\n        var _this = _super.call(this, core.defaultFilterVertex, fragment, {\n            uNoise: 0,\n            uSeed: 0,\n        }) || this;\n        _this.noise = noise;\n        _this.seed = seed;\n        return _this;\n    }\n    Object.defineProperty(NoiseFilter.prototype, \"noise\", {\n        /**\n         * The amount of noise to apply, this value should be in the range (0, 1].\n         *\n         * @member {number}\n         * @default 0.5\n         */\n        get: function () {\n            return this.uniforms.uNoise;\n        },\n        set: function (value) {\n            this.uniforms.uNoise = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NoiseFilter.prototype, \"seed\", {\n        /**\n         * A seed value to apply to the random noise generation. `Math.random()` is a good value to use.\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this.uniforms.uSeed;\n        },\n        set: function (value) {\n            this.uniforms.uSeed = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return NoiseFilter;\n}(core.Filter));\n\nexports.NoiseFilter = NoiseFilter;\n//# sourceMappingURL=filter-noise.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","defineProperty","value","core","setPrototypeOf","__proto__","Array","p","hasOwnProperty","NoiseFilter","_super","noise","seed","Math","random","_this","call","defaultFilterVertex","fragment","uNoise","uSeed","get","uniforms","set","enumerable","configurable","Filter"]
}
