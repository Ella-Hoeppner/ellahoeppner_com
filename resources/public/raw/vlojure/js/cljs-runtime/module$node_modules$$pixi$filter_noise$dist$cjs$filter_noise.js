shadow$provide.module$node_modules$$pixi$filter_noise$dist$cjs$filter_noise=function(global,require,module,exports){function __extends(d,b){function __(){this.constructor=d}extendStatics(d,b);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)}Object.defineProperty(exports,"__esModule",{value:!0});var core=require("module$node_modules$$pixi$core$dist$cjs$core"),extendStatics=function(d$jscomp$0,b$jscomp$0){extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,
b){d.__proto__=b}||function(d,b){for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p])};return extendStatics(d$jscomp$0,b$jscomp$0)};global=function(_super){function NoiseFilter(noise,seed){void 0===noise&&(noise=.5);void 0===seed&&(seed=Math.random());var _this=_super.call(this,core.defaultFilterVertex,"precision highp float;\n\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\n\nuniform float uNoise;\nuniform float uSeed;\nuniform sampler2D uSampler;\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid main()\n{\n    vec4 color \x3d texture2D(uSampler, vTextureCoord);\n    float randomValue \x3d rand(gl_FragCoord.xy * uSeed);\n    float diff \x3d (randomValue - 0.5) * uNoise;\n\n    // Un-premultiply alpha before applying the color matrix. See issue #3539.\n    if (color.a \x3e 0.0) {\n        color.rgb /\x3d color.a;\n    }\n\n    color.r +\x3d diff;\n    color.g +\x3d diff;\n    color.b +\x3d diff;\n\n    // Premultiply alpha again.\n    color.rgb *\x3d color.a;\n\n    gl_FragColor \x3d color;\n}\n",
{uNoise:0,uSeed:0})||this;_this.noise=noise;_this.seed=seed;return _this}__extends(NoiseFilter,_super);Object.defineProperty(NoiseFilter.prototype,"noise",{get:function(){return this.uniforms.uNoise},set:function(value){this.uniforms.uNoise=value},enumerable:!1,configurable:!0});Object.defineProperty(NoiseFilter.prototype,"seed",{get:function(){return this.uniforms.uSeed},set:function(value){this.uniforms.uSeed=value},enumerable:!1,configurable:!0});return NoiseFilter}(core.Filter);exports.NoiseFilter=
global}
//# sourceMappingURL=module$node_modules$$pixi$filter_noise$dist$cjs$filter_noise.js.map
