{
"version":3,
"file":"module$node_modules$$pixi$prepare$dist$cjs$prepare.js",
"lineCount":13,
"mappings":"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",
"sources":["node_modules/@pixi/prepare/dist/cjs/prepare.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$prepare$dist$cjs$prepare\"] = function(global,require,module,exports) {\n/*!\n * @pixi/prepare - v6.1.1\n * Compiled Fri, 06 Aug 2021 03:30:25 UTC\n *\n * @pixi/prepare is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar settings = require('@pixi/settings');\nvar core = require('@pixi/core');\nvar graphics = require('@pixi/graphics');\nvar ticker = require('@pixi/ticker');\nvar display = require('@pixi/display');\nvar text = require('@pixi/text');\n\n/**\n * Default number of uploads per frame using prepare plugin.\n *\n * @static\n * @memberof PIXI.settings\n * @name UPLOADS_PER_FRAME\n * @type {number}\n * @default 4\n */\nsettings.settings.UPLOADS_PER_FRAME = 4;\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * CountLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of items per frame.\n *\n * @class\n * @memberof PIXI\n */\nvar CountLimiter = /** @class */ (function () {\n    /**\n     * @param {number} maxItemsPerFrame - The maximum number of items that can be prepared each frame.\n     */\n    function CountLimiter(maxItemsPerFrame) {\n        /**\n         * The maximum number of items that can be prepared each frame.\n         * @type {number}\n         * @private\n         */\n        this.maxItemsPerFrame = maxItemsPerFrame;\n        /**\n         * The number of items that can be prepared in the current frame.\n         * @type {number}\n         * @private\n         */\n        this.itemsLeft = 0;\n    }\n    /**\n     * Resets any counting properties to start fresh on a new frame.\n     */\n    CountLimiter.prototype.beginFrame = function () {\n        this.itemsLeft = this.maxItemsPerFrame;\n    };\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @return {boolean} If the item is allowed to be uploaded.\n     */\n    CountLimiter.prototype.allowedToUpload = function () {\n        return this.itemsLeft-- > 0;\n    };\n    return CountLimiter;\n}());\n\n/**\n * Built-in hook to find multiple textures from objects like AnimatedSprites.\n *\n * @private\n * @param {PIXI.DisplayObject} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.Texture object was found.\n */\nfunction findMultipleBaseTextures(item, queue) {\n    var result = false;\n    // Objects with multiple textures\n    if (item && item._textures && item._textures.length) {\n        for (var i = 0; i < item._textures.length; i++) {\n            if (item._textures[i] instanceof core.Texture) {\n                var baseTexture = item._textures[i].baseTexture;\n                if (queue.indexOf(baseTexture) === -1) {\n                    queue.push(baseTexture);\n                    result = true;\n                }\n            }\n        }\n    }\n    return result;\n}\n/**\n * Built-in hook to find BaseTextures from Texture.\n *\n * @private\n * @param {PIXI.Texture} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.Texture object was found.\n */\nfunction findBaseTexture(item, queue) {\n    if (item.baseTexture instanceof core.BaseTexture) {\n        var texture = item.baseTexture;\n        if (queue.indexOf(texture) === -1) {\n            queue.push(texture);\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Built-in hook to find textures from objects.\n *\n * @private\n * @param {PIXI.DisplayObject} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.Texture object was found.\n */\nfunction findTexture(item, queue) {\n    if (item._texture && item._texture instanceof core.Texture) {\n        var texture = item._texture.baseTexture;\n        if (queue.indexOf(texture) === -1) {\n            queue.push(texture);\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Built-in hook to draw PIXI.Text to its texture.\n *\n * @private\n * @param {PIXI.AbstractRenderer|PIXI.BasePrepare} helper - Not used by this upload handler\n * @param {PIXI.DisplayObject} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction drawText(_helper, item) {\n    if (item instanceof text.Text) {\n        // updating text will return early if it is not dirty\n        item.updateText(true);\n        return true;\n    }\n    return false;\n}\n/**\n * Built-in hook to calculate a text style for a PIXI.Text object.\n *\n * @private\n * @param {PIXI.AbstractRenderer|PIXI.BasePrepare} helper - Not used by this upload handler\n * @param {PIXI.DisplayObject} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction calculateTextStyle(_helper, item) {\n    if (item instanceof text.TextStyle) {\n        var font = item.toFontString();\n        text.TextMetrics.measureFont(font);\n        return true;\n    }\n    return false;\n}\n/**\n * Built-in hook to find Text objects.\n *\n * @private\n * @param {PIXI.DisplayObject} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.Text object was found.\n */\nfunction findText(item, queue) {\n    if (item instanceof text.Text) {\n        // push the text style to prepare it - this can be really expensive\n        if (queue.indexOf(item.style) === -1) {\n            queue.push(item.style);\n        }\n        // also push the text object so that we can render it (to canvas/texture) if needed\n        if (queue.indexOf(item) === -1) {\n            queue.push(item);\n        }\n        // also push the Text's texture for upload to GPU\n        var texture = item._texture.baseTexture;\n        if (queue.indexOf(texture) === -1) {\n            queue.push(texture);\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Built-in hook to find TextStyle objects.\n *\n * @private\n * @param {PIXI.TextStyle} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.TextStyle object was found.\n */\nfunction findTextStyle(item, queue) {\n    if (item instanceof text.TextStyle) {\n        if (queue.indexOf(item) === -1) {\n            queue.push(item);\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * BasePrepare handles basic queuing functionality and is extended by\n * {@link PIXI.Prepare} and {@link PIXI.CanvasPrepare}\n * to provide preparation capabilities specific to their respective renderers.\n *\n * @example\n * // Create a sprite\n * const sprite = PIXI.Sprite.from('something.png');\n *\n * // Load object into GPU\n * app.renderer.plugins.prepare.upload(sprite, () => {\n *\n *     //Texture(s) has been uploaded to GPU\n *     app.stage.addChild(sprite);\n *\n * })\n *\n * @abstract\n * @class\n * @memberof PIXI\n */\nvar BasePrepare = /** @class */ (function () {\n    /**\n     * @param {PIXI.AbstractRenderer} renderer - A reference to the current renderer\n     */\n    function BasePrepare(renderer) {\n        var _this = this;\n        /**\n         * The limiter to be used to control how quickly items are prepared.\n         * @type {PIXI.CountLimiter|PIXI.TimeLimiter}\n         */\n        this.limiter = new CountLimiter(settings.settings.UPLOADS_PER_FRAME);\n        /**\n         * Reference to the renderer.\n         * @type {PIXI.AbstractRenderer}\n         * @protected\n         */\n        this.renderer = renderer;\n        /**\n         * The only real difference between CanvasPrepare and Prepare is what they pass\n         * to upload hooks. That different parameter is stored here.\n         * @type {object}\n         * @protected\n         */\n        this.uploadHookHelper = null;\n        /**\n         * Collection of items to uploads at once.\n         * @type {Array<*>}\n         * @private\n         */\n        this.queue = [];\n        /**\n         * Collection of additional hooks for finding assets.\n         * @type {Array<Function>}\n         * @private\n         */\n        this.addHooks = [];\n        /**\n         * Collection of additional hooks for processing assets.\n         * @type {Array<Function>}\n         * @private\n         */\n        this.uploadHooks = [];\n        /**\n         * Callback to call after completed.\n         * @type {Array<Function>}\n         * @private\n         */\n        this.completes = [];\n        /**\n         * If prepare is ticking (running).\n         * @type {boolean}\n         * @private\n         */\n        this.ticking = false;\n        /**\n         * 'bound' call for prepareItems().\n         * @type {Function}\n         * @private\n         */\n        this.delayedTick = function () {\n            // unlikely, but in case we were destroyed between tick() and delayedTick()\n            if (!_this.queue) {\n                return;\n            }\n            _this.prepareItems();\n        };\n        // hooks to find the correct texture\n        this.registerFindHook(findText);\n        this.registerFindHook(findTextStyle);\n        this.registerFindHook(findMultipleBaseTextures);\n        this.registerFindHook(findBaseTexture);\n        this.registerFindHook(findTexture);\n        // upload hooks\n        this.registerUploadHook(drawText);\n        this.registerUploadHook(calculateTextStyle);\n    }\n    /**\n     * Upload all the textures and graphics to the GPU.\n     *\n     * @param {Function|PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text} item -\n     *        Either the container or display object to search for items to upload, the items to upload themselves,\n     *        or the callback function, if items have been added using `prepare.add`.\n     * @param {Function} [done] - Optional callback when all queued uploads have completed\n     */\n    BasePrepare.prototype.upload = function (item, done) {\n        if (typeof item === 'function') {\n            done = item;\n            item = null;\n        }\n        // If a display object, search for items\n        // that we could upload\n        if (item) {\n            this.add(item);\n        }\n        // Get the items for upload from the display\n        if (this.queue.length) {\n            if (done) {\n                this.completes.push(done);\n            }\n            if (!this.ticking) {\n                this.ticking = true;\n                ticker.Ticker.system.addOnce(this.tick, this, ticker.UPDATE_PRIORITY.UTILITY);\n            }\n        }\n        else if (done) {\n            done();\n        }\n    };\n    /**\n     * Handle tick update\n     *\n     * @private\n     */\n    BasePrepare.prototype.tick = function () {\n        setTimeout(this.delayedTick, 0);\n    };\n    /**\n     * Actually prepare items. This is handled outside of the tick because it will take a while\n     * and we do NOT want to block the current animation frame from rendering.\n     *\n     * @private\n     */\n    BasePrepare.prototype.prepareItems = function () {\n        this.limiter.beginFrame();\n        // Upload the graphics\n        while (this.queue.length && this.limiter.allowedToUpload()) {\n            var item = this.queue[0];\n            var uploaded = false;\n            if (item && !item._destroyed) {\n                for (var i = 0, len = this.uploadHooks.length; i < len; i++) {\n                    if (this.uploadHooks[i](this.uploadHookHelper, item)) {\n                        this.queue.shift();\n                        uploaded = true;\n                        break;\n                    }\n                }\n            }\n            if (!uploaded) {\n                this.queue.shift();\n            }\n        }\n        // We're finished\n        if (!this.queue.length) {\n            this.ticking = false;\n            var completes = this.completes.slice(0);\n            this.completes.length = 0;\n            for (var i = 0, len = completes.length; i < len; i++) {\n                completes[i]();\n            }\n        }\n        else {\n            // if we are not finished, on the next rAF do this again\n            ticker.Ticker.system.addOnce(this.tick, this, ticker.UPDATE_PRIORITY.UTILITY);\n        }\n    };\n    /**\n     * Adds hooks for finding items.\n     *\n     * @param {Function} addHook - Function call that takes two parameters: `item:*, queue:Array`\n     *          function must return `true` if it was able to add item to the queue.\n     * @return {this} Instance of plugin for chaining.\n     */\n    BasePrepare.prototype.registerFindHook = function (addHook) {\n        if (addHook) {\n            this.addHooks.push(addHook);\n        }\n        return this;\n    };\n    /**\n     * Adds hooks for uploading items.\n     *\n     * @param {Function} uploadHook - Function call that takes two parameters: `prepare:CanvasPrepare, item:*` and\n     *          function must return `true` if it was able to handle upload of item.\n     * @return {this} Instance of plugin for chaining.\n     */\n    BasePrepare.prototype.registerUploadHook = function (uploadHook) {\n        if (uploadHook) {\n            this.uploadHooks.push(uploadHook);\n        }\n        return this;\n    };\n    /**\n     * Manually add an item to the uploading queue.\n     *\n     * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text|*} item - Object to\n     *        add to the queue\n     * @return {this} Instance of plugin for chaining.\n     */\n    BasePrepare.prototype.add = function (item) {\n        // Add additional hooks for finding elements on special\n        // types of objects that\n        for (var i = 0, len = this.addHooks.length; i < len; i++) {\n            if (this.addHooks[i](item, this.queue)) {\n                break;\n            }\n        }\n        // Get children recursively\n        if (item instanceof display.Container) {\n            for (var i = item.children.length - 1; i >= 0; i--) {\n                this.add(item.children[i]);\n            }\n        }\n        return this;\n    };\n    /**\n     * Destroys the plugin, don't use after this.\n     *\n     */\n    BasePrepare.prototype.destroy = function () {\n        if (this.ticking) {\n            ticker.Ticker.system.remove(this.tick, this);\n        }\n        this.ticking = false;\n        this.addHooks = null;\n        this.uploadHooks = null;\n        this.renderer = null;\n        this.completes = null;\n        this.queue = null;\n        this.limiter = null;\n        this.uploadHookHelper = null;\n    };\n    return BasePrepare;\n}());\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {PIXI.Renderer} renderer - instance of the webgl renderer\n * @param {PIXI.BaseTexture} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadBaseTextures(renderer, item) {\n    if (item instanceof core.BaseTexture) {\n        // if the texture already has a GL texture, then the texture has been prepared or rendered\n        // before now. If the texture changed, then the changer should be calling texture.update() which\n        // reuploads the texture without need for preparing it again\n        if (!item._glTextures[renderer.CONTEXT_UID]) {\n            renderer.texture.bind(item);\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Built-in hook to upload PIXI.Graphics to the GPU.\n *\n * @private\n * @param {PIXI.Renderer} renderer - instance of the webgl renderer\n * @param {PIXI.DisplayObject} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadGraphics(renderer, item) {\n    if (!(item instanceof graphics.Graphics)) {\n        return false;\n    }\n    var geometry = item.geometry;\n    // update dirty graphics to get batches\n    item.finishPoly();\n    geometry.updateBatches();\n    var batches = geometry.batches;\n    // upload all textures found in styles\n    for (var i = 0; i < batches.length; i++) {\n        var texture = batches[i].style.texture;\n        if (texture) {\n            uploadBaseTextures(renderer, texture.baseTexture);\n        }\n    }\n    // if its not batchable - update vao for particular shader\n    if (!geometry.batchable) {\n        renderer.geometry.bind(geometry, item._resolveDirectShader(renderer));\n    }\n    return true;\n}\n/**\n * Built-in hook to find graphics.\n *\n * @private\n * @param {PIXI.DisplayObject} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.Graphics object was found.\n */\nfunction findGraphics(item, queue) {\n    if (item instanceof graphics.Graphics) {\n        queue.push(item);\n        return true;\n    }\n    return false;\n}\n/**\n * The prepare plugin provides renderer-specific plugins for pre-rendering DisplayObjects. These plugins are useful for\n * asynchronously preparing and uploading to the GPU assets, textures, graphics waiting to be displayed.\n *\n * Do not instantiate this plugin directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new application\n * const app = new PIXI.Application();\n * document.body.appendChild(app.view);\n *\n * // Don't start rendering right away\n * app.stop();\n *\n * // create a display object\n * const rect = new PIXI.Graphics()\n *     .beginFill(0x00ff00)\n *     .drawRect(40, 40, 200, 200);\n *\n * // Add to the stage\n * app.stage.addChild(rect);\n *\n * // Don't start rendering until the graphic is uploaded to the GPU\n * app.renderer.plugins.prepare.upload(app.stage, () => {\n *     app.start();\n * });\n *\n * @class\n * @extends PIXI.BasePrepare\n * @memberof PIXI\n */\nvar Prepare = /** @class */ (function (_super) {\n    __extends(Prepare, _super);\n    /**\n     * @param {PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    function Prepare(renderer) {\n        var _this = _super.call(this, renderer) || this;\n        _this.uploadHookHelper = _this.renderer;\n        // Add textures and graphics to upload\n        _this.registerFindHook(findGraphics);\n        _this.registerUploadHook(uploadBaseTextures);\n        _this.registerUploadHook(uploadGraphics);\n        return _this;\n    }\n    return Prepare;\n}(BasePrepare));\n\n/**\n * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of milliseconds per frame.\n *\n * @class\n * @memberof PIXI\n */\nvar TimeLimiter = /** @class */ (function () {\n    /**\n     * @param {number} maxMilliseconds - The maximum milliseconds that can be spent preparing items each frame.\n     */\n    function TimeLimiter(maxMilliseconds) {\n        /**\n         * The maximum milliseconds that can be spent preparing items each frame.\n         * @type {number}\n         * @private\n         */\n        this.maxMilliseconds = maxMilliseconds;\n        /**\n         * The start time of the current frame.\n         * @type {number}\n         * @private\n         */\n        this.frameStart = 0;\n    }\n    /**\n     * Resets any counting properties to start fresh on a new frame.\n     */\n    TimeLimiter.prototype.beginFrame = function () {\n        this.frameStart = Date.now();\n    };\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @return {boolean} If the item is allowed to be uploaded.\n     */\n    TimeLimiter.prototype.allowedToUpload = function () {\n        return Date.now() - this.frameStart < this.maxMilliseconds;\n    };\n    return TimeLimiter;\n}());\n\nexports.BasePrepare = BasePrepare;\nexports.CountLimiter = CountLimiter;\nexports.Prepare = Prepare;\nexports.TimeLimiter = TimeLimiter;\n//# sourceMappingURL=prepare.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","findMultipleBaseTextures","item","queue","result","_textures","length","i","core","Texture","baseTexture","indexOf","push","findBaseTexture","BaseTexture","texture","findTexture","_texture","drawText","_helper","text","Text","updateText","calculateTextStyle","TextStyle","font","toFontString","TextMetrics","measureFont","findText","style","findTextStyle","uploadBaseTextures","renderer","_glTextures","CONTEXT_UID","bind","uploadGraphics","graphics","Graphics","geometry","finishPoly","updateBatches","batches","batchable","_resolveDirectShader","findGraphics","defineProperty","value","settings","ticker","display","UPLOADS_PER_FRAME","setPrototypeOf","__proto__","Array","p","hasOwnProperty","CountLimiter","maxItemsPerFrame","itemsLeft","beginFrame","CountLimiter.prototype.beginFrame","allowedToUpload","CountLimiter.prototype.allowedToUpload","BasePrepare","_this","limiter","uploadHookHelper","addHooks","uploadHooks","completes","ticking","delayedTick","this.delayedTick","prepareItems","registerFindHook","registerUploadHook","upload","BasePrepare.prototype.upload","done","add","Ticker","system","addOnce","tick","UPDATE_PRIORITY","UTILITY","BasePrepare.prototype.tick","setTimeout","BasePrepare.prototype.prepareItems","uploaded","_destroyed","len","shift","slice","BasePrepare.prototype.registerFindHook","addHook","BasePrepare.prototype.registerUploadHook","uploadHook","BasePrepare.prototype.add","Container","children","destroy","BasePrepare.prototype.destroy","remove","Prepare","_super","call","TimeLimiter","maxMilliseconds","frameStart","TimeLimiter.prototype.beginFrame","Date","now","TimeLimiter.prototype.allowedToUpload"]
}
