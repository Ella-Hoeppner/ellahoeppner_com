{"version":3,"sources":["ellah/util.cljs"],"mappings":"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","names":["ellah.util/in?","coll","value","cljs.core/some","ellah.util/seek","pred","cljs.core/first","cljs.core.drop_while","cljs.core/complement","ellah.util/divis?","x","div","cljs.core/mod","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","ellah.util/pad","p__75701","vec__75702","cljs.core.nth","seq75698","G__75699","cljs.core/next","G__75700","self__4723__auto__","num","cljs.core/vec","cljs.core.take","cljs.core.concat","cljs.core.repeat","ellah.util/map-range","p__75710","vec__75711","seq75705","G__75706","G__75707","G__75708","G__75709","from-min","from-max","to-min","to-max","ellah.util/prop-range","p__75717","vec__75718","seq75715","G__75716","n","open","p1__75714#","cljs.core.map","cljs.core.range","ellah.util/par","cljs.core.prn","ellah.util/sign","ellah.util/rand-geom","p","cljs.core.rand","ellah.util/rand-exp","Math/log","ellah.util/sigmoid","Math/exp","ellah.util/swirly-looper","p__75722","vec__75723","seq75721","self__4724__auto__","cljs.core/seq","number","freq-param","amp-factor","or__4126__auto__","freqs","cljs.core.repeatedly","amplitudes","offsets","Math/PI","cljs.core.apply","cljs.core/+","f","a","o","Math/sin","Math/sqrt","ellah.util/update!","seq75726","G__75727","atom","update-args","cljs.core.swap_BANG_","cljs.core.partial","cljs.core/update","ellah.util/table-interp-function","table","cljs.core/last","index","cljs.core/count","ellah.util.map_range","Math/ceil","ellah.util/rand-exp-range","min-value","max-value","Math/pow","ellah.util/log","seq75728","values","js/console.log","cljs.core/clj->js","ellah.util/tween","b","t"],"sourcesContent":["(ns ellah.util)\n\n(defn in? [coll value]\n  (some #{value} coll))\n\n(defmacro lofn [bindings arguments & body]\n  `(let ~bindings\n     ~(conj body\n            arguments\n            `fn)))\n\n(defmacro default [bindings & body]\n  (conj body\n        (reduce into\n                (mapv (fn [[key value]]\n                        [key `(or ~key ~value)])\n                      (partition 2 bindings)))\n        'let))\n\n(defmacro gfn [& body]\n  (conj body [] 'fn))\n\n(defmacro generate [& body]\n  `(repeatedly ~(conj body `gfn)))\n\n(defmacro generate-n [n & body]\n  `(vec (take ~n (repeatedly ~(conj body `gfn)))))\n\n(defn seek [pred coll]\n  (first (drop-while (complement pred) coll)))\n\n(defmacro generate-seek [pred & body]\n  `(seek ~pred ~(conj body `generate)))\n\n(defn divis? [x div]\n  (zero? (mod x div)))\n\n(defn pad [coll value & [num]]\n  (if num\n    (vec (take num (concat coll (repeat value))))\n    (concat coll (repeat value))))\n\n(defn map-range [from-min from-max to-min to-max & [value]]\n  (if value\n    (+ (* (/ (- value from-min)\n             (- from-max from-min))\n          (- to-max to-min))\n       to-min)\n    (fn [value]\n      (+ (* (/ (- value from-min)\n               (- from-max from-min))\n            (- to-max to-min))\n         to-min))))\n\n(defn prop-range [n & [open]]\n  (map #(/ %\n           (if open\n             n\n             (dec n)))\n       (range n)))\n\n(defn par [x]\n  (prn x)\n  x)\n\n(defn sign [x]\n  (cond (> x 0) 1\n        (< x 0) -1\n        :else 0))\n\n(defn rand-geom [p]\n  (if (> p (rand))\n    0\n    (inc (rand-geom p))))\n\n(defn rand-exp []\n  (- (Math/log (rand))))\n\n(defn sigmoid [x]\n  (/ 1 (inc (Math/exp (- x)))))\n\n(defn swirly-looper [& [number freq-param amp-factor]]\n  (let [number (or number 10)\n        freqs (take number\n                    (repeatedly\n                     #(inc (rand-geom (or freq-param\n                                          0.5)))))\n        amplitudes (take number\n                         (repeatedly\n                          #(/ 1 (inc (* (rand-exp)\n                                        (or amp-factor\n                                            1))))))\n        offsets (take number\n                      (repeatedly\n                       #(rand (* Math/PI 2))))]\n    (fn [x]\n      (/ (apply +\n                (map (fn [f a o]\n                       (* a\n                          (Math/sin (+ o\n                                       (* Math/PI 2\n                                          f\n                                          x)))))\n                     freqs\n                     amplitudes\n                     offsets))\n         (Math/sqrt number)))))\n\n(defn update! [atom & update-args]\n  (swap! atom\n         (fn [a]\n           (apply (partial update a)\n                  update-args))))\n\n(defn table-interp-function [table]\n  (fn [x]\n    (cond (< x 0) (first table)\n          (>= x 1) (last table)\n          :else\n          (let [index (* x\n                         (dec\n                          (count table)))]\n            (map-range 0 1\n                       (nth table (int index)) (nth table (Math/ceil index))\n                       (mod index 1))))))\n\n(defn rand-exp-range [min-value max-value]\n  (* min-value (Math/pow (/ max-value min-value)\n                         (rand))))\n\n(defn log [& values]\n  (apply js/console.log\n         (map clj->js values))\n  (last values))\n\n(defn tween [a b t]\n  (+ (* b t)\n     (* a (- 1 t))))"]}