{
"version":3,
"file":"module$node_modules$$pixi$filter_displacement$dist$cjs$filter_displacement.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@pixi/filter-displacement/dist/cjs/filter-displacement.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$filter_displacement$dist$cjs$filter_displacement\"] = function(global,require,module,exports) {\n/*!\n * @pixi/filter-displacement - v6.0.4\n * Compiled Tue, 11 May 2021 18:00:23 UTC\n *\n * @pixi/filter-displacement is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar core = require('@pixi/core');\nvar math = require('@pixi/math');\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\nvar fragment = \"varying vec2 vFilterCoord;\\nvarying vec2 vTextureCoord;\\n\\nuniform vec2 scale;\\nuniform mat2 rotation;\\nuniform sampler2D uSampler;\\nuniform sampler2D mapSampler;\\n\\nuniform highp vec4 inputSize;\\nuniform vec4 inputClamp;\\n\\nvoid main(void)\\n{\\n  vec4 map =  texture2D(mapSampler, vFilterCoord);\\n\\n  map -= 0.5;\\n  map.xy = scale * inputSize.zw * (rotation * map.xy);\\n\\n  gl_FragColor = texture2D(uSampler, clamp(vec2(vTextureCoord.x + map.x, vTextureCoord.y + map.y), inputClamp.xy, inputClamp.zw));\\n}\\n\";\n\nvar vertex = \"attribute vec2 aVertexPosition;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 filterMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec2 vFilterCoord;\\n\\nuniform vec4 inputSize;\\nuniform vec4 outputFrame;\\n\\nvec4 filterVertexPosition( void )\\n{\\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\\n\\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\\n}\\n\\nvec2 filterTextureCoord( void )\\n{\\n    return aVertexPosition * (outputFrame.zw * inputSize.zw);\\n}\\n\\nvoid main(void)\\n{\\n\\tgl_Position = filterVertexPosition();\\n\\tvTextureCoord = filterTextureCoord();\\n\\tvFilterCoord = ( filterMatrix * vec3( vTextureCoord, 1.0)  ).xy;\\n}\\n\";\n\n/**\n * The DisplacementFilter class uses the pixel values from the specified texture\n * (called the displacement map) to perform a displacement of an object.\n *\n * You can use this filter to apply all manor of crazy warping effects.\n * Currently the `r` property of the texture is used to offset the `x`\n * and the `g` property of the texture is used to offset the `y`.\n *\n * The way it works is it uses the values of the displacement map to look up the\n * correct pixels to output. This means it's not technically moving the original.\n * Instead, it's starting at the output and asking \"which pixel from the original goes here\".\n * For example, if a displacement map pixel has `red = 1` and the filter scale is `20`,\n * this filter will output the pixel approximately 20 pixels to the right of the original.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nvar DisplacementFilter = /** @class */ (function (_super) {\n    __extends(DisplacementFilter, _super);\n    /**\n     * @param {PIXI.Sprite} sprite - The sprite used for the displacement map. (make sure its added to the scene!)\n     * @param {number} [scale] - The scale of the displacement\n     */\n    function DisplacementFilter(sprite, scale) {\n        var _this = this;\n        var maskMatrix = new math.Matrix();\n        sprite.renderable = false;\n        _this = _super.call(this, vertex, fragment, {\n            mapSampler: sprite._texture,\n            filterMatrix: maskMatrix,\n            scale: { x: 1, y: 1 },\n            rotation: new Float32Array([1, 0, 0, 1]),\n        }) || this;\n        _this.maskSprite = sprite;\n        _this.maskMatrix = maskMatrix;\n        if (scale === null || scale === undefined) {\n            scale = 20;\n        }\n        /**\n         * scaleX, scaleY for displacements\n         * @member {PIXI.Point}\n         */\n        _this.scale = new math.Point(scale, scale);\n        return _this;\n    }\n    /**\n     * Applies the filter.\n     *\n     * @param {PIXI.FilterSystem} filterManager - The manager.\n     * @param {PIXI.RenderTexture} input - The input target.\n     * @param {PIXI.RenderTexture} output - The output target.\n     * @param {PIXI.CLEAR_MODES} clearMode - clearMode.\n     */\n    DisplacementFilter.prototype.apply = function (filterManager, input, output, clearMode) {\n        // fill maskMatrix with _normalized sprite texture coords_\n        this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite);\n        this.uniforms.scale.x = this.scale.x;\n        this.uniforms.scale.y = this.scale.y;\n        // Extract rotation from world transform\n        var wt = this.maskSprite.worldTransform;\n        var lenX = Math.sqrt((wt.a * wt.a) + (wt.b * wt.b));\n        var lenY = Math.sqrt((wt.c * wt.c) + (wt.d * wt.d));\n        if (lenX !== 0 && lenY !== 0) {\n            this.uniforms.rotation[0] = wt.a / lenX;\n            this.uniforms.rotation[1] = wt.b / lenX;\n            this.uniforms.rotation[2] = wt.c / lenY;\n            this.uniforms.rotation[3] = wt.d / lenY;\n        }\n        // draw the filter...\n        filterManager.applyFilter(this, input, output, clearMode);\n    };\n    Object.defineProperty(DisplacementFilter.prototype, \"map\", {\n        /**\n         * The texture used for the displacement map. Must be power of 2 sized texture.\n         *\n         * @member {PIXI.Texture}\n         */\n        get: function () {\n            return this.uniforms.mapSampler;\n        },\n        set: function (value) {\n            this.uniforms.mapSampler = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return DisplacementFilter;\n}(core.Filter));\n\nexports.DisplacementFilter = DisplacementFilter;\n//# sourceMappingURL=filter-displacement.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","defineProperty","value","core","math","setPrototypeOf","__proto__","Array","p","hasOwnProperty","DisplacementFilter","_super","sprite","scale","maskMatrix","Matrix","renderable","_this","call","vertex","fragment","mapSampler","_texture","filterMatrix","x","y","rotation","Float32Array","maskSprite","undefined","Point","apply","DisplacementFilter.prototype.apply","filterManager","input","output","clearMode","uniforms","calculateSpriteMatrix","wt","worldTransform","lenX","Math","sqrt","a","lenY","c","applyFilter","get","set","enumerable","configurable","Filter"]
}
