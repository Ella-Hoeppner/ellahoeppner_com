{
"version":3,
"file":"module$node_modules$$pixi$mixin_cache_as_bitmap$dist$cjs$mixin_cache_as_bitmap.js",
"lineCount":16,
"mappings":"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",
"sources":["node_modules/@pixi/mixin-cache-as-bitmap/dist/cjs/mixin-cache-as-bitmap.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$mixin_cache_as_bitmap$dist$cjs$mixin_cache_as_bitmap\"] = function(global,require,module,exports) {\n/*!\n * @pixi/mixin-cache-as-bitmap - v6.0.4\n * Compiled Tue, 11 May 2021 18:00:23 UTC\n *\n * @pixi/mixin-cache-as-bitmap is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar core = require('@pixi/core');\nvar sprite = require('@pixi/sprite');\nvar display = require('@pixi/display');\nvar math = require('@pixi/math');\nvar utils = require('@pixi/utils');\nvar settings = require('@pixi/settings');\n\nvar _tempMatrix = new math.Matrix();\ndisplay.DisplayObject.prototype._cacheAsBitmap = false;\ndisplay.DisplayObject.prototype._cacheData = null;\ndisplay.DisplayObject.prototype._cacheAsBitmapResolution = null;\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n * @private\n */\nvar CacheData = /** @class */ (function () {\n    function CacheData() {\n        this.textureCacheId = null;\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n        this.originalUpdateTransform = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.originalContainsPoint = null;\n        this.sprite = null;\n    }\n    return CacheData;\n}());\nObject.defineProperties(display.DisplayObject.prototype, {\n    /**\n     * The resolution to use for cacheAsBitmap. By default this will use the renderer's resolution\n     * but can be overriden for performance. Lower values will reduce memory usage at the expense\n     * of render quality. A falsey value of `null` or `0` will default to the renderer's resolution.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new resolution.\n     *\n     * @member {number} cacheAsBitmapResolution\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapResolution: {\n        get: function () {\n            return this._cacheAsBitmapResolution;\n        },\n        set: function (resolution) {\n            if (resolution === this._cacheAsBitmapResolution) {\n                return;\n            }\n            this._cacheAsBitmapResolution = resolution;\n            if (this.cacheAsBitmap) {\n                // Toggle to re-render at the new resolution\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snap shot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get: function () {\n            return this._cacheAsBitmap;\n        },\n        set: function (value) {\n            if (this._cacheAsBitmap === value) {\n                return;\n            }\n            this._cacheAsBitmap = value;\n            var data;\n            if (value) {\n                if (!this._cacheData) {\n                    this._cacheData = new CacheData();\n                }\n                data = this._cacheData;\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n                data.originalDestroy = this.destroy;\n                data.originalContainsPoint = this.containsPoint;\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else {\n                data = this._cacheData;\n                if (data.sprite) {\n                    this._destroyCachedDisplayObject();\n                }\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n                this.destroy = data.originalDestroy;\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @method _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\ndisplay.DisplayObject.prototype._renderCached = function _renderCached(renderer) {\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n        return;\n    }\n    this._initCachedDisplayObject(renderer);\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    this._cacheData.sprite._render(renderer);\n};\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @method _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\ndisplay.DisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer) {\n    if (this._cacheData && this._cacheData.sprite) {\n        return;\n    }\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    var cacheAlpha = this.alpha;\n    this.alpha = 1;\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    var bounds = this.getLocalBounds(null, true).clone();\n    // add some padding!\n    if (this.filters) {\n        var padding = this.filters[0].padding;\n        bounds.pad(padding);\n    }\n    bounds.ceil(settings.settings.RESOLUTION);\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    var cachedRenderTexture = renderer.renderTexture.current;\n    var cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n    var cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n    var cachedProjectionTransform = renderer.projection.transform;\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n    // this renderTexture will be used to store the cached DisplayObject\n    var renderTexture = core.RenderTexture.create({\n        width: bounds.width,\n        height: bounds.height,\n        resolution: this.cacheAsBitmapResolution || renderer.resolution,\n    });\n    var textureCacheId = \"cacheAsBitmap_\" + utils.uid();\n    this._cacheData.textureCacheId = textureCacheId;\n    core.BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    core.Texture.addToCache(renderTexture, textureCacheId);\n    // need to set //\n    var m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n    renderer.render(this, { renderTexture: renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n    // renderer.filterManager.filterStack = stack;\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n    // create our cached sprite\n    var cachedSprite = new sprite.Sprite(renderTexture);\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n    this._cacheData.sprite = cachedSprite;\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent) {\n        this.enableTempParent();\n        this.updateTransform();\n        this.disableTempParent(null);\n    }\n    else {\n        this.updateTransform();\n    }\n    // map the hit test..\n    this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @method _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\ndisplay.DisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer) {\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n        return;\n    }\n    this._initCachedDisplayObjectCanvas(renderer);\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    this._cacheData.sprite._renderCanvas(renderer);\n};\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @method _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\ndisplay.DisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer) {\n    if (this._cacheData && this._cacheData.sprite) {\n        return;\n    }\n    // get bounds actually transforms the object for us already!\n    var bounds = this.getLocalBounds(null, true);\n    var cacheAlpha = this.alpha;\n    this.alpha = 1;\n    var cachedRenderTarget = renderer.context;\n    var cachedProjectionTransform = renderer._projTransform;\n    bounds.ceil(settings.settings.RESOLUTION);\n    var renderTexture = core.RenderTexture.create({ width: bounds.width, height: bounds.height });\n    var textureCacheId = \"cacheAsBitmap_\" + utils.uid();\n    this._cacheData.textureCacheId = textureCacheId;\n    core.BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    core.Texture.addToCache(renderTexture, textureCacheId);\n    // need to set //\n    var m = _tempMatrix;\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n    renderer.render(this, { renderTexture: renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    // now restore the state be setting the new properties\n    renderer.context = cachedRenderTarget;\n    renderer._projTransform = cachedProjectionTransform;\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n    // create our cached sprite\n    var cachedSprite = new sprite.Sprite(renderTexture);\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n    this._cacheData.sprite = cachedSprite;\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent) {\n        this.parent = renderer._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else {\n        this.updateTransform();\n    }\n    // map the hit test..\n    this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n * @method\n */\ndisplay.DisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds() {\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite._calculateBounds();\n    this._bounds.updateID = this._boundsID;\n};\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @method\n * @return {Rectangle} The local bounds.\n */\ndisplay.DisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds() {\n    return this._cacheData.sprite.getLocalBounds(null);\n};\n/**\n * Destroys the cached sprite.\n *\n * @private\n * @method\n */\ndisplay.DisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject() {\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n    core.BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    core.Texture.removeFromCache(this._cacheData.textureCacheId);\n    this._cacheData.textureCacheId = null;\n};\n/**\n * Destroys the cached object.\n *\n * @private\n * @method\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\ndisplay.DisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options) {\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n\nexports.CacheData = CacheData;\n//# sourceMappingURL=mixin-cache-as-bitmap.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","core","sprite","display","math","utils","settings","_tempMatrix","Matrix","DisplayObject","prototype","_cacheAsBitmap","_cacheData","_cacheAsBitmapResolution","CacheData","originalContainsPoint","originalFilterArea","originalMask","originalDestroy","originalUpdateTransform","originalGetLocalBounds","originalCalculateBounds","originalRenderCanvas","originalRender","textureCacheId","defineProperties","cacheAsBitmapResolution","get","set","resolution","cacheAsBitmap","data","render","renderCanvas","updateTransform","calculateBounds","getLocalBounds","destroy","containsPoint","_mask","filterArea","_renderCached","_renderCachedCanvas","_cacheAsBitmapDestroy","_destroyCachedDisplayObject","display.DisplayObject.prototype._renderCached","renderer","visible","worldAlpha","renderable","_initCachedDisplayObject","transform","_worldID","_render","display.DisplayObject.prototype._initCachedDisplayObject","cacheAlpha","alpha","batch","flush","bounds","clone","filters","pad","padding","ceil","RESOLUTION","cachedRenderTexture","renderTexture","current","cachedSourceFrame","sourceFrame","cachedDestinationFrame","destinationFrame","cachedProjectionTransform","projection","RenderTexture","create","width","height","uid","BaseTexture","addToCache","baseTexture","Texture","m","localTransform","copyTo","invert","translate","x","y","clear","skipUpdateTransform","bind","displayObjectUpdateTransform","_calculateCachedBounds","_getCachedLocalBounds","cachedSprite","Sprite","worldTransform","anchor","_bounds","_parentID","parent","enableTempParent","disableTempParent","display.DisplayObject.prototype._renderCachedCanvas","_initCachedDisplayObjectCanvas","_renderCanvas","display.DisplayObject.prototype._initCachedDisplayObjectCanvas","cachedRenderTarget","context","_projTransform","tx","ty","_tempDisplayObjectParent","display.DisplayObject.prototype._calculateCachedBounds","_calculateBounds","updateID","_boundsID","display.DisplayObject.prototype._getCachedLocalBounds","display.DisplayObject.prototype._destroyCachedDisplayObject","_texture","removeFromCache","display.DisplayObject.prototype._cacheAsBitmapDestroy","options"]
}
