{
"version":3,
"file":"module$node_modules$$pixi$loaders$dist$cjs$loaders.js",
"lineCount":6,
"mappings":"AAAAA,cAAA,CAAe,kDAAf,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAsC/GC,QAASA,UAAS,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAErBC,QAASA,GAAE,EAAG,CAAE,IAAA,CAAKC,WAAL,CAAmBH,CAArB,CADdI,aAAA,CAAcJ,CAAd,CAAiBC,CAAjB,CAEAD,EAAA,CAAEK,SAAF,CAAoB,IAAN,GAAAJ,CAAA,CAAaK,MAAA,CAAOC,MAAP,CAAcN,CAAd,CAAb,EAAiCC,EAAA,CAAGG,SAAH,CAAeJ,CAAf,CAAiBI,SAAjB,CAA4B,IAAIH,EAAjE,CAHO,CA5BzBI,MAAA,CAAOE,cAAP,CAAsBV,OAAtB,CAA+B,YAA/B,CAA6C,CAAEW,MAAO,CAAA,CAAT,CAA7C,CAEA,KAAIC,eAAiBd,OAAA,CAAQ,8DAAR,CAArB,CACIe,KAAOf,OAAA,CAAQ,8CAAR,CADX,CAmBIQ,cAAgBA,QAAQ,CAACJ,UAAD,CAAIC,UAAJ,CAAO,CAC/BG,aAAA;AAAgBE,MAAhB,CAAuBM,cAAvB,EACK,CAAEC,UAAW,EAAb,CADL,UACkCC,MADlC,EAC2C,QAAS,CAACd,CAAD,CAAIC,CAAJ,CAAO,CAAED,CAAA,CAAEa,SAAF,CAAcZ,CAAhB,CAD3D,EAEI,QAAS,CAACD,CAAD,CAAIC,CAAJ,CAAO,CAAE,IAAKc,IAAIA,CAAT,GAAcd,EAAd,CAAuBA,CAAA,CAAEe,cAAF,CAAiBD,CAAjB,CAAJ,GAA2Bf,CAAA,CAAEe,CAAF,CAA3B,CAAkCd,CAAA,CAAEc,CAAF,CAAlC,CAArB,CACpB,OAAOX,cAAA,CAAcJ,UAAd,CAAiBC,UAAjB,CAJwB,CAmB/BgB,OAAAA,CAA+B,QAAS,EAAG,CAC3CA,QAASA,cAAa,EAAG,EAKzBA,aAAA,CAAcC,GAAd,CAAoBC,QAAS,EAAG,CAC5BT,cAAA,CAAeU,QAAf,CAAwBC,oBAAxB,CAA6C,KAA7C,CAAoDX,cAApD,CAAmEU,QAAnE,CAA4EE,SAA5E,CAAsFC,GAAtF,CACAb,eAAA,CAAeU,QAAf,CAAwBI,mBAAxB,CAA4C,KAA5C,CAAmDd,cAAnD,CAAkEU,QAAlE,CAA2EK,iBAA3E,CAA6FC,IAA7F,CAF4B,CAUhCT,cAAA,CAAcU,GAAd,CAAoBC,QAAS,CAACC,QAAD,CAAWC,IAAX,CAAiB,CAEtCC,CAAAF,QAAAE,CAASA,IAAb;AAAsBF,QAAtB,CAA+BG,IAA/B,GAAwCtB,cAAxC,CAAuDU,QAAvD,CAAgEa,IAAhE,CAAqEC,KAArE,EAAqG,KAArG,GAA8EL,QAA9E,CAAuFM,SAAvF,CAWIL,IAAA,EAXJ,CAEInB,IAAA,CAAKyB,OAAL,CAAaC,UAAb,CADWR,QACX,CADoBE,IACpB,CADgCF,QAChC,CADyCS,GACzC,CADqDT,QACrD,CAD8DU,IAC9D,CAD+EV,QAC/E,CADwFW,QACxF,CAAA,CAAmDC,IAAnD,CAAwD,QAAS,CAACC,OAAD,CAAU,CACvEb,QAAA,CAASa,OAAT,CAAmBA,OACnBZ,KAAA,EAFuE,CAA3E,CAAA,CAMKa,KANL,CAMWb,IANX,CAJsC,CAgB9C,OAAOb,cAhCoC,CAAZ,EAoFnC,KAAI2B,gBAAwB,QAAS,CAACC,MAAD,CAAS,CAM1CD,QAASA,OAAM,CAACE,OAAD,CAAUC,WAAV,CAAuB,CAC9BC,OAAAA,CAAQH,MAAA,CAAOI,IAAP,CAAY,IAAZ,CAAkBH,OAAlB,CAA2BC,WAA3B,CAARC,EAAmD,IACvD,KAASE,WAAT,CAAa,CAAb,CAAgBA,WAAhB,CAAoBN,MAApB,CAA2BO,QAA3B,CAAoCC,MAApC,CAA4C,EAAEF,WAA9C,CAAiD,CAC7C,IAAIG,OAAST,MAAA,CAAOO,QAAP,CAAgBD,WAAhB,CAAb,CACII;AAAMD,MAANC,CAAaA,GAAK3B,OAAAA,CAAM0B,MAAN1B,CAAaA,GAC/B2B,IAAJ,EACIN,OAAA,CAAMM,GAAN,CAAUA,GAAV,CAEA3B,OAAJ,EACIqB,OAAA,CAAMrB,GAAN,CAAUA,MAAV,CAPyC,CAgBjDqB,OAAA,CAAMO,UAAN,CAAmB,CAAA,CACnB,OAAOP,QAnB2B,CALtCjD,SAAA,CAAU6C,MAAV,CAAkBC,MAAlB,CAgCAD,OAAA,CAAOvC,SAAP,CAAiBmD,OAAjB,CAA2BC,QAAS,EAAG,CAC9B,IAAL,CAAUF,UAAV,EACI,IAAA,CAAKG,KAAL,EAF+B,CAKvCpD,OAAA,CAAOE,cAAP,CAAsBoC,MAAtB,CAA8B,QAA9B,CAAwC,CAQpCe,IAAKA,QAAS,EAAG,CACb,IAAIC,OAAShB,MAATgB,CAAgBC,OACfD,OAAL,GACIA,MAEA,CAFS,IAAIhB,MAEb,CADAgB,MACA,CADOL,UACP,CADoB,CAAA,CACpB,CAAAX,MAAA,CAAOiB,OAAP,CAAiBD,MAHrB,CAKA,OAAOA,OAPM,CARmB,CAiBpCE,WAAY,CAAA,CAjBwB,CAkBpCC,aAAc,CAAA,CAlBsB,CAAxC,CA8BAnB,OAAA,CAAOoB,cAAP,CAAwBC,QAAS,CAACZ,MAAD,CAAS,CACtCT,MAAA,CAAOO,QAAP,CAAgBe,IAAhB,CAAqBb,MAArB,CACIA,OAAJ,CAAWnC,GAAX,EACImC,MAAA,CAAOnC,GAAP,EAEJ,OAAO0B,OAL+B,CAe1CA;MAAA,CAAOO,QAAP,CAAkB,EAClB,OAAOP,OApFmC,CAAlB,CAqF1BlC,cArF0B,CAqFXkC,MArFW,CAuF5BA,gBAAA,CAAOoB,cAAP,CAAsB,CAAErC,IAAKjB,cAALiB,CAAoBwC,UAApBxC,CAA+ByC,OAAjC,CAAtB,CAEAxB,gBAAA,CAAOoB,cAAP,CAAsB/C,MAAtB,CAmFIoD,QAAAA,CAAiC,QAAS,EAAG,CAC7CA,QAASA,gBAAe,EAAG,EAO3BA,eAAA,CAAgBC,IAAhB,CAAuBC,QAAS,CAACC,OAAD,CAAU,CACtCA,OAAA,CAAUlE,MAAA,CAAOmE,MAAP,CAAc,CACpBC,aAAc,CAAA,CADM,CAAd,CAEPF,OAFO,CASV,KAAA,CAAKG,MAAL,CAAcH,OAAA,CAAQE,YAAR,CAAuB9B,eAAvB,CAA8BgB,MAA9B,CAAuC,IAAIhB,eAVnB,CAiB1CyB,gBAAA,CAAgBb,OAAhB,CAA0BoB,QAAS,EAAG,CAC9B,IAAJ,CAASD,MAAT,GACI,IAAA,CAAKA,MAAL,CAAYnB,OAAZ,EACA,CAAA,IAAA,CAAKmB,MAAL,CAAc,IAFlB,CADkC,CAMtC,OAAON,gBA/BsC,CAAZ,EAwCjCQ,OAAAA;AAAiBnE,cAAjBmE,CAAgCzD,QAEpCtB,QAAA,CAAQuE,eAAR,CAA0BA,OAC1BvE,QAAA,CAAQ8C,MAAR,CAAiBA,eACjB9C,QAAA,CAAQ+E,cAAR,CAAyBA,MACzB/E,QAAA,CAAQmB,aAAR,CAAwBA,MA/VuF;",
"sources":["node_modules/@pixi/loaders/dist/cjs/loaders.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$loaders$dist$cjs$loaders\"] = function(global,require,module,exports) {\n/*!\n * @pixi/loaders - v6.0.4\n * Compiled Tue, 11 May 2021 18:00:23 UTC\n *\n * @pixi/loaders is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar resourceLoader = require('resource-loader');\nvar core = require('@pixi/core');\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * Loader plugin for handling Texture resources.\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nvar TextureLoader = /** @class */ (function () {\n    function TextureLoader() {\n    }\n    /**\n     * Handle SVG elements a text, render with SVGResource.\n     */\n    TextureLoader.add = function () {\n        resourceLoader.Resource.setExtensionLoadType('svg', resourceLoader.Resource.LOAD_TYPE.XHR);\n        resourceLoader.Resource.setExtensionXhrType('svg', resourceLoader.Resource.XHR_RESPONSE_TYPE.TEXT);\n    };\n    /**\n     * Called after a resource is loaded.\n     * @see PIXI.Loader.loaderMiddleware\n     * @param {PIXI.LoaderResource} resource\n     * @param {function} next\n     */\n    TextureLoader.use = function (resource, next) {\n        // create a new texture if the data is an Image object\n        if (resource.data && (resource.type === resourceLoader.Resource.TYPE.IMAGE || resource.extension === 'svg')) {\n            var data = resource.data, url = resource.url, name = resource.name, metadata = resource.metadata;\n            core.Texture.fromLoader(data, url, name, metadata).then(function (texture) {\n                resource.texture = texture;\n                next();\n            })\n                // TODO: handle errors in Texture.fromLoader\n                // so we can pass them to the Loader\n                .catch(next);\n        }\n        else {\n            next();\n        }\n    };\n    return TextureLoader;\n}());\n\n/**\n * The new loader, extends Resource Loader by Chad Engler: https://github.com/englercj/resource-loader\n *\n * ```js\n * const loader = PIXI.Loader.shared; // PixiJS exposes a premade instance for you to use.\n * //or\n * const loader = new PIXI.Loader(); // you can also create your own if you want\n *\n * const sprites = {};\n *\n * // Chainable `add` to enqueue a resource\n * loader.add('bunny', 'data/bunny.png')\n *       .add('spaceship', 'assets/spritesheet.json');\n * loader.add('scoreFont', 'assets/score.fnt');\n *\n * // Chainable `pre` to add a middleware that runs for each resource, *before* loading that resource.\n * // This is useful to implement custom caching modules (using filesystem, indexeddb, memory, etc).\n * loader.pre(cachingMiddleware);\n *\n * // Chainable `use` to add a middleware that runs for each resource, *after* loading that resource.\n * // This is useful to implement custom parsing modules (like spritesheet parsers, spine parser, etc).\n * loader.use(parsingMiddleware);\n *\n * // The `load` method loads the queue of resources, and calls the passed in callback called once all\n * // resources have loaded.\n * loader.load((loader, resources) => {\n *     // resources is an object where the key is the name of the resource loaded and the value is the resource object.\n *     // They have a couple default properties:\n *     // - `url`: The URL that the resource was loaded from\n *     // - `error`: The error that happened when trying to load (if any)\n *     // - `data`: The raw data that was loaded\n *     // also may contain other properties based on the middleware that runs.\n *     sprites.bunny = new PIXI.TilingSprite(resources.bunny.texture);\n *     sprites.spaceship = new PIXI.TilingSprite(resources.spaceship.texture);\n *     sprites.scoreFont = new PIXI.TilingSprite(resources.scoreFont.texture);\n * });\n *\n * // throughout the process multiple signals can be dispatched.\n * loader.onProgress.add(() => {}); // called once per loaded/errored file\n * loader.onError.add(() => {}); // called once per errored file\n * loader.onLoad.add(() => {}); // called once per loaded file\n * loader.onComplete.add(() => {}); // called once when the queued resources all load.\n * ```\n *\n * @see https://github.com/englercj/resource-loader\n *\n * @class Loader\n * @memberof PIXI\n */\nvar Loader = /** @class */ (function (_super) {\n    __extends(Loader, _super);\n    /**\n     * @param {string} [baseUrl=''] - The base url for all resources loaded by this loader.\n     * @param {number} [concurrency=10] - The number of resources to load concurrently.\n     */\n    function Loader(baseUrl, concurrency) {\n        var _this = _super.call(this, baseUrl, concurrency) || this;\n        for (var i = 0; i < Loader._plugins.length; ++i) {\n            var plugin = Loader._plugins[i];\n            var pre = plugin.pre, use = plugin.use;\n            if (pre) {\n                _this.pre(pre);\n            }\n            if (use) {\n                _this.use(use);\n            }\n        }\n        /**\n         * If this loader cannot be destroyed.\n         * @member {boolean}\n         * @default false\n         * @private\n         */\n        _this._protected = false;\n        return _this;\n    }\n    /**\n     * Destroy the loader, removes references.\n     * @memberof PIXI.Loader#\n     * @method destroy\n     * @public\n     */\n    Loader.prototype.destroy = function () {\n        if (!this._protected) {\n            this.reset();\n        }\n    };\n    Object.defineProperty(Loader, \"shared\", {\n        /**\n         * A premade instance of the loader that can be used to load resources.\n         * @name shared\n         * @type {PIXI.Loader}\n         * @static\n         * @memberof PIXI.Loader\n         */\n        get: function () {\n            var shared = Loader._shared;\n            if (!shared) {\n                shared = new Loader();\n                shared._protected = true;\n                Loader._shared = shared;\n            }\n            return shared;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Adds a Loader plugin for the global shared loader and all\n     * new Loader instances created.\n     *\n     * @static\n     * @method registerPlugin\n     * @memberof PIXI.Loader\n     * @param {PIXI.ILoaderPlugin} plugin - The plugin to add\n     * @return {PIXI.Loader} Reference to PIXI.Loader for chaining\n     */\n    Loader.registerPlugin = function (plugin) {\n        Loader._plugins.push(plugin);\n        if (plugin.add) {\n            plugin.add();\n        }\n        return Loader;\n    };\n    /**\n     * Collection of all installed `use` middleware for Loader.\n     *\n     * @static\n     * @member {Array<PIXI.ILoaderPlugin>} _plugins\n     * @memberof PIXI.Loader\n     * @private\n     */\n    Loader._plugins = [];\n    return Loader;\n}(resourceLoader.Loader));\n// parse any blob into more usable objects (e.g. Image)\nLoader.registerPlugin({ use: resourceLoader.middleware.parsing });\n// parse any Image objects into textures\nLoader.registerPlugin(TextureLoader);\n/**\n * Plugin to be installed for handling specific Loader resources.\n *\n * @memberof PIXI\n * @typedef {object} ILoaderPlugin\n * @property {function} [add] - Function to call immediate after registering plugin.\n * @property {PIXI.Loader.loaderMiddleware} [pre] - Middleware function to run before load, the\n *           arguments for this are `(resource, next)`\n * @property {PIXI.Loader.loaderMiddleware} [use] - Middleware function to run after load, the\n *           arguments for this are `(resource, next)`\n */\n/**\n * @memberof PIXI.Loader\n * @typedef {object} ICallbackID\n */\n/**\n * @memberof PIXI.Loader\n * @typedef {function} ISignalCallback\n * @param {function} callback - Callback function\n * @param {object} [context] - Context\n * @returns {ICallbackID} - CallbackID\n */\n/**\n * @memberof PIXI.Loader\n * @typedef {function} ISignalDetach\n * @param {ICallbackID} id - CallbackID returned by `add`/`once` methods\n */\n/**\n * @memberof PIXI.Loader\n * @typedef {object} ILoaderSignal\n * @property {ISignalCallback} add - Register callback\n * @property {ISignalCallback} once - Register oneshot callback\n * @property {ISignalDetach} detach - Detach specific callback by ID\n */\n/**\n * Callback\n * @memberof PIXI.Loader\n * @typedef {function} loaderMiddleware\n * @param {PIXI.LoaderResource} resource\n * @param {function} next\n */\n/**\n * Dispatched when the loader begins to loading process.\n * @name onStart\n * @memberof PIXI.Loader#\n * @member {PIXI.Loader.ILoaderSignal}\n */\n/**\n * Dispatched once per loaded or errored resource.\n * @name onProgress\n * @memberof PIXI.Loader#\n * @member {PIXI.Loader.ILoaderSignal} onProgress\n */\n/**\n * Dispatched once per errored resource.\n * @name onError\n * @memberof PIXI.Loader#\n * @member {PIXI.Loader.ILoaderSignal}\n */\n/**\n * Dispatched once per loaded resource.\n * @name onLoad\n * @memberof PIXI.Loader#\n * @member {PIXI.Loader.ILoaderSignal}\n */\n/**\n * Dispatched when completely loaded all resources.\n * @name onComplete\n * @memberof PIXI.Loader#\n * @member {PIXI.Loader.ILoaderSignal}\n */\n\n/**\n * Application plugin for supporting loader option. Installing the LoaderPlugin\n * is not necessary if using **pixi.js** or **pixi.js-legacy**.\n * @example\n * import {AppLoaderPlugin} from '@pixi/loaders';\n * import {Application} from '@pixi/app';\n * Application.registerPlugin(AppLoaderPlugin);\n * @class\n * @memberof PIXI\n */\nvar AppLoaderPlugin = /** @class */ (function () {\n    function AppLoaderPlugin() {\n    }\n    /**\n     * Called on application constructor\n     * @param {object} options\n     * @private\n     */\n    AppLoaderPlugin.init = function (options) {\n        options = Object.assign({\n            sharedLoader: false,\n        }, options);\n        /**\n         * Loader instance to help with asset loading.\n         * @memberof PIXI.Application#\n         * @type {PIXI.Loader}\n         * @readonly\n         */\n        this.loader = options.sharedLoader ? Loader.shared : new Loader();\n    };\n    /**\n     * Called when application destroyed\n     *\n     * @private\n     */\n    AppLoaderPlugin.destroy = function () {\n        if (this.loader) {\n            this.loader.destroy();\n            this.loader = null;\n        }\n    };\n    return AppLoaderPlugin;\n}());\n\n/**\n* Reference to **{@link https://github.com/englercj/resource-loader}**'s Resource class.\n* @see https://englercj.github.io/resource-loader/classes/resource.html\n* @class LoaderResource\n* @memberof PIXI\n*/\nvar LoaderResource = resourceLoader.Resource;\n\nexports.AppLoaderPlugin = AppLoaderPlugin;\nexports.Loader = Loader;\nexports.LoaderResource = LoaderResource;\nexports.TextureLoader = TextureLoader;\n//# sourceMappingURL=loaders.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","defineProperty","value","resourceLoader","core","setPrototypeOf","__proto__","Array","p","hasOwnProperty","TextureLoader","add","TextureLoader.add","Resource","setExtensionLoadType","LOAD_TYPE","XHR","setExtensionXhrType","XHR_RESPONSE_TYPE","TEXT","use","TextureLoader.use","resource","next","data","type","TYPE","IMAGE","extension","Texture","fromLoader","url","name","metadata","then","texture","catch","Loader","_super","baseUrl","concurrency","_this","call","i","_plugins","length","plugin","pre","_protected","destroy","Loader.prototype.destroy","reset","get","shared","_shared","enumerable","configurable","registerPlugin","Loader.registerPlugin","push","middleware","parsing","AppLoaderPlugin","init","AppLoaderPlugin.init","options","assign","sharedLoader","loader","AppLoaderPlugin.destroy","LoaderResource"]
}
