{
"version":3,
"file":"module$node_modules$$pixi$spritesheet$dist$cjs$spritesheet.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/@pixi/spritesheet/dist/cjs/spritesheet.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$spritesheet$dist$cjs$spritesheet\"] = function(global,require,module,exports) {\n/*!\n * @pixi/spritesheet - v6.1.1\n * Compiled Fri, 06 Aug 2021 03:30:25 UTC\n *\n * @pixi/spritesheet is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar math = require('@pixi/math');\nvar core = require('@pixi/core');\nvar utils = require('@pixi/utils');\nvar loaders = require('@pixi/loaders');\n\n/**\n * Utility class for maintaining reference to a collection\n * of Textures on a single Spritesheet.\n *\n * To access a sprite sheet from your code pass its JSON data file to Pixi's loader:\n *\n * ```js\n * PIXI.Loader.shared.add(\"images/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"images/spritesheet.json\"].spritesheet;\n *   ...\n * }\n * ```\n * With the `sheet.textures` you can create Sprite objects,`sheet.animations` can be used to create an AnimatedSprite.\n *\n * Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},\n * {@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.\n * Default anchor points (see {@link PIXI.Texture#defaultAnchor}) and grouping of animation sprites are currently only\n * supported by TexturePacker.\n *\n * @class\n * @memberof PIXI\n */\nvar Spritesheet = /** @class */ (function () {\n    /**\n     * @param {PIXI.BaseTexture|PIXI.Texture} baseTexture - Reference to the source BaseTexture object.\n     * @param {Object} data - Spritesheet image data.\n     * @param {string} [resolutionFilename] - The filename to consider when determining\n     *        the resolution of the spritesheet. If not provided, the imageUrl will\n     *        be used on the BaseTexture.\n     */\n    function Spritesheet(texture, data, resolutionFilename) {\n        if (resolutionFilename === void 0) { resolutionFilename = null; }\n        /**\n         * Reference to original source image from the Loader. This reference is retained so we\n         * can destroy the Texture later on. It is never used internally.\n         * @type {PIXI.Texture}\n         * @private\n         */\n        this._texture = texture instanceof core.Texture ? texture : null;\n        /**\n         * Reference to ths source texture.\n         * @type {PIXI.BaseTexture}\n         */\n        this.baseTexture = texture instanceof core.BaseTexture ? texture : this._texture.baseTexture;\n        /**\n         * A map containing all textures of the sprite sheet.\n         * Can be used to create a {@link PIXI.Sprite|Sprite}:\n         * ```js\n         * new PIXI.Sprite(sheet.textures[\"image.png\"]);\n         * ```\n         * @member {Object}\n         */\n        this.textures = {};\n        /**\n         * A map containing the textures for each animation.\n         * Can be used to create an {@link PIXI.AnimatedSprite|AnimatedSprite}:\n         * ```js\n         * new PIXI.AnimatedSprite(sheet.animations[\"anim_name\"])\n         * ```\n         * @member {Object}\n         */\n        this.animations = {};\n        /**\n         * Reference to the original JSON data.\n         * @type {Object}\n         */\n        this.data = data;\n        var resource = this.baseTexture.resource;\n        /**\n         * The resolution of the spritesheet.\n         * @type {number}\n         */\n        this.resolution = this._updateResolution(resolutionFilename || (resource ? resource.url : null));\n        /**\n         * Map of spritesheet frames.\n         * @type {Object}\n         * @private\n         */\n        this._frames = this.data.frames;\n        /**\n         * Collection of frame names.\n         * @type {string[]}\n         * @private\n         */\n        this._frameKeys = Object.keys(this._frames);\n        /**\n         * Current batch index being processed.\n         * @type {number}\n         * @private\n         */\n        this._batchIndex = 0;\n        /**\n         * Callback when parse is completed.\n         * @type {Function}\n         * @private\n         */\n        this._callback = null;\n    }\n    /**\n     * Generate the resolution from the filename or fallback\n     * to the meta.scale field of the JSON data.\n     *\n     * @private\n     * @param {string} resolutionFilename - The filename to use for resolving\n     *        the default resolution.\n     * @return {number} Resolution to use for spritesheet.\n     */\n    Spritesheet.prototype._updateResolution = function (resolutionFilename) {\n        if (resolutionFilename === void 0) { resolutionFilename = null; }\n        var scale = this.data.meta.scale;\n        // Use a defaultValue of `null` to check if a url-based resolution is set\n        var resolution = utils.getResolutionOfUrl(resolutionFilename, null);\n        // No resolution found via URL\n        if (resolution === null) {\n            // Use the scale value or default to 1\n            resolution = scale !== undefined ? parseFloat(scale) : 1;\n        }\n        // For non-1 resolutions, update baseTexture\n        if (resolution !== 1) {\n            this.baseTexture.setResolution(resolution);\n        }\n        return resolution;\n    };\n    /**\n     * Parser spritesheet from loaded data. This is done asynchronously\n     * to prevent creating too many Texture within a single process.\n     *\n     * @param {Function} callback - Callback when complete returns\n     *        a map of the Textures for this spritesheet.\n     */\n    Spritesheet.prototype.parse = function (callback) {\n        this._batchIndex = 0;\n        this._callback = callback;\n        if (this._frameKeys.length <= Spritesheet.BATCH_SIZE) {\n            this._processFrames(0);\n            this._processAnimations();\n            this._parseComplete();\n        }\n        else {\n            this._nextBatch();\n        }\n    };\n    /**\n     * Process a batch of frames\n     *\n     * @private\n     * @param {number} initialFrameIndex - The index of frame to start.\n     */\n    Spritesheet.prototype._processFrames = function (initialFrameIndex) {\n        var frameIndex = initialFrameIndex;\n        var maxFrames = Spritesheet.BATCH_SIZE;\n        while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length) {\n            var i = this._frameKeys[frameIndex];\n            var data = this._frames[i];\n            var rect = data.frame;\n            if (rect) {\n                var frame = null;\n                var trim = null;\n                var sourceSize = data.trimmed !== false && data.sourceSize\n                    ? data.sourceSize : data.frame;\n                var orig = new math.Rectangle(0, 0, Math.floor(sourceSize.w) / this.resolution, Math.floor(sourceSize.h) / this.resolution);\n                if (data.rotated) {\n                    frame = new math.Rectangle(Math.floor(rect.x) / this.resolution, Math.floor(rect.y) / this.resolution, Math.floor(rect.h) / this.resolution, Math.floor(rect.w) / this.resolution);\n                }\n                else {\n                    frame = new math.Rectangle(Math.floor(rect.x) / this.resolution, Math.floor(rect.y) / this.resolution, Math.floor(rect.w) / this.resolution, Math.floor(rect.h) / this.resolution);\n                }\n                //  Check to see if the sprite is trimmed\n                if (data.trimmed !== false && data.spriteSourceSize) {\n                    trim = new math.Rectangle(Math.floor(data.spriteSourceSize.x) / this.resolution, Math.floor(data.spriteSourceSize.y) / this.resolution, Math.floor(rect.w) / this.resolution, Math.floor(rect.h) / this.resolution);\n                }\n                this.textures[i] = new core.Texture(this.baseTexture, frame, orig, trim, data.rotated ? 2 : 0, data.anchor);\n                // lets also add the frame to pixi's global cache for 'from' and 'fromLoader' functions\n                core.Texture.addToCache(this.textures[i], i);\n            }\n            frameIndex++;\n        }\n    };\n    /**\n     * Parse animations config\n     *\n     * @private\n     */\n    Spritesheet.prototype._processAnimations = function () {\n        var animations = this.data.animations || {};\n        for (var animName in animations) {\n            this.animations[animName] = [];\n            for (var i = 0; i < animations[animName].length; i++) {\n                var frameName = animations[animName][i];\n                this.animations[animName].push(this.textures[frameName]);\n            }\n        }\n    };\n    /**\n     * The parse has completed.\n     *\n     * @private\n     */\n    Spritesheet.prototype._parseComplete = function () {\n        var callback = this._callback;\n        this._callback = null;\n        this._batchIndex = 0;\n        callback.call(this, this.textures);\n    };\n    /**\n     * Begin the next batch of textures.\n     *\n     * @private\n     */\n    Spritesheet.prototype._nextBatch = function () {\n        var _this = this;\n        this._processFrames(this._batchIndex * Spritesheet.BATCH_SIZE);\n        this._batchIndex++;\n        setTimeout(function () {\n            if (_this._batchIndex * Spritesheet.BATCH_SIZE < _this._frameKeys.length) {\n                _this._nextBatch();\n            }\n            else {\n                _this._processAnimations();\n                _this._parseComplete();\n            }\n        }, 0);\n    };\n    /**\n     * Destroy Spritesheet and don't use after this.\n     *\n     * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n     */\n    Spritesheet.prototype.destroy = function (destroyBase) {\n        var _a;\n        if (destroyBase === void 0) { destroyBase = false; }\n        for (var i in this.textures) {\n            this.textures[i].destroy();\n        }\n        this._frames = null;\n        this._frameKeys = null;\n        this.data = null;\n        this.textures = null;\n        if (destroyBase) {\n            (_a = this._texture) === null || _a === void 0 ? void 0 : _a.destroy();\n            this.baseTexture.destroy();\n        }\n        this._texture = null;\n        this.baseTexture = null;\n    };\n    /**\n     * The maximum number of Textures to build per process.\n     *\n     * @type {number}\n     * @default 1000\n     */\n    Spritesheet.BATCH_SIZE = 1000;\n    return Spritesheet;\n}());\n/**\n * Reference to Spritesheet object created.\n * @member {PIXI.Spritesheet} spritesheet\n * @memberof PIXI.LoaderResource\n * @instance\n */\n/**\n * Dictionary of textures from Spritesheet.\n * @member {object<string, PIXI.Texture>} textures\n * @memberof PIXI.LoaderResource\n * @instance\n */\n\n/**\n * {@link PIXI.Loader} middleware for loading texture atlases that have been created with\n * TexturePacker or similar JSON-based spritesheet.\n *\n * This middleware automatically generates Texture resources.\n *\n * If you're using Webpack or other bundlers and plan on bundling the atlas' JSON,\n * use the {@link PIXI.Spritesheet} class to directly parse the JSON.\n *\n * The Loader's image Resource name is automatically appended with `\"_image\"`.\n * If a Resource with this name is already loaded, the Loader will skip parsing the\n * Spritesheet. The code below will generate an internal Loader Resource called `\"myatlas_image\"`.\n *\n * @example\n * loader.add('myatlas', 'path/to/myatlas.json');\n * loader.load(() => {\n *   loader.resources.myatlas; // atlas JSON resource\n *   loader.resources.myatlas_image; // atlas Image resource\n * });\n *\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nvar SpritesheetLoader = /** @class */ (function () {\n    function SpritesheetLoader() {\n    }\n    /**\n     * Called after a resource is loaded.\n     * @see PIXI.Loader.loaderMiddleware\n     * @param {PIXI.LoaderResource} resource\n     * @param {function} next\n     */\n    SpritesheetLoader.use = function (resource, next) {\n        var _a, _b;\n        // because this is middleware, it execute in loader context. `this` = loader\n        var loader = this;\n        var imageResourceName = resource.name + \"_image\";\n        // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n        if (!resource.data\n            || resource.type !== loaders.LoaderResource.TYPE.JSON\n            || !resource.data.frames\n            || loader.resources[imageResourceName]) {\n            next();\n            return;\n        }\n        // Check and add the multi atlas\n        // Heavily influenced and based on https://github.com/rocket-ua/pixi-tps-loader/blob/master/src/ResourceLoader.js\n        // eslint-disable-next-line camelcase\n        var multiPacks = (_b = (_a = resource.data) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.related_multi_packs;\n        if (Array.isArray(multiPacks)) {\n            var _loop_1 = function (item) {\n                if (typeof item !== 'string') {\n                    return \"continue\";\n                }\n                var itemName = item.replace('.json', '');\n                var itemUrl = utils.url.resolve(resource.url.replace(loader.baseUrl, ''), item);\n                // Check if the file wasn't already added as multipacks are redundant\n                if (loader.resources[itemName]\n                    || Object.values(loader.resources).some(function (r) { return utils.url.format(utils.url.parse(r.url)) === itemUrl; })) {\n                    return \"continue\";\n                }\n                var options = {\n                    crossOrigin: resource.crossOrigin,\n                    loadType: loaders.LoaderResource.LOAD_TYPE.XHR,\n                    xhrType: loaders.LoaderResource.XHR_RESPONSE_TYPE.JSON,\n                    parentResource: resource,\n                };\n                loader.add(itemName, itemUrl, options);\n            };\n            for (var _i = 0, multiPacks_1 = multiPacks; _i < multiPacks_1.length; _i++) {\n                var item = multiPacks_1[_i];\n                _loop_1(item);\n            }\n        }\n        var loadOptions = {\n            crossOrigin: resource.crossOrigin,\n            metadata: resource.metadata.imageMetadata,\n            parentResource: resource,\n        };\n        var resourcePath = SpritesheetLoader.getResourcePath(resource, loader.baseUrl);\n        // load the image for this sheet\n        loader.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res) {\n            if (res.error) {\n                next(res.error);\n                return;\n            }\n            var spritesheet = new Spritesheet(res.texture, resource.data, resource.url);\n            spritesheet.parse(function () {\n                resource.spritesheet = spritesheet;\n                resource.textures = spritesheet.textures;\n                next();\n            });\n        });\n    };\n    /**\n     * Get the spritesheets root path\n     * @param {PIXI.LoaderResource} resource - Resource to check path\n     * @param {string} baseUrl - Base root url\n     */\n    SpritesheetLoader.getResourcePath = function (resource, baseUrl) {\n        // Prepend url path unless the resource image is a data url\n        if (resource.isDataUrl) {\n            return resource.data.meta.image;\n        }\n        return utils.url.resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);\n    };\n    return SpritesheetLoader;\n}());\n\nexports.Spritesheet = Spritesheet;\nexports.SpritesheetLoader = SpritesheetLoader;\n//# sourceMappingURL=spritesheet.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","math","core","utils","loaders","Spritesheet","texture","data","resolutionFilename","_texture","Texture","baseTexture","BaseTexture","textures","animations","resource","resolution","_updateResolution","url","_frames","frames","_frameKeys","keys","_batchIndex","_callback","prototype","Spritesheet.prototype._updateResolution","scale","meta","getResolutionOfUrl","undefined","parseFloat","setResolution","parse","Spritesheet.prototype.parse","callback","length","BATCH_SIZE","_processFrames","_processAnimations","_parseComplete","_nextBatch","Spritesheet.prototype._processFrames","initialFrameIndex","frameIndex","maxFrames","i","rect","frame","trim","sourceSize","trimmed","orig","Rectangle","Math","floor","w","h","rotated","x","y","spriteSourceSize","anchor","addToCache","Spritesheet.prototype._processAnimations","animName","push","frameName","Spritesheet.prototype._parseComplete","call","Spritesheet.prototype._nextBatch","_this","setTimeout","destroy","Spritesheet.prototype.destroy","destroyBase","_a","SpritesheetLoader","use","SpritesheetLoader.use","next","_b","loader","imageResourceName","name","type","LoaderResource","TYPE","JSON","resources","multiPacks","related_multi_packs","Array","isArray","_loop_1","_i","item","itemName","replace","itemUrl","resolve","baseUrl","values","some","r","format","add","options","crossOrigin","loadType","LOAD_TYPE","XHR","xhrType","XHR_RESPONSE_TYPE","parentResource","loadOptions","metadata","imageMetadata","resourcePath","getResourcePath","onImageLoad","res","error","spritesheet","SpritesheetLoader.getResourcePath","isDataUrl","image"]
}
