{
"version":3,
"file":"module$node_modules$$pixi$extract$dist$cjs$extract.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/@pixi/extract/dist/cjs/extract.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$extract$dist$cjs$extract\"] = function(global,require,module,exports) {\n/*!\n * @pixi/extract - v6.0.4\n * Compiled Tue, 11 May 2021 18:00:23 UTC\n *\n * @pixi/extract is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('@pixi/utils');\nvar math = require('@pixi/math');\nvar core = require('@pixi/core');\n\nvar TEMP_RECT = new math.Rectangle();\nvar BYTES_PER_PIXEL = 4;\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new app (will auto-add extract plugin to renderer)\n * const app = new PIXI.Application();\n *\n * // Draw a red circle\n * const graphics = new PIXI.Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = app.renderer.plugins.extract.image(graphics);\n * document.body.appendChild(image);\n * @class\n * @memberof PIXI\n */\nvar Extract = /** @class */ (function () {\n    /**\n     * @param {PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    function Extract(renderer) {\n        this.renderer = renderer;\n    }\n    /**\n     * Will return a HTML Image of the target\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {HTMLImageElement} HTML Image of the target\n     */\n    Extract.prototype.image = function (target, format, quality) {\n        var image = new Image();\n        image.src = this.base64(target, format, quality);\n        return image;\n    };\n    /**\n     * Will return a a base64 encoded string of this target. It works by calling\n     *  `Extract.getCanvas` and then running toDataURL on that.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {string} A base64 encoded string of the texture.\n     */\n    Extract.prototype.base64 = function (target, format, quality) {\n        return this.canvas(target).toDataURL(format, quality);\n    };\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n     */\n    Extract.prototype.canvas = function (target) {\n        var renderer = this.renderer;\n        var resolution;\n        var frame;\n        var flipY = false;\n        var renderTexture;\n        var generated = false;\n        if (target) {\n            if (target instanceof core.RenderTexture) {\n                renderTexture = target;\n            }\n            else {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n        if (renderTexture) {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = renderTexture.frame;\n            flipY = false;\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else {\n            resolution = this.renderer.resolution;\n            flipY = true;\n            frame = TEMP_RECT;\n            frame.width = this.renderer.width;\n            frame.height = this.renderer.height;\n            renderer.renderTexture.bind(null);\n        }\n        var width = Math.floor((frame.width * resolution) + 1e-4);\n        var height = Math.floor((frame.height * resolution) + 1e-4);\n        var canvasBuffer = new utils.CanvasRenderTarget(width, height, 1);\n        var webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n        // read pixels to the array\n        var gl = renderer.gl;\n        gl.readPixels(frame.x * resolution, frame.y * resolution, width, height, gl.RGBA, gl.UNSIGNED_BYTE, webglPixels);\n        // add the pixels to the canvas\n        var canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n        Extract.arrayPostDivide(webglPixels, canvasData.data);\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n        // pulling pixels\n        if (flipY) {\n            var target_1 = new utils.CanvasRenderTarget(canvasBuffer.width, canvasBuffer.height, 1);\n            target_1.context.scale(1, -1);\n            // we can't render to itself because we should be empty before render.\n            target_1.context.drawImage(canvasBuffer.canvas, 0, -height);\n            canvasBuffer.destroy();\n            canvasBuffer = target_1;\n        }\n        if (generated) {\n            renderTexture.destroy(true);\n        }\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    };\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {Uint8Array} One-dimensional array containing the pixel data of the entire texture\n     */\n    Extract.prototype.pixels = function (target) {\n        var renderer = this.renderer;\n        var resolution;\n        var frame;\n        var renderTexture;\n        var generated = false;\n        if (target) {\n            if (target instanceof core.RenderTexture) {\n                renderTexture = target;\n            }\n            else {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n        if (renderTexture) {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = renderTexture.frame;\n            // bind the buffer\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else {\n            resolution = renderer.resolution;\n            frame = TEMP_RECT;\n            frame.width = renderer.width;\n            frame.height = renderer.height;\n            renderer.renderTexture.bind(null);\n        }\n        var width = frame.width * resolution;\n        var height = frame.height * resolution;\n        var webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n        // read pixels to the array\n        var gl = renderer.gl;\n        gl.readPixels(frame.x * resolution, frame.y * resolution, width, height, gl.RGBA, gl.UNSIGNED_BYTE, webglPixels);\n        if (generated) {\n            renderTexture.destroy(true);\n        }\n        Extract.arrayPostDivide(webglPixels, webglPixels);\n        return webglPixels;\n    };\n    /**\n     * Destroys the extract\n     *\n     */\n    Extract.prototype.destroy = function () {\n        this.renderer = null;\n    };\n    /**\n     * Takes premultiplied pixel data and produces regular pixel data\n     *\n     * @private\n     * @param {number[] | Uint8Array | Uint8ClampedArray} pixels - array of pixel data\n     * @param {number[] | Uint8Array | Uint8ClampedArray} out - output array\n     */\n    Extract.arrayPostDivide = function (pixels, out) {\n        for (var i = 0; i < pixels.length; i += 4) {\n            var alpha = out[i + 3] = pixels[i + 3];\n            if (alpha !== 0) {\n                out[i] = Math.round(Math.min(pixels[i] * 255.0 / alpha, 255.0));\n                out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255.0 / alpha, 255.0));\n                out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255.0 / alpha, 255.0));\n            }\n            else {\n                out[i] = pixels[i];\n                out[i + 1] = pixels[i + 1];\n                out[i + 2] = pixels[i + 2];\n            }\n        }\n    };\n    return Extract;\n}());\n\nexports.Extract = Extract;\n//# sourceMappingURL=extract.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","utils","math","core","TEMP_RECT","Rectangle","Extract","renderer","prototype","image","Extract.prototype.image","target","format","quality","Image","src","base64","Extract.prototype.base64","canvas","toDataURL","Extract.prototype.canvas","generated","RenderTexture","renderTexture","generateTexture","resolution","baseTexture","frame","flipY","bind","width","height","Math","floor","canvasBuffer","CanvasRenderTarget","webglPixels","Uint8Array","BYTES_PER_PIXEL","gl","readPixels","x","y","RGBA","UNSIGNED_BYTE","canvasData","context","getImageData","arrayPostDivide","data","putImageData","target_1","scale","drawImage","destroy","pixels","Extract.prototype.pixels","Extract.prototype.destroy","Extract.arrayPostDivide","out","i","length","alpha","round","min"]
}
