{
"version":3,
"file":"module$node_modules$$pixi$sprite_tiling$dist$cjs$sprite_tiling.js",
"lineCount":16,
"mappings":"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",
"sources":["node_modules/@pixi/sprite-tiling/dist/cjs/sprite-tiling.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$sprite_tiling$dist$cjs$sprite_tiling\"] = function(global,require,module,exports) {\n/*!\n * @pixi/sprite-tiling - v6.0.4\n * Compiled Tue, 11 May 2021 18:00:23 UTC\n *\n * @pixi/sprite-tiling is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar core = require('@pixi/core');\nvar math = require('@pixi/math');\nvar sprite = require('@pixi/sprite');\nvar constants = require('@pixi/constants');\nvar utils = require('@pixi/utils');\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\nvar tempPoint = new math.Point();\n/**\n * A tiling sprite is a fast way of rendering a tiling image.\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\nvar TilingSprite = /** @class */ (function (_super) {\n    __extends(TilingSprite, _super);\n    /**\n     * @param {PIXI.Texture} texture - the texture of the tiling sprite\n     * @param {number} [width=100] - the width of the tiling sprite\n     * @param {number} [height=100] - the height of the tiling sprite\n     */\n    function TilingSprite(texture, width, height) {\n        if (width === void 0) { width = 100; }\n        if (height === void 0) { height = 100; }\n        var _this = _super.call(this, texture) || this;\n        /**\n         * Tile transform\n         *\n         * @member {PIXI.Transform}\n         */\n        _this.tileTransform = new math.Transform();\n        /**\n         * The with of the tiling sprite\n         *\n         * @member {number}\n         * @private\n         */\n        _this._width = width;\n        /**\n         * The height of the tiling sprite\n         *\n         * @member {number}\n         * @private\n         */\n        _this._height = height;\n        /**\n         * matrix that is applied to UV to get the coords in Texture normalized space to coords in BaseTexture space\n         *\n         * @member {PIXI.TextureMatrix}\n         */\n        _this.uvMatrix = _this.texture.uvMatrix || new core.TextureMatrix(texture);\n        /**\n         * Plugin that is responsible for rendering this element.\n         * Allows to customize the rendering process without overriding '_render' method.\n         *\n         * @member {string}\n         * @default 'tilingSprite'\n         */\n        _this.pluginName = 'tilingSprite';\n        /**\n         * Flags whether the tiling pattern should originate from the origin instead of the top-left corner in\n         * local space.\n         *\n         * This will make the texture coordinates assigned to each vertex dependent on the value of the anchor. Without\n         * this, the top-left corner always gets the (0, 0) texture coordinate.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        _this.uvRespectAnchor = false;\n        return _this;\n    }\n    Object.defineProperty(TilingSprite.prototype, \"clampMargin\", {\n        /**\n         * Changes frame clamping in corresponding textureTransform, shortcut\n         * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n         *\n         * @default 0.5\n         * @member {number}\n         */\n        get: function () {\n            return this.uvMatrix.clampMargin;\n        },\n        set: function (value) {\n            this.uvMatrix.clampMargin = value;\n            this.uvMatrix.update(true);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TilingSprite.prototype, \"tileScale\", {\n        /**\n         * The scaling of the image that is being tiled\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        get: function () {\n            return this.tileTransform.scale;\n        },\n        set: function (value) {\n            this.tileTransform.scale.copyFrom(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TilingSprite.prototype, \"tilePosition\", {\n        /**\n         * The offset of the image that is being tiled\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        get: function () {\n            return this.tileTransform.position;\n        },\n        set: function (value) {\n            this.tileTransform.position.copyFrom(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @protected\n     */\n    TilingSprite.prototype._onTextureUpdate = function () {\n        if (this.uvMatrix) {\n            this.uvMatrix.texture = this._texture;\n        }\n        this._cachedTint = 0xFFFFFF;\n    };\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    TilingSprite.prototype._render = function (renderer) {\n        // tweak our texture temporarily..\n        var texture = this._texture;\n        if (!texture || !texture.valid) {\n            return;\n        }\n        this.tileTransform.updateLocalTransform();\n        this.uvMatrix.update();\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    };\n    /**\n     * Updates the bounds of the tiling sprite.\n     *\n     * @protected\n     */\n    TilingSprite.prototype._calculateBounds = function () {\n        var minX = this._width * -this._anchor._x;\n        var minY = this._height * -this._anchor._y;\n        var maxX = this._width * (1 - this._anchor._x);\n        var maxY = this._height * (1 - this._anchor._y);\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    };\n    /**\n     * Gets the local bounds of the sprite object.\n     *\n     * @param {PIXI.Rectangle} [rect] - Optional output rectangle.\n     * @return {PIXI.Rectangle} The bounds.\n     */\n    TilingSprite.prototype.getLocalBounds = function (rect) {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0) {\n            this._bounds.minX = this._width * -this._anchor._x;\n            this._bounds.minY = this._height * -this._anchor._y;\n            this._bounds.maxX = this._width * (1 - this._anchor._x);\n            this._bounds.maxY = this._height * (1 - this._anchor._y);\n            if (!rect) {\n                if (!this._localBoundsRect) {\n                    this._localBoundsRect = new math.Rectangle();\n                }\n                rect = this._localBoundsRect;\n            }\n            return this._bounds.getRectangle(rect);\n        }\n        return _super.prototype.getLocalBounds.call(this, rect);\n    };\n    /**\n     * Checks if a point is inside this tiling sprite.\n     *\n     * @param {PIXI.IPointData} point - the point to check\n     * @return {boolean} Whether or not the sprite contains the point.\n     */\n    TilingSprite.prototype.containsPoint = function (point) {\n        this.worldTransform.applyInverse(point, tempPoint);\n        var width = this._width;\n        var height = this._height;\n        var x1 = -width * this.anchor._x;\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width) {\n            var y1 = -height * this.anchor._y;\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Destroys this sprite and optionally its texture and children\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    TilingSprite.prototype.destroy = function (options) {\n        _super.prototype.destroy.call(this, options);\n        this.tileTransform = null;\n        this.uvMatrix = null;\n    };\n    /**\n     * Helper function that creates a new tiling sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     *\n     * @static\n     * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n     * @param {Object} options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @param {number} options.width - required width of the tiling sprite\n     * @param {number} options.height - required height of the tiling sprite\n     * @return {PIXI.TilingSprite} The newly created texture\n     */\n    TilingSprite.from = function (source, options) {\n        var texture = (source instanceof core.Texture)\n            ? source\n            : core.Texture.from(source, options);\n        return new TilingSprite(texture, options.width, options.height);\n    };\n    Object.defineProperty(TilingSprite.prototype, \"width\", {\n        /**\n         * The width of the sprite, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this._width;\n        },\n        set: function (value) {\n            this._width = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TilingSprite.prototype, \"height\", {\n        /**\n         * The height of the TilingSprite, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this._height;\n        },\n        set: function (value) {\n            this._height = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return TilingSprite;\n}(sprite.Sprite));\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 translationMatrix;\\nuniform mat3 uTransform;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = (uTransform * vec3(aTextureCoord, 1.0)).xy;\\n}\\n\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uColor;\\nuniform mat3 uMapCoord;\\nuniform vec4 uClampFrame;\\nuniform vec2 uClampOffset;\\n\\nvoid main(void)\\n{\\n    vec2 coord = vTextureCoord + ceil(uClampOffset - vTextureCoord);\\n    coord = (uMapCoord * vec3(coord, 1.0)).xy;\\n    coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\\n\\n    vec4 texSample = texture2D(uSampler, coord);\\n    gl_FragColor = texSample * uColor;\\n}\\n\";\n\nvar fragmentSimple = \"varying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uColor;\\n\\nvoid main(void)\\n{\\n    vec4 sample = texture2D(uSampler, vTextureCoord);\\n    gl_FragColor = sample * uColor;\\n}\\n\";\n\nvar tempMat = new math.Matrix();\n/**\n * WebGL renderer plugin for tiling sprites\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.ObjectRenderer\n */\nvar TilingSpriteRenderer = /** @class */ (function (_super) {\n    __extends(TilingSpriteRenderer, _super);\n    /**\n     * constructor for renderer\n     *\n     * @param {PIXI.Renderer} renderer - The renderer this tiling awesomeness works for.\n     */\n    function TilingSpriteRenderer(renderer) {\n        var _this = _super.call(this, renderer) || this;\n        var uniforms = { globals: _this.renderer.globalUniforms };\n        _this.shader = core.Shader.from(vertex, fragment, uniforms);\n        _this.simpleShader = core.Shader.from(vertex, fragmentSimple, uniforms);\n        _this.quad = new core.QuadUv();\n        /**\n         * The WebGL state in which this renderer will work.\n         *\n         * @member {PIXI.State}\n         * @readonly\n         */\n        _this.state = core.State.for2d();\n        return _this;\n    }\n    /**\n     *\n     * @param {PIXI.TilingSprite} ts - tilingSprite to be rendered\n     */\n    TilingSpriteRenderer.prototype.render = function (ts) {\n        var renderer = this.renderer;\n        var quad = this.quad;\n        var vertices = quad.vertices;\n        vertices[0] = vertices[6] = (ts._width) * -ts.anchor.x;\n        vertices[1] = vertices[3] = ts._height * -ts.anchor.y;\n        vertices[2] = vertices[4] = (ts._width) * (1.0 - ts.anchor.x);\n        vertices[5] = vertices[7] = ts._height * (1.0 - ts.anchor.y);\n        var anchorX = ts.uvRespectAnchor ? ts.anchor.x : 0;\n        var anchorY = ts.uvRespectAnchor ? ts.anchor.y : 0;\n        vertices = quad.uvs;\n        vertices[0] = vertices[6] = -anchorX;\n        vertices[1] = vertices[3] = -anchorY;\n        vertices[2] = vertices[4] = 1.0 - anchorX;\n        vertices[5] = vertices[7] = 1.0 - anchorY;\n        quad.invalidate();\n        var tex = ts._texture;\n        var baseTex = tex.baseTexture;\n        var lt = ts.tileTransform.localTransform;\n        var uv = ts.uvMatrix;\n        var isSimple = baseTex.isPowerOfTwo\n            && tex.frame.width === baseTex.width && tex.frame.height === baseTex.height;\n        // auto, force repeat wrapMode for big tiling textures\n        if (isSimple) {\n            if (!baseTex._glTextures[renderer.CONTEXT_UID]) {\n                if (baseTex.wrapMode === constants.WRAP_MODES.CLAMP) {\n                    baseTex.wrapMode = constants.WRAP_MODES.REPEAT;\n                }\n            }\n            else {\n                isSimple = baseTex.wrapMode !== constants.WRAP_MODES.CLAMP;\n            }\n        }\n        var shader = isSimple ? this.simpleShader : this.shader;\n        var w = tex.width;\n        var h = tex.height;\n        var W = ts._width;\n        var H = ts._height;\n        tempMat.set(lt.a * w / W, lt.b * w / H, lt.c * h / W, lt.d * h / H, lt.tx / W, lt.ty / H);\n        // that part is the same as above:\n        // tempMat.identity();\n        // tempMat.scale(tex.width, tex.height);\n        // tempMat.prepend(lt);\n        // tempMat.scale(1.0 / ts._width, 1.0 / ts._height);\n        tempMat.invert();\n        if (isSimple) {\n            tempMat.prepend(uv.mapCoord);\n        }\n        else {\n            shader.uniforms.uMapCoord = uv.mapCoord.toArray(true);\n            shader.uniforms.uClampFrame = uv.uClampFrame;\n            shader.uniforms.uClampOffset = uv.uClampOffset;\n        }\n        shader.uniforms.uTransform = tempMat.toArray(true);\n        shader.uniforms.uColor = utils.premultiplyTintToRgba(ts.tint, ts.worldAlpha, shader.uniforms.uColor, baseTex.alphaMode);\n        shader.uniforms.translationMatrix = ts.transform.worldTransform.toArray(true);\n        shader.uniforms.uSampler = tex;\n        renderer.shader.bind(shader);\n        renderer.geometry.bind(quad);\n        this.state.blendMode = utils.correctBlendMode(ts.blendMode, baseTex.alphaMode);\n        renderer.state.set(this.state);\n        renderer.geometry.draw(this.renderer.gl.TRIANGLES, 6, 0);\n    };\n    return TilingSpriteRenderer;\n}(core.ObjectRenderer));\n\nexports.TilingSprite = TilingSprite;\nexports.TilingSpriteRenderer = TilingSpriteRenderer;\n//# sourceMappingURL=sprite-tiling.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","defineProperty","value","core","math","sprite","constants","utils","setPrototypeOf","__proto__","Array","p","hasOwnProperty","tempPoint","Point","TilingSprite","_super","texture","width","height","_this","call","tileTransform","Transform","_width","_height","uvMatrix","TextureMatrix","pluginName","uvRespectAnchor","get","clampMargin","set","update","enumerable","configurable","scale","copyFrom","position","_onTextureUpdate","TilingSprite.prototype._onTextureUpdate","_texture","_cachedTint","_render","TilingSprite.prototype._render","renderer","valid","updateLocalTransform","batch","setObjectRenderer","plugins","render","_calculateBounds","TilingSprite.prototype._calculateBounds","_bounds","addFrame","transform","_anchor","_x","_y","getLocalBounds","TilingSprite.prototype.getLocalBounds","rect","children","length","minX","minY","maxX","maxY","_localBoundsRect","Rectangle","getRectangle","containsPoint","TilingSprite.prototype.containsPoint","point","worldTransform","applyInverse","x1","anchor","x","y1","y","destroy","TilingSprite.prototype.destroy","options","from","TilingSprite.from","source","Texture","Sprite","tempMat","Matrix","TilingSpriteRenderer","uniforms","globals","globalUniforms","shader","Shader","vertex","fragment","simpleShader","fragmentSimple","quad","QuadUv","state","State","for2d","TilingSpriteRenderer.prototype.render","ts","vertices","anchorX","anchorY","uvs","invalidate","tex","baseTex","baseTexture","lt","localTransform","uv","isSimple","isPowerOfTwo","frame","_glTextures","CONTEXT_UID","wrapMode","WRAP_MODES","CLAMP","REPEAT","w","h","W","H","a","c","tx","ty","invert","prepend","mapCoord","uMapCoord","toArray","uClampFrame","uClampOffset","uTransform","uColor","premultiplyTintToRgba","tint","worldAlpha","alphaMode","translationMatrix","uSampler","bind","geometry","blendMode","correctBlendMode","draw","gl","TRIANGLES","ObjectRenderer"]
}
