{"version":3,"sources":["shadow_eval/core.cljs"],"mappings":";AAQA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAQ,AAACC;;AAClB,AAAA,AAAAJ,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAASC,AAAa,AAAA,AAACC;;AAEvB,AAAA,AAAMC,AAAOC,AAAOC;AAApB,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMC,AAAeC,AAGA,AAACC,AAAQC,AAAsBX;AAE9CY,AAAE,AAAKC;AAAL,AAAQ,AAAM,AAAA,AAAQA;AAAd,AACG,AAACC,AAAiB,AAACC,AAAS,AAAA,AAAQF;;AADvC;;AAEL,AAACG,AAAKH;;AAAG,AAACN,AAAAA,AAAAA,AAAGM,AAAAA;;AAPxB,AAQE,AAAA,AAACI,AAAcjB,AAAQ,AAAKM,AAAiBE,AAAQI;;AAEzD,AAAA,AAAuBM;AAAvB,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAsBnB;AAAvB,AAGwB,AAAA,AAACoB,AAAOjB","names":["js/shadow-eval","js/shadow-eval.core","js/shadow-eval.core.c-state","shadow-eval.core/c-state","cljs.js.empty_state","js/shadow-eval.core.!eval-ready?","shadow-eval.core/!eval-ready?","cljs.core.atom","shadow-eval.core/eval*","source","cb","options","cljs.js/js-eval","cljs.core.partial","shadow.cljs.bootstrap.browser/load","f","x","js/console.error","cljs.core/ex-cause","cljs.core/tap>","cljs.js.eval_str","shadow-eval.core/init","shadow.cljs.bootstrap.browser/init","cljs.core/reset!"],"sourcesContent":["(ns shadow-eval.core\n  (:require\n\n    ;; evaluate\n    [cljs.js :as cljs]\n    [shadow.cljs.bootstrap.browser :as shadow.bootstrap]))\n\n;; Set up eval environment\n(defonce c-state (cljs/empty-state))\n(defonce !eval-ready? (atom false))\n\n(defn eval* [source cb]\n  (let [options {:eval cljs/js-eval\n                 ;; use the :load function provided by shadow-cljs, which uses the bootstrap build's\n                 ;; index.transit.json file to map namespaces to files.\n                 :load (partial shadow.bootstrap/load c-state)\n                 :context :expr}\n        f (fn [x] (when (:error x)\n                     (js/console.error (ex-cause (:error x))))\n             (tap> x) (cb x))]\n    (cljs/eval-str c-state (str source) \"[test]\" options f)))\n\n(defn ^:dev/after-load init []\n  (shadow.bootstrap/init c-state\n                         {:path \"/js/bootstrap\"\n                          :load-on-init '#{shadow-eval.user}}\n                         #(reset! !eval-ready? true)))\n"]}