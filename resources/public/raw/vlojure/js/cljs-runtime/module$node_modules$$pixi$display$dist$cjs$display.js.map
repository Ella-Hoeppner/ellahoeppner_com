{
"version":3,
"file":"module$node_modules$$pixi$display$dist$cjs$display.js",
"lineCount":42,
"mappings":"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",
"sources":["node_modules/@pixi/display/dist/cjs/display.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$display$dist$cjs$display\"] = function(global,require,module,exports) {\n/*!\n * @pixi/display - v6.1.1\n * Compiled Fri, 06 Aug 2021 03:30:25 UTC\n *\n * @pixi/display is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar settings = require('@pixi/settings');\nvar math = require('@pixi/math');\nvar utils = require('@pixi/utils');\n\n/**\n * Sets the default value for the container property 'sortableChildren'.\n * If set to true, the container will sort its children by zIndex value\n * when updateTransform() is called, or manually if sortChildren() is called.\n *\n * This actually changes the order of elements in the array, so should be treated\n * as a basic solution that is not performant compared to other solutions,\n * such as @link https://github.com/pixijs/pixi-display\n *\n * Also be aware of that this may not work nicely with the addChildAt() function,\n * as the zIndex sorting may cause the child to automatically sorted to another position.\n *\n * @static\n * @constant\n * @name SORTABLE_CHILDREN\n * @memberof PIXI.settings\n * @type {boolean}\n * @default false\n */\nsettings.settings.SORTABLE_CHILDREN = false;\n\n/**\n * 'Builder' pattern for bounds rectangles.\n *\n * This could be called an Axis-Aligned Bounding Box.\n * It is not an actual shape. It is a mutable thing; no 'EMPTY' or those kind of problems.\n *\n * @class\n * @memberof PIXI\n */\nvar Bounds = /** @class */ (function () {\n    function Bounds() {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.minX = Infinity;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.minY = Infinity;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.maxX = -Infinity;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.maxY = -Infinity;\n        this.rect = null;\n        /**\n         * It is updated to _boundsID of corresponding object to keep bounds in sync with content.\n         * Updated from outside, thus public modifier.\n         *\n         * @member {number}\n         * @public\n         */\n        this.updateID = -1;\n    }\n    /**\n     * Checks if bounds are empty.\n     *\n     * @return {boolean} True if empty.\n     */\n    Bounds.prototype.isEmpty = function () {\n        return this.minX > this.maxX || this.minY > this.maxY;\n    };\n    /**\n     * Clears the bounds and resets.\n     *\n     */\n    Bounds.prototype.clear = function () {\n        this.minX = Infinity;\n        this.minY = Infinity;\n        this.maxX = -Infinity;\n        this.maxY = -Infinity;\n    };\n    /**\n     * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle\n     * It is not guaranteed that it will return tempRect\n     *\n     * @param {PIXI.Rectangle} rect - temporary object will be used if AABB is not empty\n     * @returns {PIXI.Rectangle} A rectangle of the bounds\n     */\n    Bounds.prototype.getRectangle = function (rect) {\n        if (this.minX > this.maxX || this.minY > this.maxY) {\n            return math.Rectangle.EMPTY;\n        }\n        rect = rect || new math.Rectangle(0, 0, 1, 1);\n        rect.x = this.minX;\n        rect.y = this.minY;\n        rect.width = this.maxX - this.minX;\n        rect.height = this.maxY - this.minY;\n        return rect;\n    };\n    /**\n     * This function should be inlined when its possible.\n     *\n     * @param {PIXI.IPointData} point - The point to add.\n     */\n    Bounds.prototype.addPoint = function (point) {\n        this.minX = Math.min(this.minX, point.x);\n        this.maxX = Math.max(this.maxX, point.x);\n        this.minY = Math.min(this.minY, point.y);\n        this.maxY = Math.max(this.maxY, point.y);\n    };\n    /**\n     * Adds a point, after transformed. This should be inlined when its possible.\n     *\n     * @param matrix\n     * @param point\n     */\n    Bounds.prototype.addPointMatrix = function (matrix, point) {\n        var a = matrix.a, b = matrix.b, c = matrix.c, d = matrix.d, tx = matrix.tx, ty = matrix.ty;\n        var x = (a * point.x) + (c * point.y) + tx;\n        var y = (b * point.x) + (d * point.y) + ty;\n        this.minX = Math.min(this.minX, x);\n        this.maxX = Math.max(this.maxX, x);\n        this.minY = Math.min(this.minY, y);\n        this.maxY = Math.max(this.maxY, y);\n    };\n    /**\n     * Adds a quad, not transformed\n     *\n     * @param {Float32Array} vertices - The verts to add.\n     */\n    Bounds.prototype.addQuad = function (vertices) {\n        var minX = this.minX;\n        var minY = this.minY;\n        var maxX = this.maxX;\n        var maxY = this.maxY;\n        var x = vertices[0];\n        var y = vertices[1];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n        x = vertices[2];\n        y = vertices[3];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n        x = vertices[4];\n        y = vertices[5];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n        x = vertices[6];\n        y = vertices[7];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    };\n    /**\n     * Adds sprite frame, transformed.\n     *\n     * @param {PIXI.Transform} transform - transform to apply\n     * @param {number} x0 - left X of frame\n     * @param {number} y0 - top Y of frame\n     * @param {number} x1 - right X of frame\n     * @param {number} y1 - bottom Y of frame\n     */\n    Bounds.prototype.addFrame = function (transform, x0, y0, x1, y1) {\n        this.addFrameMatrix(transform.worldTransform, x0, y0, x1, y1);\n    };\n    /**\n     * Adds sprite frame, multiplied by matrix\n     *\n     * @param {PIXI.Matrix} matrix - matrix to apply\n     * @param {number} x0 - left X of frame\n     * @param {number} y0 - top Y of frame\n     * @param {number} x1 - right X of frame\n     * @param {number} y1 - bottom Y of frame\n     */\n    Bounds.prototype.addFrameMatrix = function (matrix, x0, y0, x1, y1) {\n        var a = matrix.a;\n        var b = matrix.b;\n        var c = matrix.c;\n        var d = matrix.d;\n        var tx = matrix.tx;\n        var ty = matrix.ty;\n        var minX = this.minX;\n        var minY = this.minY;\n        var maxX = this.maxX;\n        var maxY = this.maxY;\n        var x = (a * x0) + (c * y0) + tx;\n        var y = (b * x0) + (d * y0) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n        x = (a * x1) + (c * y0) + tx;\n        y = (b * x1) + (d * y0) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n        x = (a * x0) + (c * y1) + tx;\n        y = (b * x0) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n        x = (a * x1) + (c * y1) + tx;\n        y = (b * x1) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    };\n    /**\n     * Adds screen vertices from array\n     *\n     * @param {Float32Array} vertexData - calculated vertices\n     * @param {number} beginOffset - begin offset\n     * @param {number} endOffset - end offset, excluded\n     */\n    Bounds.prototype.addVertexData = function (vertexData, beginOffset, endOffset) {\n        var minX = this.minX;\n        var minY = this.minY;\n        var maxX = this.maxX;\n        var maxY = this.maxY;\n        for (var i = beginOffset; i < endOffset; i += 2) {\n            var x = vertexData[i];\n            var y = vertexData[i + 1];\n            minX = x < minX ? x : minX;\n            minY = y < minY ? y : minY;\n            maxX = x > maxX ? x : maxX;\n            maxY = y > maxY ? y : maxY;\n        }\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    };\n    /**\n     * Add an array of mesh vertices\n     *\n     * @param {PIXI.Transform} transform - mesh transform\n     * @param {Float32Array} vertices - mesh coordinates in array\n     * @param {number} beginOffset - begin offset\n     * @param {number} endOffset - end offset, excluded\n     */\n    Bounds.prototype.addVertices = function (transform, vertices, beginOffset, endOffset) {\n        this.addVerticesMatrix(transform.worldTransform, vertices, beginOffset, endOffset);\n    };\n    /**\n     * Add an array of mesh vertices.\n     *\n     * @param {PIXI.Matrix} matrix - mesh matrix\n     * @param {Float32Array} vertices - mesh coordinates in array\n     * @param {number} beginOffset - begin offset\n     * @param {number} endOffset - end offset, excluded\n     * @param {number} [padX=0] - x padding\n     * @param {number} [padY=0] - y padding\n     */\n    Bounds.prototype.addVerticesMatrix = function (matrix, vertices, beginOffset, endOffset, padX, padY) {\n        if (padX === void 0) { padX = 0; }\n        if (padY === void 0) { padY = padX; }\n        var a = matrix.a;\n        var b = matrix.b;\n        var c = matrix.c;\n        var d = matrix.d;\n        var tx = matrix.tx;\n        var ty = matrix.ty;\n        var minX = this.minX;\n        var minY = this.minY;\n        var maxX = this.maxX;\n        var maxY = this.maxY;\n        for (var i = beginOffset; i < endOffset; i += 2) {\n            var rawX = vertices[i];\n            var rawY = vertices[i + 1];\n            var x = (a * rawX) + (c * rawY) + tx;\n            var y = (d * rawY) + (b * rawX) + ty;\n            minX = Math.min(minX, x - padX);\n            maxX = Math.max(maxX, x + padX);\n            minY = Math.min(minY, y - padY);\n            maxY = Math.max(maxY, y + padY);\n        }\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    };\n    /**\n     * Adds other Bounds.\n     *\n     * @param {PIXI.Bounds} bounds - The Bounds to be added\n     */\n    Bounds.prototype.addBounds = function (bounds) {\n        var minX = this.minX;\n        var minY = this.minY;\n        var maxX = this.maxX;\n        var maxY = this.maxY;\n        this.minX = bounds.minX < minX ? bounds.minX : minX;\n        this.minY = bounds.minY < minY ? bounds.minY : minY;\n        this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;\n        this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;\n    };\n    /**\n     * Adds other Bounds, masked with Bounds.\n     *\n     * @param {PIXI.Bounds} bounds - The Bounds to be added.\n     * @param {PIXI.Bounds} mask - TODO\n     */\n    Bounds.prototype.addBoundsMask = function (bounds, mask) {\n        var _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;\n        var _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;\n        var _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;\n        var _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;\n        if (_minX <= _maxX && _minY <= _maxY) {\n            var minX = this.minX;\n            var minY = this.minY;\n            var maxX = this.maxX;\n            var maxY = this.maxY;\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    };\n    /**\n     * Adds other Bounds, multiplied by matrix. Bounds shouldn't be empty.\n     *\n     * @param {PIXI.Bounds} bounds - other bounds\n     * @param {PIXI.Matrix} matrix - multiplicator\n     */\n    Bounds.prototype.addBoundsMatrix = function (bounds, matrix) {\n        this.addFrameMatrix(matrix, bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);\n    };\n    /**\n     * Adds other Bounds, masked with Rectangle.\n     *\n     * @param {PIXI.Bounds} bounds - TODO\n     * @param {PIXI.Rectangle} area - TODO\n     */\n    Bounds.prototype.addBoundsArea = function (bounds, area) {\n        var _minX = bounds.minX > area.x ? bounds.minX : area.x;\n        var _minY = bounds.minY > area.y ? bounds.minY : area.y;\n        var _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : (area.x + area.width);\n        var _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : (area.y + area.height);\n        if (_minX <= _maxX && _minY <= _maxY) {\n            var minX = this.minX;\n            var minY = this.minY;\n            var maxX = this.maxX;\n            var maxY = this.maxY;\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    };\n    /**\n     * Pads bounds object, making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     *\n     * @param {number} [paddingX=0] - The horizontal padding amount.\n     * @param {number} [paddingY=0] - The vertical padding amount.\n     */\n    Bounds.prototype.pad = function (paddingX, paddingY) {\n        if (paddingX === void 0) { paddingX = 0; }\n        if (paddingY === void 0) { paddingY = paddingX; }\n        if (!this.isEmpty()) {\n            this.minX -= paddingX;\n            this.maxX += paddingX;\n            this.minY -= paddingY;\n            this.maxY += paddingY;\n        }\n    };\n    /**\n     * Adds padded frame. (x0, y0) should be strictly less than (x1, y1)\n     *\n     * @param {number} x0 - left X of frame\n     * @param {number} y0 - top Y of frame\n     * @param {number} x1 - right X of frame\n     * @param {number} y1 - bottom Y of frame\n     * @param {number} padX - padding X\n     * @param {number} padY - padding Y\n     */\n    Bounds.prototype.addFramePad = function (x0, y0, x1, y1, padX, padY) {\n        x0 -= padX;\n        y0 -= padY;\n        x1 += padX;\n        y1 += padY;\n        this.minX = this.minX < x0 ? this.minX : x0;\n        this.maxX = this.maxX > x1 ? this.maxX : x1;\n        this.minY = this.minY < y0 ? this.minY : y0;\n        this.maxY = this.maxY > y1 ? this.maxY : y1;\n    };\n    return Bounds;\n}());\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * The base class for all objects that are rendered on the screen.\n *\n * This is an abstract class and can not be used on its own; rather it should be extended.\n *\n * ## Display objects implemented in PixiJS\n *\n * | Display Object                  | Description                                                           |\n * | ------------------------------- | --------------------------------------------------------------------- |\n * | {@link PIXI.Container}          | Adds support for `children` to DisplayObject                          |\n * | {@link PIXI.Graphics}           | Shape-drawing display object similar to the Canvas API                |\n * | {@link PIXI.Sprite}             | Draws textures (i.e. images)                                          |\n * | {@link PIXI.Text}               | Draws text using the Canvas API internally                            |\n * | {@link PIXI.BitmapText}         | More scaleable solution for text rendering, reusing glyph textures    |\n * | {@link PIXI.TilingSprite}       | Draws textures/images in a tiled fashion                              |\n * | {@link PIXI.AnimatedSprite}     | Draws an animation of multiple images                                 |\n * | {@link PIXI.Mesh}               | Provides a lower-level API for drawing meshes with custom data        |\n * | {@link PIXI.NineSlicePlane}     | Mesh-related                                                          |\n * | {@link PIXI.SimpleMesh}         | v4-compatibile mesh                                                   |\n * | {@link PIXI.SimplePlane}        | Mesh-related                                                          |\n * | {@link PIXI.SimpleRope}         | Mesh-related                                                          |\n *\n * ## Transforms\n *\n * The [transform]{@link DisplayObject#transform} of a display object describes the projection from its\n * local coordinate space to its parent's local coordinate space. The following properties are derived\n * from the transform:\n *\n * <table>\n *   <thead>\n *     <tr>\n *       <th>Property</th>\n *       <th>Description</th>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>[pivot]{@link PIXI.DisplayObject#pivot}</td>\n *       <td>\n *         Invariant under rotation, scaling, and skewing. The projection of into the parent's space of the pivot\n *         is equal to position, regardless of the other three transformations. In other words, It is the center of\n *         rotation, scaling, and skewing.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[position]{@link PIXI.DisplayObject#position}</td>\n *       <td>\n *         Translation. This is the position of the [pivot]{@link PIXI.DisplayObject#pivot} in the parent's local\n *         space. The default value of the pivot is the origin (0,0). If the top-left corner of your display object\n *         is (0,0) in its local space, then the position will be its top-left corner in the parent's local space.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[scale]{@link PIXI.DisplayObject#scale}</td>\n *       <td>\n *         Scaling. This will stretch (or compress) the display object's projection. The scale factors are along the\n *         local coordinate axes. In other words, the display object is scaled before rotated or skewed. The center\n *         of scaling is the [pivot]{@link PIXI.DisplayObject#pivot}.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[rotation]{@link PIXI.DisplayObject#rotation}</td>\n *       <td>\n *          Rotation. This will rotate the display object's projection by this angle (in radians).\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[skew]{@link PIXI.DisplayObject#skew}</td>\n *       <td>\n *         <p>Skewing. This can be used to deform a rectangular display object into a parallelogram.</p>\n *         <p>\n *         In PixiJS, skew has a slightly different behaviour than the conventional meaning. It can be\n *         thought of the net rotation applied to the coordinate axes (separately). For example, if \"skew.x\" is\n *         \u237a and \"skew.y\" is \u03b2, then the line x = 0 will be rotated by \u237a (y = -x*cot\u237a) and the line y = 0 will be\n *         rotated by \u03b2 (y = x*tan\u03b2). A line y = x*tan\u03f4 (i.e. a line at angle \u03f4 to the x-axis in local-space) will\n *         be rotated by an angle between \u237a and \u03b2.\n *         </p>\n *         <p>\n *         It can be observed that if skew is applied equally to both axes, then it will be equivalent to applying\n *         a rotation. Indeed, if \"skew.x\" = -\u03f4 and \"skew.y\" = \u03f4, it will produce an equivalent of \"rotation\" = \u03f4.\n *         </p>\n *         <p>\n *         Another quite interesting observation is that \"skew.x\", \"skew.y\", rotation are communtative operations. Indeed,\n *         because rotation is essentially a careful combination of the two.\n *         </p>\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>angle</td>\n *       <td>Rotation. This is an alias for [rotation]{@link PIXI.DisplayObject#rotation}, but in degrees.</td>\n *     </tr>\n *     <tr>\n *       <td>x</td>\n *       <td>Translation. This is an alias for position.x!</td>\n *     </tr>\n *     <tr>\n *       <td>y</td>\n *       <td>Translation. This is an alias for position.y!</td>\n *     </tr>\n *     <tr>\n *       <td>width</td>\n *       <td>\n *         Implemented in [Container]{@link PIXI.Container}. Scaling. The width property calculates scale.x by dividing\n *         the \"requested\" width by the local bounding box width. It is indirectly an abstraction over scale.x, and there\n *         is no concept of user-defined width.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>height</td>\n *       <td>\n *         Implemented in [Container]{@link PIXI.Container}. Scaling. The height property calculates scale.y by dividing\n *         the \"requested\" height by the local bounding box height. It is indirectly an abstraction over scale.y, and there\n *         is no concept of user-defined height.\n *       </td>\n *     </tr>\n *   </tbody>\n * </table>\n *\n * ## Bounds\n *\n * The bounds of a display object is defined by the minimum axis-aligned rectangle in world space that can fit\n * around it. The abstract `calculateBounds` method is responsible for providing it (and it should use the\n * `worldTransform` to calculate in world space).\n *\n * There are a few additional types of bounding boxes:\n *\n * | Bounds                | Description                                                                              |\n * | --------------------- | ---------------------------------------------------------------------------------------- |\n * | World Bounds          | This is synonymous is the regular bounds described above. See `getBounds()`.             |\n * | Local Bounds          | This the axis-aligned bounding box in the parent's local space. See `getLocalBounds()`.  |\n * | Render Bounds         | The bounds, but including extra rendering effects like filter padding.                   |\n * | Projected Bounds      | The bounds of the projected display object onto the screen. Usually equals world bounds. |\n * | Relative Bounds       | The bounds of a display object when projected onto a ancestor's (or parent's) space.     |\n * | Natural Bounds        | The bounds of an object in its own local space (not parent's space, like in local bounds)|\n * | Content Bounds        | The natural bounds when excluding all children of a `Container`.                         |\n *\n * ### calculateBounds\n *\n * [Container]{@link Container} already implements `calculateBounds` in a manner that includes children.\n *\n * But for a non-Container display object, the `calculateBounds` method must be overridden in order for `getBounds` and\n * `getLocalBounds` to work. This method must write the bounds into `this._bounds`.\n *\n * Generally, the following technique works for most simple cases: take the list of points\n * forming the \"hull\" of the object (i.e. outline of the object's shape), and then add them\n * using {@link PIXI.Bounds#addPointMatrix}.\n *\n * ```js\n * calculateBounds(): void\n * {\n *     const points = [...];\n *\n *     for (let i = 0, j = points.length; i < j; i++)\n *     {\n *         this._bounds.addPointMatrix(this.worldTransform, points[i]);\n *     }\n * }\n * ```\n *\n * You can optimize this for a large number of points by using {@link PIXI.Bounds#addVerticesMatrix} to pass them\n * in one array together.\n *\n * ## Alpha\n *\n * This alpha sets a display object's **relative opacity** w.r.t its parent. For example, if the alpha of a display\n * object is 0.5 and its parent's alpha is 0.5, then it will be rendered with 25% opacity (assuming alpha is not\n * applied on any ancestor further up the chain).\n *\n * The alpha with which the display object will be rendered is called the [worldAlpha]{@link PIXI.DisplayObject#worldAlpha}.\n *\n * ## Renderable vs Visible\n *\n * The `renderable` and `visible` properties can be used to prevent a display object from being rendered to the\n * screen. However, there is a subtle difference between the two. When using `renderable`, the transforms  of the display\n * object (and its children subtree) will continue to be calculated. When using `visible`, the transforms will not\n * be calculated.\n *\n * It is recommended that applications use the `renderable` property for culling. See\n * [@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} or\n * [pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} for more details.\n *\n * Otherwise, to prevent an object from rendering in the general-purpose sense - `visible` is the property to use. This\n * one is also better in terms of performance.\n *\n * @class\n * @extends PIXI.utils.EventEmitter\n * @memberof PIXI\n */\nvar DisplayObject = /** @class */ (function (_super) {\n    __extends(DisplayObject, _super);\n    function DisplayObject() {\n        var _this = _super.call(this) || this;\n        _this.tempDisplayObjectParent = null;\n        // TODO: need to create Transform from factory\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing.\n         *\n         * @member {PIXI.Transform}\n         */\n        _this.transform = new math.Transform();\n        /**\n         * The opacity of the object.\n         *\n         * @member {number}\n         */\n        _this.alpha = 1;\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n         *\n         * @member {boolean}\n         */\n        _this.visible = true;\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually.\n         *\n         * @member {boolean}\n         */\n        _this.renderable = true;\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container}\n         */\n        _this.parent = null;\n        /**\n         * The multiplied alpha of the displayObject.\n         *\n         * @member {number}\n         * @readonly\n         */\n        _this.worldAlpha = 1;\n        /**\n         * Which index in the children array the display component was before the previous zIndex sort.\n         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n         *\n         * @member {number}\n         * @protected\n         */\n        _this._lastSortedIndex = 0;\n        /**\n         * The zIndex of the displayObject.\n         * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         * @protected\n         */\n        _this._zIndex = 0;\n        /**\n         * The area the filter is applied to. This is used as more of an optimization\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n         *\n         * Also works as an interaction mask.\n         *\n         * @member {?PIXI.Rectangle}\n         */\n        _this.filterArea = null;\n        /**\n         * Sets the filters for the displayObject.\n         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * To remove filters simply set this property to `'null'`.\n         *\n         * @member {?PIXI.Filter[]}\n         */\n        _this.filters = null;\n        /**\n         * Currently enabled filters\n         * @member {PIXI.Filter[]}\n         * @protected\n         */\n        _this._enabledFilters = null;\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject.\n         *\n         * @member {PIXI.Bounds}\n         */\n        _this._bounds = new Bounds();\n        /**\n         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.\n         *\n         * @member {PIXI.Bounds}\n         */\n        _this._localBounds = null;\n        /**\n         * Flags the cached bounds as dirty.\n         *\n         * @member {number}\n         * @protected\n         */\n        _this._boundsID = 0;\n        /**\n         * Cache of this display-object's bounds-rectangle.\n         *\n         * @member {PIXI.Bounds}\n         * @protected\n         */\n        _this._boundsRect = null;\n        /**\n         * Cache of this display-object's local-bounds rectangle.\n         *\n         * @member {PIXI.Bounds}\n         * @protected\n         */\n        _this._localBoundsRect = null;\n        /**\n         * The original, cached mask of the object.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         * @protected\n         */\n        _this._mask = null;\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean}\n         * @protected\n         */\n        _this._destroyed = false;\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean}\n         */\n        _this.isSprite = false;\n        /**\n         * Does any other displayObject use this object as a mask?\n         * @member {boolean}\n         */\n        _this.isMask = false;\n        return _this;\n    }\n    /**\n     * Mixes all enumerable properties and methods from a source object to DisplayObject.\n     *\n     * @param {object} source - The source of properties and methods to mix in.\n     */\n    DisplayObject.mixin = function (source) {\n        // in ES8/ES2017, this would be really easy:\n        // Object.defineProperties(DisplayObject.prototype, Object.getOwnPropertyDescriptors(source));\n        // get all the enumerable property keys\n        var keys = Object.keys(source);\n        // loop through properties\n        for (var i = 0; i < keys.length; ++i) {\n            var propertyName = keys[i];\n            // Set the property using the property descriptor - this works for accessors and normal value properties\n            Object.defineProperty(DisplayObject.prototype, propertyName, Object.getOwnPropertyDescriptor(source, propertyName));\n        }\n    };\n    Object.defineProperty(DisplayObject.prototype, \"destroyed\", {\n        /**\n         * Fired when this DisplayObject is added to a Container.\n         *\n         * @instance\n         * @event added\n         * @param {PIXI.Container} container - The container added to.\n         */\n        /**\n         * Fired when this DisplayObject is removed from a Container.\n         *\n         * @instance\n         * @event removed\n         * @param {PIXI.Container} container - The container removed from.\n         */\n        /**\n         * Fired when this DisplayObject is destroyed.\n         *\n         * @instance\n         * @event destroyed\n         */\n        /**\n         * Readonly flag for destroyed display objects.\n         */\n        get: function () {\n            return this._destroyed;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Recursively updates transform of all objects from the root to this one\n     * internal function for toLocal()\n     */\n    DisplayObject.prototype._recursivePostUpdateTransform = function () {\n        if (this.parent) {\n            this.parent._recursivePostUpdateTransform();\n            this.transform.updateTransform(this.parent.transform);\n        }\n        else {\n            this.transform.updateTransform(this._tempDisplayObjectParent.transform);\n        }\n    };\n    /**\n     * Updates the object transform for rendering.\n     *\n     * TODO - Optimization pass!\n     */\n    DisplayObject.prototype.updateTransform = function () {\n        this._boundsID++;\n        this.transform.updateTransform(this.parent.transform);\n        // multiply the alphas..\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n    };\n    /**\n     * Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.\n     *\n     * This method is expensive on containers with a large subtree (like the stage). This is because the bounds\n     * of a container depend on its children's bounds, which recursively causes all bounds in the subtree to\n     * be recalculated. The upside, however, is that calling `getBounds` once on a container will indeed update\n     * the bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n     * `displayObject._bounds.getRectangle()` when traversing through all the bounds in a scene graph. Otherwise,\n     * calling `getBounds` on each object in a subtree will cause the total cost to increase quadratically as\n     * its height increases.\n     *\n     * * The transforms of all objects in a container's **subtree** and of all **ancestors** are updated.\n     * * The world bounds of all display objects in a container's **subtree** will also be recalculated.\n     *\n     * The `_bounds` object stores the last calculation of the bounds. You can use to entirely skip bounds\n     * calculation if needed.\n     *\n     * ```js\n     * const lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n     * ```\n     *\n     * Do know that usage of `getLocalBounds` can corrupt the `_bounds` of children (the whole subtree, actually). This\n     * is a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\n     * details.\n     *\n     * `getBounds` should be called with `skipUpdate` equal to `true` in a render() call. This is because the transforms\n     * are guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\n     * cases.\n     *\n     * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from\n     *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n     *  nice performance boost.\n     * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n     * @return {PIXI.Rectangle} The minimum axis-aligned rectangle in world space that fits around this object.\n     */\n    DisplayObject.prototype.getBounds = function (skipUpdate, rect) {\n        if (!skipUpdate) {\n            if (!this.parent) {\n                this.parent = this._tempDisplayObjectParent;\n                this.updateTransform();\n                this.parent = null;\n            }\n            else {\n                this._recursivePostUpdateTransform();\n                this.updateTransform();\n            }\n        }\n        if (this._bounds.updateID !== this._boundsID) {\n            this.calculateBounds();\n            this._bounds.updateID = this._boundsID;\n        }\n        if (!rect) {\n            if (!this._boundsRect) {\n                this._boundsRect = new math.Rectangle();\n            }\n            rect = this._boundsRect;\n        }\n        return this._bounds.getRectangle(rect);\n    };\n    /**\n     * Retrieves the local bounds of the displayObject as a rectangle object.\n     *\n     * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n     * @return {PIXI.Rectangle} The rectangular bounding area.\n     */\n    DisplayObject.prototype.getLocalBounds = function (rect) {\n        if (!rect) {\n            if (!this._localBoundsRect) {\n                this._localBoundsRect = new math.Rectangle();\n            }\n            rect = this._localBoundsRect;\n        }\n        if (!this._localBounds) {\n            this._localBounds = new Bounds();\n        }\n        var transformRef = this.transform;\n        var parentRef = this.parent;\n        this.parent = null;\n        this.transform = this._tempDisplayObjectParent.transform;\n        var worldBounds = this._bounds;\n        var worldBoundsID = this._boundsID;\n        this._bounds = this._localBounds;\n        var bounds = this.getBounds(false, rect);\n        this.parent = parentRef;\n        this.transform = transformRef;\n        this._bounds = worldBounds;\n        this._bounds.updateID += this._boundsID - worldBoundsID; // reflect side-effects\n        return bounds;\n    };\n    /**\n     * Calculates the global position of the display object.\n     *\n     * @param {PIXI.IPointData} position - The world origin to calculate from.\n     * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n     *  (otherwise will create a new Point).\n     * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n     * @return {PIXI.Point} A point object representing the position of this object.\n     */\n    DisplayObject.prototype.toGlobal = function (position, point, skipUpdate) {\n        if (skipUpdate === void 0) { skipUpdate = false; }\n        if (!skipUpdate) {\n            this._recursivePostUpdateTransform();\n            // this parent check is for just in case the item is a root object.\n            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly\n            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)\n            if (!this.parent) {\n                this.parent = this._tempDisplayObjectParent;\n                this.displayObjectUpdateTransform();\n                this.parent = null;\n            }\n            else {\n                this.displayObjectUpdateTransform();\n            }\n        }\n        // don't need to update the lot\n        return this.worldTransform.apply(position, point);\n    };\n    /**\n     * Calculates the local position of the display object relative to another point.\n     *\n     * @param {PIXI.IPointData} position - The world origin to calculate from.\n     * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.\n     * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n     *  (otherwise will create a new Point).\n     * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n     * @return {PIXI.Point} A point object representing the position of this object\n     */\n    DisplayObject.prototype.toLocal = function (position, from, point, skipUpdate) {\n        if (from) {\n            position = from.toGlobal(position, point, skipUpdate);\n        }\n        if (!skipUpdate) {\n            this._recursivePostUpdateTransform();\n            // this parent check is for just in case the item is a root object.\n            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly\n            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)\n            if (!this.parent) {\n                this.parent = this._tempDisplayObjectParent;\n                this.displayObjectUpdateTransform();\n                this.parent = null;\n            }\n            else {\n                this.displayObjectUpdateTransform();\n            }\n        }\n        // simply apply the matrix..\n        return this.worldTransform.applyInverse(position, point);\n    };\n    /**\n     * Set the parent Container of this DisplayObject.\n     *\n     * @param {PIXI.Container} container - The Container to add this DisplayObject to.\n     * @return {PIXI.Container} The Container that this DisplayObject was added to.\n     */\n    DisplayObject.prototype.setParent = function (container) {\n        if (!container || !container.addChild) {\n            throw new Error('setParent: Argument must be a Container');\n        }\n        container.addChild(this);\n        return container;\n    };\n    /**\n     * Convenience function to set the position, scale, skew and pivot at once.\n     *\n     * @param {number} [x=0] - The X position\n     * @param {number} [y=0] - The Y position\n     * @param {number} [scaleX=1] - The X scale value\n     * @param {number} [scaleY=1] - The Y scale value\n     * @param {number} [rotation=0] - The rotation\n     * @param {number} [skewX=0] - The X skew value\n     * @param {number} [skewY=0] - The Y skew value\n     * @param {number} [pivotX=0] - The X pivot value\n     * @param {number} [pivotY=0] - The Y pivot value\n     * @return {PIXI.DisplayObject} The DisplayObject instance\n     */\n    DisplayObject.prototype.setTransform = function (x, y, scaleX, scaleY, rotation, skewX, skewY, pivotX, pivotY) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (scaleX === void 0) { scaleX = 1; }\n        if (scaleY === void 0) { scaleY = 1; }\n        if (rotation === void 0) { rotation = 0; }\n        if (skewX === void 0) { skewX = 0; }\n        if (skewY === void 0) { skewY = 0; }\n        if (pivotX === void 0) { pivotX = 0; }\n        if (pivotY === void 0) { pivotY = 0; }\n        this.position.x = x;\n        this.position.y = y;\n        this.scale.x = !scaleX ? 1 : scaleX;\n        this.scale.y = !scaleY ? 1 : scaleY;\n        this.rotation = rotation;\n        this.skew.x = skewX;\n        this.skew.y = skewY;\n        this.pivot.x = pivotX;\n        this.pivot.y = pivotY;\n        return this;\n    };\n    /**\n     * Base destroy method for generic display objects. This will automatically\n     * remove the display object from its parent Container as well as remove\n     * all current event listeners and internal references. Do not use a DisplayObject\n     * after calling `destroy()`.\n     *\n     */\n    DisplayObject.prototype.destroy = function (_options) {\n        if (this.parent) {\n            this.parent.removeChild(this);\n        }\n        this.emit('destroyed');\n        this.removeAllListeners();\n        this.transform = null;\n        this.parent = null;\n        this._bounds = null;\n        this._mask = null;\n        this.filters = null;\n        this.filterArea = null;\n        this.hitArea = null;\n        this.interactive = false;\n        this.interactiveChildren = false;\n        this._destroyed = true;\n    };\n    Object.defineProperty(DisplayObject.prototype, \"_tempDisplayObjectParent\", {\n        /**\n         * @protected\n         * @member {PIXI.Container}\n         */\n        get: function () {\n            if (this.tempDisplayObjectParent === null) {\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                this.tempDisplayObjectParent = new TemporaryDisplayObject();\n            }\n            return this.tempDisplayObjectParent;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root\n     *\n     * ```\n     * const cacheParent = elem.enableTempParent();\n     * elem.updateTransform();\n     * elem.disableTempParent(cacheParent);\n     * ```\n     *\n     * @returns {PIXI.Container} current parent\n     */\n    DisplayObject.prototype.enableTempParent = function () {\n        var myParent = this.parent;\n        this.parent = this._tempDisplayObjectParent;\n        return myParent;\n    };\n    /**\n     * Pair method for `enableTempParent`\n     *\n     * @param {PIXI.Container} cacheParent - Actual parent of element\n     */\n    DisplayObject.prototype.disableTempParent = function (cacheParent) {\n        this.parent = cacheParent;\n    };\n    Object.defineProperty(DisplayObject.prototype, \"x\", {\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         * An alias to position.x\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this.position.x;\n        },\n        set: function (value) {\n            this.transform.position.x = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"y\", {\n        /**\n         * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n         * An alias to position.y\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this.position.y;\n        },\n        set: function (value) {\n            this.transform.position.y = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"worldTransform\", {\n        /**\n         * Current transform of the object based on world (parent) factors.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        get: function () {\n            return this.transform.worldTransform;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"localTransform\", {\n        /**\n         * Current transform of the object based on local factors: position, scale, other stuff.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        get: function () {\n            return this.transform.localTransform;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"position\", {\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         *\n         * @since PixiJS 4\n         * @member {PIXI.ObservablePoint}\n         */\n        get: function () {\n            return this.transform.position;\n        },\n        set: function (value) {\n            this.transform.position.copyFrom(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"scale\", {\n        /**\n         * The scale factors of this object along the local coordinate axes.\n         *\n         * The default scale is (1, 1).\n         *\n         * @since PixiJS 4\n         * @member {PIXI.ObservablePoint}\n         */\n        get: function () {\n            return this.transform.scale;\n        },\n        set: function (value) {\n            this.transform.scale.copyFrom(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"pivot\", {\n        /**\n         * The center of rotation, scaling, and skewing for this display object in its local space. The `position`\n         * is the projection of `pivot` in the parent's local space.\n         *\n         * By default, the pivot is the origin (0, 0).\n         *\n         * @since PixiJS 4\n         * @member {PIXI.ObservablePoint}\n         */\n        get: function () {\n            return this.transform.pivot;\n        },\n        set: function (value) {\n            this.transform.pivot.copyFrom(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"skew\", {\n        /**\n         * The skew factor for the object in radians.\n         *\n         * @since PixiJS 4\n         * @member {PIXI.ObservablePoint}\n         */\n        get: function () {\n            return this.transform.skew;\n        },\n        set: function (value) {\n            this.transform.skew.copyFrom(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"rotation\", {\n        /**\n         * The rotation of the object in radians.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this.transform.rotation;\n        },\n        set: function (value) {\n            this.transform.rotation = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"angle\", {\n        /**\n         * The angle of the object in degrees.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this.transform.rotation * math.RAD_TO_DEG;\n        },\n        set: function (value) {\n            this.transform.rotation = value * math.DEG_TO_RAD;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"zIndex\", {\n        /**\n         * The zIndex of the displayObject.\n         *\n         * If a container has the sortableChildren property set to true, children will be automatically\n         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n         * and thus rendered on top of other display objects within the same container.\n         *\n         * @member {number}\n         * @see PIXI.Container#sortableChildren\n         */\n        get: function () {\n            return this._zIndex;\n        },\n        set: function (value) {\n            this._zIndex = value;\n            if (this.parent) {\n                this.parent.sortDirty = true;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"worldVisible\", {\n        /**\n         * Indicates if the object is globally visible.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        get: function () {\n            var item = this;\n            do {\n                if (!item.visible) {\n                    return false;\n                }\n                item = item.parent;\n            } while (item);\n            return true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"mask\", {\n        /**\n         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n         * utilities shape clipping. To remove a mask, set this property to `null`.\n         *\n         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n         *\n         * @example\n         * const graphics = new PIXI.Graphics();\n         * graphics.beginFill(0xFF3300);\n         * graphics.drawRect(50, 250, 100, 100);\n         * graphics.endFill();\n         *\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.mask = graphics;\n         *\n         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         */\n        get: function () {\n            return this._mask;\n        },\n        set: function (value) {\n            if (this._mask) {\n                var maskObject = (this._mask.maskObject || this._mask);\n                maskObject.renderable = true;\n                maskObject.isMask = false;\n            }\n            this._mask = value;\n            if (this._mask) {\n                var maskObject = (this._mask.maskObject || this._mask);\n                maskObject.renderable = false;\n                maskObject.isMask = true;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return DisplayObject;\n}(utils.EventEmitter));\n/**\n * @private\n */\nvar TemporaryDisplayObject = /** @class */ (function (_super) {\n    __extends(TemporaryDisplayObject, _super);\n    function TemporaryDisplayObject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.sortDirty = null;\n        return _this;\n    }\n    return TemporaryDisplayObject;\n}(DisplayObject));\n/**\n * DisplayObject default updateTransform, does not update children of container.\n * Will crash if there's no parent element.\n *\n * @memberof PIXI.DisplayObject#\n * @method displayObjectUpdateTransform\n */\nDisplayObject.prototype.displayObjectUpdateTransform = DisplayObject.prototype.updateTransform;\n\nfunction sortChildren(a, b) {\n    if (a.zIndex === b.zIndex) {\n        return a._lastSortedIndex - b._lastSortedIndex;\n    }\n    return a.zIndex - b.zIndex;\n}\n/**\n * Container is a general-purpose display object that holds children. It also adds built-in support for advanced\n * rendering features like masking and filtering.\n *\n * It is the base class of all display objects that act as a container for other objects, including Graphics\n * and Sprite.\n *\n * ```js\n * import { BlurFilter } from '@pixi/filter-blur';\n * import { Container } from '@pixi/display';\n * import { Graphics } from '@pixi/graphics';\n * import { Sprite } from '@pixi/sprite';\n *\n * let container = new Container();\n * let sprite = Sprite.from(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/IaUrttj.png\");\n *\n * sprite.width = 512;\n * sprite.height = 512;\n *\n * // Adds a sprite as a child to this container. As a result, the sprite will be rendered whenever the container\n * // is rendered.\n * container.addChild(sprite);\n *\n * // Blurs whatever is rendered by the container\n * container.filters = [new BlurFilter()];\n *\n * // Only the contents within a circle at the center should be rendered onto the screen.\n * container.mask = new Graphics()\n *  .beginFill(0xffffff)\n *  .drawCircle(sprite.width / 2, sprite.height / 2, Math.min(sprite.width, sprite.height) / 2)\n *  .endFill();\n * ```\n *\n * @class\n * @extends PIXI.DisplayObject\n * @memberof PIXI\n */\nvar Container = /** @class */ (function (_super) {\n    __extends(Container, _super);\n    function Container() {\n        var _this = _super.call(this) || this;\n        /**\n         * The array of children of this container.\n         *\n         * @member {PIXI.DisplayObject[]}\n         * @readonly\n         */\n        _this.children = [];\n        /**\n         * If set to true, the container will sort its children by zIndex value\n         * when updateTransform() is called, or manually if sortChildren() is called.\n         *\n         * This actually changes the order of elements in the array, so should be treated\n         * as a basic solution that is not performant compared to other solutions,\n         * such as @link https://github.com/pixijs/pixi-display\n         *\n         * Also be aware of that this may not work nicely with the addChildAt() function,\n         * as the zIndex sorting may cause the child to automatically sorted to another position.\n         *\n         * @see PIXI.settings.SORTABLE_CHILDREN\n         *\n         * @member {boolean}\n         */\n        _this.sortableChildren = settings.settings.SORTABLE_CHILDREN;\n        /**\n         * Should children be sorted by zIndex at the next updateTransform call.\n         *\n         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n         *\n         * @member {boolean}\n         */\n        _this.sortDirty = false;\n        return _this;\n        /**\n         * Fired when a DisplayObject is added to this Container.\n         *\n         * @event PIXI.Container#childAdded\n         * @param {PIXI.DisplayObject} child - The child added to the Container.\n         * @param {PIXI.Container} container - The container that added the child.\n         * @param {number} index - The children's index of the added child.\n         */\n        /**\n         * Fired when a DisplayObject is removed from this Container.\n         *\n         * @event PIXI.DisplayObject#removedFrom\n         * @param {PIXI.DisplayObject} child - The child removed from the Container.\n         * @param {PIXI.Container} container - The container that removed removed the child.\n         * @param {number} index - The former children's index of the removed child\n         */\n    }\n    /**\n     * Overridable method that can be used by Container subclasses whenever the children array is modified\n     *\n     * @protected\n     */\n    Container.prototype.onChildrenChange = function (_length) {\n        /* empty */\n    };\n    /**\n     * Adds one or more children to the container.\n     *\n     * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n     *\n     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n     * @return {PIXI.DisplayObject} The first child that was added.\n     */\n    Container.prototype.addChild = function () {\n        var arguments$1 = arguments;\n\n        var children = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            children[_i] = arguments$1[_i];\n        }\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1) {\n            // loop through the array and add all children\n            for (var i = 0; i < children.length; i++) {\n                // eslint-disable-next-line prefer-rest-params\n                this.addChild(children[i]);\n            }\n        }\n        else {\n            var child = children[0];\n            // if the child has a parent then lets remove it as PixiJS objects can only exist in one place\n            if (child.parent) {\n                child.parent.removeChild(child);\n            }\n            child.parent = this;\n            this.sortDirty = true;\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n            this.children.push(child);\n            // ensure bounds will be recalculated\n            this._boundsID++;\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(this.children.length - 1);\n            this.emit('childAdded', child, this, this.children.length - 1);\n            child.emit('added', this);\n        }\n        return children[0];\n    };\n    /**\n     * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n     *\n     * @param {PIXI.DisplayObject} child - The child to add\n     * @param {number} index - The index to place the child in\n     * @return {PIXI.DisplayObject} The child that was added.\n     */\n    Container.prototype.addChildAt = function (child, index) {\n        if (index < 0 || index > this.children.length) {\n            throw new Error(child + \"addChildAt: The index \" + index + \" supplied is out of bounds \" + this.children.length);\n        }\n        if (child.parent) {\n            child.parent.removeChild(child);\n        }\n        child.parent = this;\n        this.sortDirty = true;\n        // ensure child transform will be recalculated\n        child.transform._parentID = -1;\n        this.children.splice(index, 0, child);\n        // ensure bounds will be recalculated\n        this._boundsID++;\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('added', this);\n        this.emit('childAdded', child, this, index);\n        return child;\n    };\n    /**\n     * Swaps the position of 2 Display Objects within this container.\n     *\n     * @param {PIXI.DisplayObject} child - First display object to swap\n     * @param {PIXI.DisplayObject} child2 - Second display object to swap\n     */\n    Container.prototype.swapChildren = function (child, child2) {\n        if (child === child2) {\n            return;\n        }\n        var index1 = this.getChildIndex(child);\n        var index2 = this.getChildIndex(child2);\n        this.children[index1] = child2;\n        this.children[index2] = child;\n        this.onChildrenChange(index1 < index2 ? index1 : index2);\n    };\n    /**\n     * Returns the index position of a child DisplayObject instance\n     *\n     * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify\n     * @return {number} The index position of the child display object to identify\n     */\n    Container.prototype.getChildIndex = function (child) {\n        var index = this.children.indexOf(child);\n        if (index === -1) {\n            throw new Error('The supplied DisplayObject must be a child of the caller');\n        }\n        return index;\n    };\n    /**\n     * Changes the position of an existing child in the display object container\n     *\n     * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number\n     * @param {number} index - The resulting index number for the child display object\n     */\n    Container.prototype.setChildIndex = function (child, index) {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error(\"The index \" + index + \" supplied is out of bounds \" + this.children.length);\n        }\n        var currentIndex = this.getChildIndex(child);\n        utils.removeItems(this.children, currentIndex, 1); // remove from old position\n        this.children.splice(index, 0, child); // add at new position\n        this.onChildrenChange(index);\n    };\n    /**\n     * Returns the child at the specified index\n     *\n     * @param {number} index - The index to get the child at\n     * @return {PIXI.DisplayObject} The child at the given index, if any.\n     */\n    Container.prototype.getChildAt = function (index) {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error(\"getChildAt: Index (\" + index + \") does not exist.\");\n        }\n        return this.children[index];\n    };\n    /**\n     * Removes one or more children from the container.\n     *\n     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n     * @return {PIXI.DisplayObject} The first child that was removed.\n     */\n    Container.prototype.removeChild = function () {\n        var arguments$1 = arguments;\n\n        var children = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            children[_i] = arguments$1[_i];\n        }\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1) {\n            // loop through the arguments property and remove all children\n            for (var i = 0; i < children.length; i++) {\n                this.removeChild(children[i]);\n            }\n        }\n        else {\n            var child = children[0];\n            var index = this.children.indexOf(child);\n            if (index === -1)\n                { return null; }\n            child.parent = null;\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n            utils.removeItems(this.children, index, 1);\n            // ensure bounds will be recalculated\n            this._boundsID++;\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(index);\n            child.emit('removed', this);\n            this.emit('childRemoved', child, this, index);\n        }\n        return children[0];\n    };\n    /**\n     * Removes a child from the specified index position.\n     *\n     * @param {number} index - The index to get the child from\n     * @return {PIXI.DisplayObject} The child that was removed.\n     */\n    Container.prototype.removeChildAt = function (index) {\n        var child = this.getChildAt(index);\n        // ensure child transform will be recalculated..\n        child.parent = null;\n        child.transform._parentID = -1;\n        utils.removeItems(this.children, index, 1);\n        // ensure bounds will be recalculated\n        this._boundsID++;\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('removed', this);\n        this.emit('childRemoved', child, this, index);\n        return child;\n    };\n    /**\n     * Removes all children from this container that are within the begin and end indexes.\n     *\n     * @param {number} [beginIndex=0] - The beginning position.\n     * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.\n     * @returns {PIXI.DisplayObject[]} List of removed children\n     */\n    Container.prototype.removeChildren = function (beginIndex, endIndex) {\n        if (beginIndex === void 0) { beginIndex = 0; }\n        if (endIndex === void 0) { endIndex = this.children.length; }\n        var begin = beginIndex;\n        var end = endIndex;\n        var range = end - begin;\n        var removed;\n        if (range > 0 && range <= end) {\n            removed = this.children.splice(begin, range);\n            for (var i = 0; i < removed.length; ++i) {\n                removed[i].parent = null;\n                if (removed[i].transform) {\n                    removed[i].transform._parentID = -1;\n                }\n            }\n            this._boundsID++;\n            this.onChildrenChange(beginIndex);\n            for (var i = 0; i < removed.length; ++i) {\n                removed[i].emit('removed', this);\n                this.emit('childRemoved', removed[i], this, i);\n            }\n            return removed;\n        }\n        else if (range === 0 && this.children.length === 0) {\n            return [];\n        }\n        throw new RangeError('removeChildren: numeric values are outside the acceptable range.');\n    };\n    /**\n     * Sorts children by zIndex. Previous order is maintained for 2 children with the same zIndex.\n     */\n    Container.prototype.sortChildren = function () {\n        var sortRequired = false;\n        for (var i = 0, j = this.children.length; i < j; ++i) {\n            var child = this.children[i];\n            child._lastSortedIndex = i;\n            if (!sortRequired && child.zIndex !== 0) {\n                sortRequired = true;\n            }\n        }\n        if (sortRequired && this.children.length > 1) {\n            this.children.sort(sortChildren);\n        }\n        this.sortDirty = false;\n    };\n    /**\n     * Updates the transform on all children of this container for rendering\n     */\n    Container.prototype.updateTransform = function () {\n        if (this.sortableChildren && this.sortDirty) {\n            this.sortChildren();\n        }\n        this._boundsID++;\n        this.transform.updateTransform(this.parent.transform);\n        // TODO: check render flags, how to process stuff here\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n        for (var i = 0, j = this.children.length; i < j; ++i) {\n            var child = this.children[i];\n            if (child.visible) {\n                child.updateTransform();\n            }\n        }\n    };\n    /**\n     * Recalculates the bounds of the container.\n     *\n     * This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\n     * is limited to its mask's bounds or filterArea, if any is applied.\n     */\n    Container.prototype.calculateBounds = function () {\n        this._bounds.clear();\n        this._calculateBounds();\n        for (var i = 0; i < this.children.length; i++) {\n            var child = this.children[i];\n            if (!child.visible || !child.renderable) {\n                continue;\n            }\n            child.calculateBounds();\n            // TODO: filter+mask, need to mask both somehow\n            if (child._mask) {\n                var maskObject = (child._mask.maskObject || child._mask);\n                maskObject.calculateBounds();\n                this._bounds.addBoundsMask(child._bounds, maskObject._bounds);\n            }\n            else if (child.filterArea) {\n                this._bounds.addBoundsArea(child._bounds, child.filterArea);\n            }\n            else {\n                this._bounds.addBounds(child._bounds);\n            }\n        }\n        this._bounds.updateID = this._boundsID;\n    };\n    /**\n     * Retrieves the local bounds of the displayObject as a rectangle object.\n     *\n     * Calling `getLocalBounds` may invalidate the `_bounds` of the whole subtree below. If using it inside a render()\n     * call, it is advised to call `getBounds()` immediately after to recalculate the world bounds of the subtree.\n     *\n     * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n     * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,\n     *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.\n     * @return {PIXI.Rectangle} The rectangular bounding area.\n     */\n    Container.prototype.getLocalBounds = function (rect, skipChildrenUpdate) {\n        if (skipChildrenUpdate === void 0) { skipChildrenUpdate = false; }\n        var result = _super.prototype.getLocalBounds.call(this, rect);\n        if (!skipChildrenUpdate) {\n            for (var i = 0, j = this.children.length; i < j; ++i) {\n                var child = this.children[i];\n                if (child.visible) {\n                    child.updateTransform();\n                }\n            }\n        }\n        return result;\n    };\n    /**\n     * Recalculates the content bounds of this object. This should be overriden to\n     * calculate the bounds of this specific object (not including children).\n     *\n     * @protected\n     */\n    Container.prototype._calculateBounds = function () {\n        // FILL IN//\n    };\n    /**\n     * Renders the object using the WebGL renderer.\n     *\n     * The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\n     * container itself. This `render` method will invoke it, and also invoke the `render` methods of all\n     * children afterward.\n     *\n     * If `renderable` or `visible` is false or if `worldAlpha` is not positive, this implementation will entirely\n     * skip rendering. See {@link PIXI.DisplayObject} for choosing between `renderable` or `visible`. Generally,\n     * setting alpha to zero is not recommended for purely skipping rendering.\n     *\n     * When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\n     * advised to employ **culling** to automatically skip rendering objects outside of the current screen. The\n     * [@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n     * [pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} packages do this out of the box.\n     *\n     * The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\n     * filtering is applied on a container. This does, however, break batching and can affect performance when\n     * masking and filtering is applied extensively throughout the scene graph.\n     *\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    Container.prototype.render = function (renderer) {\n        // if the object is not visible or the alpha is 0 then no need to render this element\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n            return;\n        }\n        // do a quick check to see if this element has a mask or a filter.\n        if (this._mask || (this.filters && this.filters.length)) {\n            this.renderAdvanced(renderer);\n        }\n        else {\n            this._render(renderer);\n            // simple render children!\n            for (var i = 0, j = this.children.length; i < j; ++i) {\n                this.children[i].render(renderer);\n            }\n        }\n    };\n    /**\n     * Render the object using the WebGL renderer and advanced features.\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    Container.prototype.renderAdvanced = function (renderer) {\n        renderer.batch.flush();\n        var filters = this.filters;\n        var mask = this._mask;\n        // push filter first as we need to ensure the stencil buffer is correct for any masking\n        if (filters) {\n            if (!this._enabledFilters) {\n                this._enabledFilters = [];\n            }\n            this._enabledFilters.length = 0;\n            for (var i = 0; i < filters.length; i++) {\n                if (filters[i].enabled) {\n                    this._enabledFilters.push(filters[i]);\n                }\n            }\n            if (this._enabledFilters.length) {\n                renderer.filter.push(this, this._enabledFilters);\n            }\n        }\n        if (mask) {\n            renderer.mask.push(this, this._mask);\n        }\n        // add this object to the batch, only rendered if it has a texture.\n        this._render(renderer);\n        // now loop through the children and make sure they get rendered\n        for (var i = 0, j = this.children.length; i < j; i++) {\n            this.children[i].render(renderer);\n        }\n        renderer.batch.flush();\n        if (mask) {\n            renderer.mask.pop(this);\n        }\n        if (filters && this._enabledFilters && this._enabledFilters.length) {\n            renderer.filter.pop();\n        }\n    };\n    /**\n     * To be overridden by the subclasses.\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    Container.prototype._render = function (_renderer) {\n        // this is where content itself gets rendered...\n    };\n    /**\n     * Removes all internal references and listeners as well as removes children from the display list.\n     * Do not use a Container after calling `destroy`.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    Container.prototype.destroy = function (options) {\n        _super.prototype.destroy.call(this);\n        this.sortDirty = false;\n        var destroyChildren = typeof options === 'boolean' ? options : options && options.children;\n        var oldChildren = this.removeChildren(0, this.children.length);\n        if (destroyChildren) {\n            for (var i = 0; i < oldChildren.length; ++i) {\n                oldChildren[i].destroy(options);\n            }\n        }\n    };\n    Object.defineProperty(Container.prototype, \"width\", {\n        /**\n         * The width of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this.scale.x * this.getLocalBounds().width;\n        },\n        set: function (value) {\n            var width = this.getLocalBounds().width;\n            if (width !== 0) {\n                this.scale.x = value / width;\n            }\n            else {\n                this.scale.x = 1;\n            }\n            this._width = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Container.prototype, \"height\", {\n        /**\n         * The height of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this.scale.y * this.getLocalBounds().height;\n        },\n        set: function (value) {\n            var height = this.getLocalBounds().height;\n            if (height !== 0) {\n                this.scale.y = value / height;\n            }\n            else {\n                this.scale.y = 1;\n            }\n            this._height = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Container;\n}(DisplayObject));\n/**\n * Container default updateTransform, does update children of container.\n * Will crash if there's no parent element.\n *\n * @memberof PIXI.Container#\n * @method containerUpdateTransform\n */\nContainer.prototype.containerUpdateTransform = Container.prototype.updateTransform;\n\nexports.Bounds = Bounds;\nexports.Container = Container;\nexports.DisplayObject = DisplayObject;\nexports.TemporaryDisplayObject = TemporaryDisplayObject;\n//# sourceMappingURL=display.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","sortChildren","a","zIndex","_lastSortedIndex","defineProperty","value","settings","math","utils","SORTABLE_CHILDREN","Bounds","minY","minX","Infinity","maxY","maxX","rect","updateID","isEmpty","Bounds.prototype.isEmpty","clear","Bounds.prototype.clear","getRectangle","Bounds.prototype.getRectangle","Rectangle","EMPTY","x","y","width","height","addPoint","Bounds.prototype.addPoint","point","Math","min","max","addPointMatrix","Bounds.prototype.addPointMatrix","matrix","c","tx","ty","addQuad","Bounds.prototype.addQuad","vertices","addFrame","Bounds.prototype.addFrame","transform","x0","y0","x1","y1","addFrameMatrix","worldTransform","Bounds.prototype.addFrameMatrix","addVertexData","Bounds.prototype.addVertexData","vertexData","beginOffset","endOffset","i","addVertices","Bounds.prototype.addVertices","addVerticesMatrix","Bounds.prototype.addVerticesMatrix","padX","padY","rawX","rawY","addBounds","Bounds.prototype.addBounds","bounds","addBoundsMask","Bounds.prototype.addBoundsMask","mask","_minX","_minY","_maxX","_maxY","addBoundsMatrix","Bounds.prototype.addBoundsMatrix","addBoundsArea","Bounds.prototype.addBoundsArea","area","pad","Bounds.prototype.pad","paddingX","paddingY","addFramePad","Bounds.prototype.addFramePad","setPrototypeOf","__proto__","Array","p","hasOwnProperty","DisplayObject","_super","_this","call","tempDisplayObjectParent","Transform","alpha","visible","renderable","parent","worldAlpha","_zIndex","filterArea","filters","_enabledFilters","_bounds","_localBounds","_boundsID","_boundsRect","_localBoundsRect","_mask","_destroyed","isSprite","isMask","mixin","DisplayObject.mixin","source","keys","length","propertyName","getOwnPropertyDescriptor","get","enumerable","configurable","_recursivePostUpdateTransform","DisplayObject.prototype._recursivePostUpdateTransform","updateTransform","_tempDisplayObjectParent","DisplayObject.prototype.updateTransform","getBounds","DisplayObject.prototype.getBounds","skipUpdate","calculateBounds","getLocalBounds","DisplayObject.prototype.getLocalBounds","transformRef","parentRef","worldBounds","worldBoundsID","toGlobal","DisplayObject.prototype.toGlobal","position","displayObjectUpdateTransform","apply","toLocal","DisplayObject.prototype.toLocal","from","applyInverse","setParent","DisplayObject.prototype.setParent","container","addChild","Error","setTransform","DisplayObject.prototype.setTransform","scaleX","scaleY","rotation","skewX","skewY","pivotX","pivotY","scale","skew","pivot","destroy","DisplayObject.prototype.destroy","_options","removeChild","emit","removeAllListeners","hitArea","interactiveChildren","interactive","TemporaryDisplayObject","enableTempParent","DisplayObject.prototype.enableTempParent","myParent","disableTempParent","DisplayObject.prototype.disableTempParent","cacheParent","set","localTransform","copyFrom","RAD_TO_DEG","DEG_TO_RAD","sortDirty","item","maskObject","EventEmitter","arguments","Container","children","sortableChildren","onChildrenChange","Container.prototype.onChildrenChange","_length","Container.prototype.addChild","arguments$1","_i","child","_parentID","push","addChildAt","Container.prototype.addChildAt","index","splice","swapChildren","Container.prototype.swapChildren","child2","index1","getChildIndex","index2","Container.prototype.getChildIndex","indexOf","setChildIndex","Container.prototype.setChildIndex","currentIndex","removeItems","getChildAt","Container.prototype.getChildAt","Container.prototype.removeChild","removeChildAt","Container.prototype.removeChildAt","removeChildren","Container.prototype.removeChildren","beginIndex","endIndex","begin","range","end","removed","RangeError","Container.prototype.sortChildren","sortRequired","j","sort","Container.prototype.updateTransform","Container.prototype.calculateBounds","_calculateBounds","Container.prototype.getLocalBounds","skipChildrenUpdate","result","Container.prototype._calculateBounds","render","Container.prototype.render","renderer","renderAdvanced","_render","Container.prototype.renderAdvanced","batch","flush","enabled","filter","pop","Container.prototype._render","_renderer","Container.prototype.destroy","options","destroyChildren","oldChildren","_width","_height","containerUpdateTransform"]
}
