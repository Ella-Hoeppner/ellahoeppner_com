{
"version":3,
"file":"module$node_modules$$pixi$compressed_textures$dist$cjs$compressed_textures.js",
"lineCount":62,
"mappings":"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",
"sources":["node_modules/@pixi/compressed-textures/dist/cjs/compressed-textures.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$compressed_textures$dist$cjs$compressed_textures\"] = function(global,require,module,exports) {\n/*!\n * @pixi/compressed-textures - v6.1.1\n * Compiled Fri, 06 Aug 2021 03:30:25 UTC\n *\n * @pixi/compressed-textures is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar core = require('@pixi/core');\nvar loaders = require('@pixi/loaders');\nvar utils = require('@pixi/utils');\nvar constants = require('@pixi/constants');\n\nvar _a;\n(function (INTERNAL_FORMATS) {\n    // WEBGL_compressed_texture_s3tc\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB_S3TC_DXT1_EXT\"] = 33776] = \"COMPRESSED_RGB_S3TC_DXT1_EXT\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_S3TC_DXT1_EXT\"] = 33777] = \"COMPRESSED_RGBA_S3TC_DXT1_EXT\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_S3TC_DXT3_EXT\"] = 33778] = \"COMPRESSED_RGBA_S3TC_DXT3_EXT\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_S3TC_DXT5_EXT\"] = 33779] = \"COMPRESSED_RGBA_S3TC_DXT5_EXT\";\n    // WEBGL_compressed_texture_s3tc_srgb\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT\"] = 35917] = \"COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT\"] = 35918] = \"COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\"] = 35919] = \"COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB_S3TC_DXT1_EXT\"] = 35916] = \"COMPRESSED_SRGB_S3TC_DXT1_EXT\";\n    // WEBGL_compressed_texture_etc\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_R11_EAC\"] = 37488] = \"COMPRESSED_R11_EAC\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SIGNED_R11_EAC\"] = 37489] = \"COMPRESSED_SIGNED_R11_EAC\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RG11_EAC\"] = 37490] = \"COMPRESSED_RG11_EAC\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SIGNED_RG11_EAC\"] = 37491] = \"COMPRESSED_SIGNED_RG11_EAC\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB8_ETC2\"] = 37492] = \"COMPRESSED_RGB8_ETC2\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA8_ETC2_EAC\"] = 37496] = \"COMPRESSED_RGBA8_ETC2_EAC\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB8_ETC2\"] = 37493] = \"COMPRESSED_SRGB8_ETC2\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\"] = 37497] = \"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\"] = 37494] = \"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\"] = 37495] = \"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\";\n    // WEBGL_compressed_texture_pvrtc\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\"] = 35840] = \"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\"] = 35842] = \"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB_PVRTC_2BPPV1_IMG\"] = 35841] = \"COMPRESSED_RGB_PVRTC_2BPPV1_IMG\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\"] = 35843] = \"COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\";\n    // WEBGL_compressed_texture_etc1\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB_ETC1_WEBGL\"] = 36196] = \"COMPRESSED_RGB_ETC1_WEBGL\";\n    // WEBGL_compressed_texture_atc\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGB_ATC_WEBGL\"] = 35986] = \"COMPRESSED_RGB_ATC_WEBGL\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL\"] = 35986] = \"COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL\";\n    INTERNAL_FORMATS[INTERNAL_FORMATS[\"COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL\"] = 34798] = \"COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL\";\n})(exports.INTERNAL_FORMATS || (exports.INTERNAL_FORMATS = {}));\n/**\n * Maps the compressed texture formats in {@link PIXI.INTERNAL_FORMATS} to the number of bytes taken by\n * each texel.\n *\n * @memberof PIXI\n * @static\n * @ignore\n */\nvar INTERNAL_FORMAT_TO_BYTES_PER_PIXEL = (_a = {},\n    // WEBGL_compressed_texture_s3tc\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_RGB_S3TC_DXT1_EXT] = 0.5,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT] = 0.5,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT] = 1,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT] = 1,\n    // WEBGL_compressed_texture_s3tc\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_SRGB_S3TC_DXT1_EXT] = 0.5,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT] = 0.5,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT] = 1,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT] = 1,\n    // WEBGL_compressed_texture_etc\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_R11_EAC] = 0.5,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_SIGNED_R11_EAC] = 0.5,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_RG11_EAC] = 1,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_SIGNED_RG11_EAC] = 1,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_RGB8_ETC2] = 0.5,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_RGBA8_ETC2_EAC] = 1,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_SRGB8_ETC2] = 0.5,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC] = 1,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2] = 0.5,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2] = 0.5,\n    // WEBGL_compressed_texture_pvrtc\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG] = 0.5,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG] = 0.5,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_2BPPV1_IMG] = 0.25,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG] = 0.25,\n    // WEBGL_compressed_texture_etc1\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_RGB_ETC1_WEBGL] = 0.5,\n    // @see https://www.khronos.org/registry/OpenGL/extensions/AMD/AMD_compressed_ATC_texture.txt\n    // WEBGL_compressed_texture_atc\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_RGB_ATC_WEBGL] = 0.5,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL] = 1,\n    _a[exports.INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL] = 1,\n    _a);\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) { throw t[1]; } return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) { throw new TypeError(\"Generator is already executing.\"); }\r\n        while (_) { try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) { return t; }\r\n            if (y = 0, t) { op = [op[0] & 2, t.value]; }\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) { _.ops.pop(); }\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; } }\r\n        if (op[0] & 5) { throw op[1]; } return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\n\n/**\n * Resource that fetches texture data over the network and stores it in a buffer.\n *\n * @class\n * @extends PIXI.Resource\n * @memberof PIXI\n */\nvar BlobResource = /** @class */ (function (_super) {\n    __extends(BlobResource, _super);\n    /**\n     * @param {string} url - the URL of the texture file\n     * @param {boolean}[autoLoad] - whether to fetch the data immediately;\n     *  you can fetch it later via {@link BlobResource#load}\n     */\n    function BlobResource(source, options) {\n        if (options === void 0) { options = { width: 1, height: 1, autoLoad: true }; }\n        var _this = this;\n        var origin;\n        var data;\n        if (typeof source === 'string') {\n            origin = source;\n            data = new Uint8Array();\n        }\n        else {\n            origin = null;\n            data = source;\n        }\n        _this = _super.call(this, data, options) || this;\n        /**\n         * The URL of the texture file\n         * @member {string}\n         */\n        _this.origin = origin;\n        /**\n         * The viewable buffer on the data\n         * @member {ViewableBuffer}\n         */\n        // HINT: BlobResource allows \"null\" sources, assuming the child class provides an alternative\n        _this.buffer = data ? new core.ViewableBuffer(data) : null;\n        // Allow autoLoad = \"undefined\" still load the resource by default\n        if (_this.origin && options.autoLoad !== false) {\n            _this.load();\n        }\n        if (data && data.length) {\n            _this.loaded = true;\n            _this.onBlobLoaded(_this.buffer.rawBinaryData);\n        }\n        return _this;\n    }\n    BlobResource.prototype.onBlobLoaded = function (_data) {\n        // TODO: Override this method\n    };\n    /**\n     * Loads the blob\n     */\n    BlobResource.prototype.load = function () {\n        return __awaiter(this, void 0, Promise, function () {\n            var response, blob, arrayBuffer;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, fetch(this.origin)];\n                    case 1:\n                        response = _a.sent();\n                        return [4 /*yield*/, response.blob()];\n                    case 2:\n                        blob = _a.sent();\n                        return [4 /*yield*/, blob.arrayBuffer()];\n                    case 3:\n                        arrayBuffer = _a.sent();\n                        this.data = new Uint32Array(arrayBuffer);\n                        this.buffer = new core.ViewableBuffer(arrayBuffer);\n                        this.loaded = true;\n                        this.onBlobLoaded(arrayBuffer);\n                        this.update();\n                        return [2 /*return*/, this];\n                }\n            });\n        });\n    };\n    return BlobResource;\n}(core.BufferResource));\n\n/**\n * Resource for compressed texture formats, as follows: S3TC/DXTn (& their sRGB formats), ATC, ASTC, ETC 1/2, PVRTC.\n *\n * Compressed textures improve performance when rendering is texture-bound. The texture data stays compressed in\n * graphics memory, increasing memory locality and speeding up texture fetches. These formats can also be used to store\n * more detail in the same amount of memory.\n *\n * For most developers, container file formats are a better abstraction instead of directly handling raw texture\n * data. PixiJS provides native support for the following texture file formats (via {@link PIXI.Loader}):\n *\n * * **.dds** - the DirectDraw Surface file format stores DXTn (DXT-1,3,5) data. See {@link PIXI.DDSLoader}\n * * **.ktx** - the Khronos Texture Container file format supports storing all the supported WebGL compression formats.\n *  See {@link PIXI.KTXLoader}.\n * * **.basis** - the BASIS supercompressed file format stores texture data in an internal format that is transcoded\n *  to the compression format supported on the device at _runtime_. It also supports transcoding into a uncompressed\n *  format as a fallback; you must install the `@pixi/basis-loader`, `@pixi/basis-transcoder` packages separately to\n *  use these files. See {@link PIXI.BasisLoader}.\n *\n * The loaders for the aforementioned formats use `CompressedTextureResource` internally. It is strongly suggested that\n * they be used instead.\n *\n * ## Working directly with CompressedTextureResource\n *\n * Since `CompressedTextureResource` inherits `BlobResource`, you can provide it a URL pointing to a file containing\n * the raw texture data (with no file headers!):\n *\n * ```js\n * // The resource backing the texture data for your textures.\n * // NOTE: You can also provide a ArrayBufferView instead of a URL. This is used when loading data from a container file\n * //   format such as KTX, DDS, or BASIS.\n * const compressedResource = new PIXI.CompressedTextureResource(\"bunny.dxt5\", {\n *   format: PIXI.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n *   width: 256,\n *   height: 256\n * });\n *\n * // You can create a base-texture to the cache, so that future `Texture`s can be created using the `Texture.from` API.\n * const baseTexture = new PIXI.BaseTexture(compressedResource, { pmaMode: PIXI.ALPHA_MODES.NPM });\n *\n * // Create a Texture to add to the TextureCache\n * const texture = new PIXI.Texture(baseTexture);\n *\n * // Add baseTexture & texture to the global texture cache\n * PIXI.BaseTexture.addToCache(baseTexture, \"bunny.dxt5\");\n * PIXI.Texture.addToCache(texture, \"bunny.dxt5\");\n * ```\n *\n * @memberof PIXI\n */\nvar CompressedTextureResource = /** @class */ (function (_super) {\n    __extends(CompressedTextureResource, _super);\n    /**\n     * @param source - the buffer/URL holding the compressed texture data\n     * @param options\n     * @param {PIXI.INTERNAL_FORMATS} options.format - the compression format\n     * @param {number} options.width - the image width in pixels.\n     * @param {number} options.height - the image height in pixels.\n     * @param {number} [options.level=1] - the mipmap levels stored in the compressed texture, including level 0.\n     * @param {number} [options.levelBuffers] - the buffers for each mipmap level. `CompressedTextureResource` can allows you\n     *      to pass `null` for `source`, for cases where each level is stored in non-contiguous memory.\n     */\n    function CompressedTextureResource(source, options) {\n        var _this = _super.call(this, source, options) || this;\n        _this.format = options.format;\n        _this.levels = options.levels || 1;\n        _this._width = options.width;\n        _this._height = options.height;\n        _this._extension = CompressedTextureResource._formatToExtension(_this.format);\n        if (options.levelBuffers || _this.buffer) {\n            // ViewableBuffer doesn't support byteOffset :-( so allow source to be Uint8Array\n            _this._levelBuffers = options.levelBuffers\n                || CompressedTextureResource._createLevelBuffers(source instanceof Uint8Array ? source : _this.buffer.uint8View, _this.format, _this.levels, 4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n                _this.width, _this.height);\n        }\n        return _this;\n    }\n    /**\n     * @override\n     * @param renderer - A reference to the current renderer\n     * @param _texture - the texture\n     * @param _glTexture - texture instance for this webgl context\n     */\n    CompressedTextureResource.prototype.upload = function (renderer, _texture, _glTexture) {\n        var gl = renderer.gl;\n        var extension = renderer.context.extensions[this._extension];\n        if (!extension) {\n            throw new Error(this._extension + \" textures are not supported on the current machine\");\n        }\n        if (!this._levelBuffers) {\n            // Do not try to upload data before BlobResource loads, unless the levelBuffers were provided directly!\n            return false;\n        }\n        for (var i = 0, j = this.levels; i < j; i++) {\n            var _a = this._levelBuffers[i], levelID = _a.levelID, levelWidth = _a.levelWidth, levelHeight = _a.levelHeight, levelBuffer = _a.levelBuffer;\n            gl.compressedTexImage2D(gl.TEXTURE_2D, levelID, this.format, levelWidth, levelHeight, 0, levelBuffer);\n        }\n        return true;\n    };\n    /** @protected */\n    CompressedTextureResource.prototype.onBlobLoaded = function () {\n        this._levelBuffers = CompressedTextureResource._createLevelBuffers(this.buffer.uint8View, this.format, this.levels, 4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n        this.width, this.height);\n    };\n    /**\n     * Returns the key (to ContextSystem#extensions) for the WebGL extension supporting the compression format\n     *\n     * @private\n     * @param format - the compression format to get the extension for.\n     */\n    CompressedTextureResource._formatToExtension = function (format) {\n        if (format >= 0x83F0 && format <= 0x83F3) {\n            return 's3tc';\n        }\n        else if (format >= 0x9270 && format <= 0x9279) {\n            return 'etc';\n        }\n        else if (format >= 0x8C00 && format <= 0x8C03) {\n            return 'pvrtc';\n        }\n        else if (format >= 0x8D64) {\n            return 'etc1';\n        }\n        else if (format >= 0x8C92 && format <= 0x87EE) {\n            return 'atc';\n        }\n        throw new Error('Invalid (compressed) texture format given!');\n    };\n    /**\n     * Pre-creates buffer views for each mipmap level\n     *\n     * @private\n     * @param buffer -\n     * @param format - compression formats\n     * @param levels - mipmap levels\n     * @param blockWidth -\n     * @param blockHeight -\n     * @param imageWidth - width of the image in pixels\n     * @param imageHeight - height of the image in pixels\n     */\n    CompressedTextureResource._createLevelBuffers = function (buffer, format, levels, blockWidth, blockHeight, imageWidth, imageHeight) {\n        // The byte-size of the first level buffer\n        var buffers = new Array(levels);\n        var offset = buffer.byteOffset;\n        var levelWidth = imageWidth;\n        var levelHeight = imageHeight;\n        var alignedLevelWidth = (levelWidth + blockWidth - 1) & ~(blockWidth - 1);\n        var alignedLevelHeight = (levelHeight + blockHeight - 1) & ~(blockHeight - 1);\n        var levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n        for (var i = 0; i < levels; i++) {\n            buffers[i] = {\n                levelID: i,\n                levelWidth: levels > 1 ? levelWidth : alignedLevelWidth,\n                levelHeight: levels > 1 ? levelHeight : alignedLevelHeight,\n                levelBuffer: new Uint8Array(buffer.buffer, offset, levelSize)\n            };\n            offset += levelSize;\n            // Calculate levelBuffer dimensions for next iteration\n            levelWidth = (levelWidth >> 1) || 1;\n            levelHeight = (levelHeight >> 1) || 1;\n            alignedLevelWidth = (levelWidth + blockWidth - 1) & ~(blockWidth - 1);\n            alignedLevelHeight = (levelHeight + blockHeight - 1) & ~(blockHeight - 1);\n            levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n        }\n        return buffers;\n    };\n    return CompressedTextureResource;\n}(BlobResource));\n\n/* eslint-enable camelcase */\n/**\n * Loader plugin for handling compressed textures for all platforms.\n *\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nvar CompressedTextureLoader = /** @class */ (function () {\n    function CompressedTextureLoader() {\n    }\n    /**\n     * Called after a compressed-textures manifest is loaded.\n     *\n     * This will then load the correct compression format for the device. Your manifest should adhere\n     * to the following schema:\n     *\n     * ```js\n     * import { INTERNAL_FORMATS } from '@pixi/constants';\n     *\n     * type CompressedTextureManifest = {\n     *  textures: Array<{ src: string, format?: keyof INTERNAL_FORMATS}>,\n     *  cacheID: string;\n     * };\n     * ```\n     *\n     * This is an example of a .json manifest file\n     *\n     * ```json\n     * {\n     *   \"cacheID\":\"asset\",\n     *   \"textures\":[\n     *     { \"src\":\"asset.fallback.png\" },\n     *     { \"format\":\"COMPRESSED_RGBA_S3TC_DXT5_EXT\", \"src\":\"asset.s3tc.ktx\" },\n     *     { \"format\":\"COMPRESSED_RGBA8_ETC2_EAC\", \"src\":\"asset.etc.ktx\" },\n     *     { \"format\":\"RGBA_PVRTC_4BPPV1_IMG\", \"src\":\"asset.pvrtc.ktx\" }\n     *   ]\n     * }\n     * ```\n     */\n    CompressedTextureLoader.use = function (resource, next) {\n        var data = resource.data;\n        var loader = this;\n        if (resource.type === loaders.LoaderResource.TYPE.JSON\n            && data\n            && data.cacheID\n            && data.textures) {\n            var textures = data.textures;\n            var textureURL = void 0;\n            var fallbackURL = void 0;\n            // Search for an extension that holds one the formats\n            for (var i = 0, j = textures.length; i < j; i++) {\n                var texture = textures[i];\n                var url_1 = texture.src;\n                var format = texture.format;\n                if (!format) {\n                    fallbackURL = url_1;\n                }\n                if (CompressedTextureLoader.textureFormats[format]) {\n                    textureURL = url_1;\n                    break;\n                }\n            }\n            textureURL = textureURL || fallbackURL;\n            // Make sure we have a URL\n            if (!textureURL) {\n                next(new Error(\"Cannot load compressed-textures in \" + resource.url + \", make sure you provide a fallback\"));\n                return;\n            }\n            if (textureURL === resource.url) {\n                // Prevent infinite loops\n                next(new Error('URL of compressed texture cannot be the same as the manifest\\'s URL'));\n                return;\n            }\n            var loadOptions = {\n                crossOrigin: resource.crossOrigin,\n                metadata: resource.metadata.imageMetadata,\n                parentResource: resource\n            };\n            var resourcePath = utils.url.resolve(resource.url.replace(loader.baseUrl, ''), textureURL);\n            var resourceName = data.cacheID;\n            // The appropriate loader should register the texture\n            loader.add(resourceName, resourcePath, loadOptions, function (res) {\n                if (res.error) {\n                    next(res.error);\n                    return;\n                }\n                var _a = res.texture, texture = _a === void 0 ? null : _a, _b = res.textures, textures = _b === void 0 ? {} : _b;\n                // Make sure texture/textures is assigned to parent resource\n                Object.assign(resource, { texture: texture, textures: textures });\n                // Pass along any error\n                next();\n            });\n        }\n        else {\n            next();\n        }\n    };\n    /**\n     * Detects the available compressed texture extensions on the device.\n     * @ignore\n     */\n    CompressedTextureLoader.add = function () {\n        // Auto-detect WebGL compressed-texture extensions\n        var canvas = document.createElement('canvas');\n        var gl = canvas.getContext('webgl');\n        if (!gl) {\n            console.warn('WebGL not available for compressed textures. Silently failing.');\n            return;\n        }\n        var extensions = {\n            s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'),\n            etc: gl.getExtension('WEBGL_compressed_texture_etc'),\n            etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),\n            pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc')\n                || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n            atc: gl.getExtension('WEBGL_compressed_texture_atc'),\n            astc: gl.getExtension('WEBGL_compressed_texture_astc')\n        };\n        CompressedTextureLoader.textureExtensions = extensions;\n        CompressedTextureLoader.textureFormats = {};\n        // Assign all available compressed-texture formats\n        for (var extensionName in extensions) {\n            var extension = extensions[extensionName];\n            if (!extension) {\n                continue;\n            }\n            Object.assign(CompressedTextureLoader.textureFormats, Object.getPrototypeOf(extension));\n        }\n    };\n    return CompressedTextureLoader;\n}());\n\n/**\n * Creates base-textures and textures for each compressed-texture resource and adds them into the global\n * texture cache. The first texture has two IDs - `${url}`, `${url}-1`; while the rest have an ID of the\n * form `${url}-i`.\n *\n * @param url - the original address of the resources\n * @param resources - the resources backing texture data\n * @ignore\n */\nfunction registerCompressedTextures(url, resources, metadata) {\n    var result = {\n        textures: {},\n        texture: null,\n    };\n    if (!resources) {\n        return result;\n    }\n    var textures = resources.map(function (resource) {\n        return (new core.Texture(new core.BaseTexture(resource, Object.assign({\n            mipmap: constants.MIPMAP_MODES.OFF,\n            alphaMode: constants.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA\n        }, metadata))));\n    });\n    textures.forEach(function (texture, i) {\n        var baseTexture = texture.baseTexture;\n        var cacheID = url + \"-\" + (i + 1);\n        core.BaseTexture.addToCache(baseTexture, cacheID);\n        core.Texture.addToCache(texture, cacheID);\n        if (i === 0) {\n            core.BaseTexture.addToCache(baseTexture, url);\n            core.Texture.addToCache(texture, url);\n            result.texture = texture;\n        }\n        result.textures[cacheID] = texture;\n    });\n    return result;\n}\n\nvar _a$1, _b;\n// Set DDS files to be loaded as an ArrayBuffer\nloaders.LoaderResource.setExtensionXhrType('dds', loaders.LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\nvar DDS_MAGIC_SIZE = 4;\nvar DDS_HEADER_SIZE = 124;\nvar DDS_HEADER_PF_SIZE = 32;\nvar DDS_HEADER_DX10_SIZE = 20;\n// DDS file format magic word\nvar DDS_MAGIC = 0x20534444;\n/**\n * DWORD offsets of the DDS file header fields (relative to file start).\n *\n * @ignore\n */\nvar DDS_FIELDS = {\n    SIZE: 1,\n    FLAGS: 2,\n    HEIGHT: 3,\n    WIDTH: 4,\n    MIPMAP_COUNT: 7,\n    PIXEL_FORMAT: 19,\n};\n/**\n * DWORD offsets of the DDS PIXEL_FORMAT fields.\n *\n * @ignore\n */\nvar DDS_PF_FIELDS = {\n    SIZE: 0,\n    FLAGS: 1,\n    FOURCC: 2,\n    RGB_BITCOUNT: 3,\n    R_BIT_MASK: 4,\n    G_BIT_MASK: 5,\n    B_BIT_MASK: 6,\n    A_BIT_MASK: 7\n};\n/**\n * DWORD offsets of the DDS_HEADER_DX10 fields.\n *\n * @ignore\n */\nvar DDS_DX10_FIELDS = {\n    DXGI_FORMAT: 0,\n    RESOURCE_DIMENSION: 1,\n    MISC_FLAG: 2,\n    ARRAY_SIZE: 3,\n    MISC_FLAGS2: 4\n};\n/**\n * @see https://docs.microsoft.com/en-us/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format\n * @ignore\n */\n// This is way over-blown for us! Lend us a hand, and remove the ones that aren't used (but set the remaining\n// ones to their correct value)\nvar DXGI_FORMAT;\n(function (DXGI_FORMAT) {\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_UNKNOWN\"] = 0] = \"DXGI_FORMAT_UNKNOWN\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32A32_TYPELESS\"] = 1] = \"DXGI_FORMAT_R32G32B32A32_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32A32_FLOAT\"] = 2] = \"DXGI_FORMAT_R32G32B32A32_FLOAT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32A32_UINT\"] = 3] = \"DXGI_FORMAT_R32G32B32A32_UINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32A32_SINT\"] = 4] = \"DXGI_FORMAT_R32G32B32A32_SINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32_TYPELESS\"] = 5] = \"DXGI_FORMAT_R32G32B32_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32_FLOAT\"] = 6] = \"DXGI_FORMAT_R32G32B32_FLOAT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32_UINT\"] = 7] = \"DXGI_FORMAT_R32G32B32_UINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32B32_SINT\"] = 8] = \"DXGI_FORMAT_R32G32B32_SINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_TYPELESS\"] = 9] = \"DXGI_FORMAT_R16G16B16A16_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_FLOAT\"] = 10] = \"DXGI_FORMAT_R16G16B16A16_FLOAT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_UNORM\"] = 11] = \"DXGI_FORMAT_R16G16B16A16_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_UINT\"] = 12] = \"DXGI_FORMAT_R16G16B16A16_UINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_SNORM\"] = 13] = \"DXGI_FORMAT_R16G16B16A16_SNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16B16A16_SINT\"] = 14] = \"DXGI_FORMAT_R16G16B16A16_SINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32_TYPELESS\"] = 15] = \"DXGI_FORMAT_R32G32_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32_FLOAT\"] = 16] = \"DXGI_FORMAT_R32G32_FLOAT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32_UINT\"] = 17] = \"DXGI_FORMAT_R32G32_UINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G32_SINT\"] = 18] = \"DXGI_FORMAT_R32G32_SINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32G8X24_TYPELESS\"] = 19] = \"DXGI_FORMAT_R32G8X24_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_D32_FLOAT_S8X24_UINT\"] = 20] = \"DXGI_FORMAT_D32_FLOAT_S8X24_UINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS\"] = 21] = \"DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_X32_TYPELESS_G8X24_UINT\"] = 22] = \"DXGI_FORMAT_X32_TYPELESS_G8X24_UINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R10G10B10A2_TYPELESS\"] = 23] = \"DXGI_FORMAT_R10G10B10A2_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R10G10B10A2_UNORM\"] = 24] = \"DXGI_FORMAT_R10G10B10A2_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R10G10B10A2_UINT\"] = 25] = \"DXGI_FORMAT_R10G10B10A2_UINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R11G11B10_FLOAT\"] = 26] = \"DXGI_FORMAT_R11G11B10_FLOAT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_TYPELESS\"] = 27] = \"DXGI_FORMAT_R8G8B8A8_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_UNORM\"] = 28] = \"DXGI_FORMAT_R8G8B8A8_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_UNORM_SRGB\"] = 29] = \"DXGI_FORMAT_R8G8B8A8_UNORM_SRGB\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_UINT\"] = 30] = \"DXGI_FORMAT_R8G8B8A8_UINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_SNORM\"] = 31] = \"DXGI_FORMAT_R8G8B8A8_SNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8B8A8_SINT\"] = 32] = \"DXGI_FORMAT_R8G8B8A8_SINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_TYPELESS\"] = 33] = \"DXGI_FORMAT_R16G16_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_FLOAT\"] = 34] = \"DXGI_FORMAT_R16G16_FLOAT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_UNORM\"] = 35] = \"DXGI_FORMAT_R16G16_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_UINT\"] = 36] = \"DXGI_FORMAT_R16G16_UINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_SNORM\"] = 37] = \"DXGI_FORMAT_R16G16_SNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16G16_SINT\"] = 38] = \"DXGI_FORMAT_R16G16_SINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32_TYPELESS\"] = 39] = \"DXGI_FORMAT_R32_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_D32_FLOAT\"] = 40] = \"DXGI_FORMAT_D32_FLOAT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32_FLOAT\"] = 41] = \"DXGI_FORMAT_R32_FLOAT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32_UINT\"] = 42] = \"DXGI_FORMAT_R32_UINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R32_SINT\"] = 43] = \"DXGI_FORMAT_R32_SINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R24G8_TYPELESS\"] = 44] = \"DXGI_FORMAT_R24G8_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_D24_UNORM_S8_UINT\"] = 45] = \"DXGI_FORMAT_D24_UNORM_S8_UINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R24_UNORM_X8_TYPELESS\"] = 46] = \"DXGI_FORMAT_R24_UNORM_X8_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_X24_TYPELESS_G8_UINT\"] = 47] = \"DXGI_FORMAT_X24_TYPELESS_G8_UINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_TYPELESS\"] = 48] = \"DXGI_FORMAT_R8G8_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_UNORM\"] = 49] = \"DXGI_FORMAT_R8G8_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_UINT\"] = 50] = \"DXGI_FORMAT_R8G8_UINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_SNORM\"] = 51] = \"DXGI_FORMAT_R8G8_SNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_SINT\"] = 52] = \"DXGI_FORMAT_R8G8_SINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_TYPELESS\"] = 53] = \"DXGI_FORMAT_R16_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_FLOAT\"] = 54] = \"DXGI_FORMAT_R16_FLOAT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_D16_UNORM\"] = 55] = \"DXGI_FORMAT_D16_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_UNORM\"] = 56] = \"DXGI_FORMAT_R16_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_UINT\"] = 57] = \"DXGI_FORMAT_R16_UINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_SNORM\"] = 58] = \"DXGI_FORMAT_R16_SNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R16_SINT\"] = 59] = \"DXGI_FORMAT_R16_SINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8_TYPELESS\"] = 60] = \"DXGI_FORMAT_R8_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8_UNORM\"] = 61] = \"DXGI_FORMAT_R8_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8_UINT\"] = 62] = \"DXGI_FORMAT_R8_UINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8_SNORM\"] = 63] = \"DXGI_FORMAT_R8_SNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8_SINT\"] = 64] = \"DXGI_FORMAT_R8_SINT\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_A8_UNORM\"] = 65] = \"DXGI_FORMAT_A8_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R1_UNORM\"] = 66] = \"DXGI_FORMAT_R1_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R9G9B9E5_SHAREDEXP\"] = 67] = \"DXGI_FORMAT_R9G9B9E5_SHAREDEXP\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R8G8_B8G8_UNORM\"] = 68] = \"DXGI_FORMAT_R8G8_B8G8_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_G8R8_G8B8_UNORM\"] = 69] = \"DXGI_FORMAT_G8R8_G8B8_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC1_TYPELESS\"] = 70] = \"DXGI_FORMAT_BC1_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC1_UNORM\"] = 71] = \"DXGI_FORMAT_BC1_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC1_UNORM_SRGB\"] = 72] = \"DXGI_FORMAT_BC1_UNORM_SRGB\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC2_TYPELESS\"] = 73] = \"DXGI_FORMAT_BC2_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC2_UNORM\"] = 74] = \"DXGI_FORMAT_BC2_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC2_UNORM_SRGB\"] = 75] = \"DXGI_FORMAT_BC2_UNORM_SRGB\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC3_TYPELESS\"] = 76] = \"DXGI_FORMAT_BC3_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC3_UNORM\"] = 77] = \"DXGI_FORMAT_BC3_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC3_UNORM_SRGB\"] = 78] = \"DXGI_FORMAT_BC3_UNORM_SRGB\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC4_TYPELESS\"] = 79] = \"DXGI_FORMAT_BC4_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC4_UNORM\"] = 80] = \"DXGI_FORMAT_BC4_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC4_SNORM\"] = 81] = \"DXGI_FORMAT_BC4_SNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC5_TYPELESS\"] = 82] = \"DXGI_FORMAT_BC5_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC5_UNORM\"] = 83] = \"DXGI_FORMAT_BC5_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC5_SNORM\"] = 84] = \"DXGI_FORMAT_BC5_SNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B5G6R5_UNORM\"] = 85] = \"DXGI_FORMAT_B5G6R5_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B5G5R5A1_UNORM\"] = 86] = \"DXGI_FORMAT_B5G5R5A1_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8A8_UNORM\"] = 87] = \"DXGI_FORMAT_B8G8R8A8_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8X8_UNORM\"] = 88] = \"DXGI_FORMAT_B8G8R8X8_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM\"] = 89] = \"DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8A8_TYPELESS\"] = 90] = \"DXGI_FORMAT_B8G8R8A8_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8A8_UNORM_SRGB\"] = 91] = \"DXGI_FORMAT_B8G8R8A8_UNORM_SRGB\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8X8_TYPELESS\"] = 92] = \"DXGI_FORMAT_B8G8R8X8_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B8G8R8X8_UNORM_SRGB\"] = 93] = \"DXGI_FORMAT_B8G8R8X8_UNORM_SRGB\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC6H_TYPELESS\"] = 94] = \"DXGI_FORMAT_BC6H_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC6H_UF16\"] = 95] = \"DXGI_FORMAT_BC6H_UF16\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC6H_SF16\"] = 96] = \"DXGI_FORMAT_BC6H_SF16\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC7_TYPELESS\"] = 97] = \"DXGI_FORMAT_BC7_TYPELESS\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC7_UNORM\"] = 98] = \"DXGI_FORMAT_BC7_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_BC7_UNORM_SRGB\"] = 99] = \"DXGI_FORMAT_BC7_UNORM_SRGB\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_AYUV\"] = 100] = \"DXGI_FORMAT_AYUV\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_Y410\"] = 101] = \"DXGI_FORMAT_Y410\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_Y416\"] = 102] = \"DXGI_FORMAT_Y416\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_NV12\"] = 103] = \"DXGI_FORMAT_NV12\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_P010\"] = 104] = \"DXGI_FORMAT_P010\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_P016\"] = 105] = \"DXGI_FORMAT_P016\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_420_OPAQUE\"] = 106] = \"DXGI_FORMAT_420_OPAQUE\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_YUY2\"] = 107] = \"DXGI_FORMAT_YUY2\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_Y210\"] = 108] = \"DXGI_FORMAT_Y210\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_Y216\"] = 109] = \"DXGI_FORMAT_Y216\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_NV11\"] = 110] = \"DXGI_FORMAT_NV11\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_AI44\"] = 111] = \"DXGI_FORMAT_AI44\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_IA44\"] = 112] = \"DXGI_FORMAT_IA44\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_P8\"] = 113] = \"DXGI_FORMAT_P8\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_A8P8\"] = 114] = \"DXGI_FORMAT_A8P8\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_B4G4R4A4_UNORM\"] = 115] = \"DXGI_FORMAT_B4G4R4A4_UNORM\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_P208\"] = 116] = \"DXGI_FORMAT_P208\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_V208\"] = 117] = \"DXGI_FORMAT_V208\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_V408\"] = 118] = \"DXGI_FORMAT_V408\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE\"] = 119] = \"DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE\"] = 120] = \"DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE\";\n    DXGI_FORMAT[DXGI_FORMAT[\"DXGI_FORMAT_FORCE_UINT\"] = 121] = \"DXGI_FORMAT_FORCE_UINT\";\n})(DXGI_FORMAT || (DXGI_FORMAT = {}));\n/**\n * Possible values of the field {@link DDS_DX10_FIELDS.RESOURCE_DIMENSION}\n *\n * @ignore\n */\nvar D3D10_RESOURCE_DIMENSION;\n(function (D3D10_RESOURCE_DIMENSION) {\n    D3D10_RESOURCE_DIMENSION[D3D10_RESOURCE_DIMENSION[\"DDS_DIMENSION_TEXTURE1D\"] = 2] = \"DDS_DIMENSION_TEXTURE1D\";\n    D3D10_RESOURCE_DIMENSION[D3D10_RESOURCE_DIMENSION[\"DDS_DIMENSION_TEXTURE2D\"] = 3] = \"DDS_DIMENSION_TEXTURE2D\";\n    D3D10_RESOURCE_DIMENSION[D3D10_RESOURCE_DIMENSION[\"DDS_DIMENSION_TEXTURE3D\"] = 6] = \"DDS_DIMENSION_TEXTURE3D\";\n})(D3D10_RESOURCE_DIMENSION || (D3D10_RESOURCE_DIMENSION = {}));\nvar PF_FLAGS = 1;\n// PIXEL_FORMAT flags\nvar DDPF_ALPHA = 0x2;\nvar DDPF_FOURCC = 0x4;\nvar DDPF_RGB = 0x40;\nvar DDPF_YUV = 0x200;\nvar DDPF_LUMINANCE = 0x20000;\n// Four character codes for DXTn formats\nvar FOURCC_DXT1 = 0x31545844;\nvar FOURCC_DXT3 = 0x33545844;\nvar FOURCC_DXT5 = 0x35545844;\nvar FOURCC_DX10 = 0x30315844;\n// Cubemap texture flag (for DDS_DX10_FIELDS.MISC_FLAG)\nvar DDS_RESOURCE_MISC_TEXTURECUBE = 0x4;\n/**\n * Maps `FOURCC_*` formats to internal formats (see {@link PIXI.INTERNAL_FORMATS}).\n *\n * @ignore\n */\nvar FOURCC_TO_FORMAT = (_a$1 = {},\n    _a$1[FOURCC_DXT1] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    _a$1[FOURCC_DXT3] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    _a$1[FOURCC_DXT5] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n    _a$1);\n/**\n * Maps {@link DXGI_FORMAT} to types/internal-formats (see {@link PIXI.TYPES}, {@link PIXI.INTERNAL_FORMATS})\n *\n * @ignore\n */\nvar DXGI_TO_FORMAT = (_b = {},\n    // WEBGL_compressed_texture_s3tc\n    _b[DXGI_FORMAT.DXGI_FORMAT_BC1_TYPELESS] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    _b[DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    _b[DXGI_FORMAT.DXGI_FORMAT_BC2_TYPELESS] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    _b[DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    _b[DXGI_FORMAT.DXGI_FORMAT_BC3_TYPELESS] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n    _b[DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM] = exports.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n    // WEBGL_compressed_texture_s3tc_srgb\n    _b[DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM_SRGB] = exports.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\n    _b[DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM_SRGB] = exports.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\n    _b[DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM_SRGB] = exports.INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT,\n    _b);\n/**\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n * @see https://docs.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide\n */\nvar DDSLoader = /** @class */ (function () {\n    function DDSLoader() {\n    }\n    /**\n     * Registers a DDS compressed texture\n     * @see PIXI.Loader.loaderMiddleware\n     * @param resource - loader resource that is checked to see if it is a DDS file\n     * @param next - callback Function to call when done\n     */\n    DDSLoader.use = function (resource, next) {\n        if (resource.extension === 'dds' && resource.data) {\n            try {\n                Object.assign(resource, registerCompressedTextures(resource.name || resource.url, DDSLoader.parse(resource.data), resource.metadata));\n            }\n            catch (err) {\n                next(err);\n                return;\n            }\n        }\n        next();\n    };\n    /** Parses the DDS file header, generates base-textures, and puts them into the texture cache. */\n    DDSLoader.parse = function (arrayBuffer) {\n        var data = new Uint32Array(arrayBuffer);\n        var magicWord = data[0];\n        if (magicWord !== DDS_MAGIC) {\n            throw new Error('Invalid DDS file magic word');\n        }\n        var header = new Uint32Array(arrayBuffer, 0, DDS_HEADER_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n        // DDS header fields\n        var height = header[DDS_FIELDS.HEIGHT];\n        var width = header[DDS_FIELDS.WIDTH];\n        var mipmapCount = header[DDS_FIELDS.MIPMAP_COUNT];\n        // PIXEL_FORMAT fields\n        var pixelFormat = new Uint32Array(arrayBuffer, DDS_FIELDS.PIXEL_FORMAT * Uint32Array.BYTES_PER_ELEMENT, DDS_HEADER_PF_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n        var formatFlags = pixelFormat[PF_FLAGS];\n        // File contains compressed texture(s)\n        if (formatFlags & DDPF_FOURCC) {\n            var fourCC = pixelFormat[DDS_PF_FIELDS.FOURCC];\n            // File contains one DXTn compressed texture\n            if (fourCC !== FOURCC_DX10) {\n                var internalFormat_1 = FOURCC_TO_FORMAT[fourCC];\n                var dataOffset_1 = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n                var texData = new Uint8Array(arrayBuffer, dataOffset_1);\n                var resource = new CompressedTextureResource(texData, {\n                    format: internalFormat_1,\n                    width: width,\n                    height: height,\n                    levels: mipmapCount // CompressedTextureResource will separate the levelBuffers for us!\n                });\n                return [resource];\n            }\n            // FOURCC_DX10 indicates there is a 20-byte DDS_HEADER_DX10 after DDS_HEADER\n            var dx10Offset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n            var dx10Header = new Uint32Array(data.buffer, dx10Offset, DDS_HEADER_DX10_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n            var dxgiFormat = dx10Header[DDS_DX10_FIELDS.DXGI_FORMAT];\n            var resourceDimension = dx10Header[DDS_DX10_FIELDS.RESOURCE_DIMENSION];\n            var miscFlag = dx10Header[DDS_DX10_FIELDS.MISC_FLAG];\n            var arraySize = dx10Header[DDS_DX10_FIELDS.ARRAY_SIZE];\n            // Map dxgiFormat to PIXI.INTERNAL_FORMATS\n            var internalFormat_2 = DXGI_TO_FORMAT[dxgiFormat];\n            if (internalFormat_2 === undefined) {\n                throw new Error(\"DDSLoader cannot parse texture data with DXGI format \" + dxgiFormat);\n            }\n            if (miscFlag === DDS_RESOURCE_MISC_TEXTURECUBE) {\n                // FIXME: Anybody excited about cubemap compressed textures?\n                throw new Error('DDSLoader does not support cubemap textures');\n            }\n            if (resourceDimension === D3D10_RESOURCE_DIMENSION.DDS_DIMENSION_TEXTURE3D) {\n                // FIXME: Anybody excited about 3D compressed textures?\n                throw new Error('DDSLoader does not supported 3D texture data');\n            }\n            // Uint8Array buffers of image data, including all mipmap levels in each image\n            var imageBuffers = new Array();\n            var dataOffset = DDS_MAGIC_SIZE\n                + DDS_HEADER_SIZE\n                + DDS_HEADER_DX10_SIZE;\n            if (arraySize === 1) {\n                // No need bothering with the imageSize calculation!\n                imageBuffers.push(new Uint8Array(arrayBuffer, dataOffset));\n            }\n            else {\n                // Calculate imageSize for each texture, and then locate each image's texture data\n                var pixelSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[internalFormat_2];\n                var imageSize = 0;\n                var levelWidth = width;\n                var levelHeight = height;\n                for (var i = 0; i < mipmapCount; i++) {\n                    var alignedLevelWidth = Math.max(1, (levelWidth + 3) & ~3);\n                    var alignedLevelHeight = Math.max(1, (levelHeight + 3) & ~3);\n                    var levelSize = alignedLevelWidth * alignedLevelHeight * pixelSize;\n                    imageSize += levelSize;\n                    levelWidth = levelWidth >>> 1;\n                    levelHeight = levelHeight >>> 1;\n                }\n                var imageOffset = dataOffset;\n                // NOTE: Cubemaps have 6-images per texture (but they aren't supported so ^_^)\n                for (var i = 0; i < arraySize; i++) {\n                    imageBuffers.push(new Uint8Array(arrayBuffer, imageOffset, imageSize));\n                    imageOffset += imageSize;\n                }\n            }\n            // Uint8Array -> CompressedTextureResource, and we're done!\n            return imageBuffers.map(function (buffer) { return new CompressedTextureResource(buffer, {\n                format: internalFormat_2,\n                width: width,\n                height: height,\n                levels: mipmapCount\n            }); });\n        }\n        if (formatFlags & DDPF_RGB) {\n            // FIXME: We might want to allow uncompressed *.dds files?\n            throw new Error('DDSLoader does not support uncompressed texture data.');\n        }\n        if (formatFlags & DDPF_YUV) {\n            // FIXME: Does anybody need this feature?\n            throw new Error('DDSLoader does not supported YUV uncompressed texture data.');\n        }\n        if (formatFlags & DDPF_LUMINANCE) {\n            // FIXME: Microsoft says older DDS filers use this feature! Probably not worth the effort!\n            throw new Error('DDSLoader does not support single-channel (lumninance) texture data!');\n        }\n        if (formatFlags & DDPF_ALPHA) {\n            // FIXME: I'm tired! See above =)\n            throw new Error('DDSLoader does not support single-channel (alpha) texture data!');\n        }\n        throw new Error('DDSLoader failed to load a texture file due to an unknown reason!');\n    };\n    return DDSLoader;\n}());\n\nvar _a$2, _b$1, _c;\n// Set KTX files to be loaded as an ArrayBuffer\nloaders.LoaderResource.setExtensionXhrType('ktx', loaders.LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\n/**\n * The 12-byte KTX file identifier\n *\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.1\n * @ignore\n */\nvar FILE_IDENTIFIER = [0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A];\n/**\n * The value stored in the \"endianness\" field.\n *\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.2\n * @ignore\n */\nvar ENDIANNESS = 0x04030201;\n/**\n * Byte offsets of the KTX file header fields\n *\n * @ignore\n */\nvar KTX_FIELDS = {\n    FILE_IDENTIFIER: 0,\n    ENDIANNESS: 12,\n    GL_TYPE: 16,\n    GL_TYPE_SIZE: 20,\n    GL_FORMAT: 24,\n    GL_INTERNAL_FORMAT: 28,\n    GL_BASE_INTERNAL_FORMAT: 32,\n    PIXEL_WIDTH: 36,\n    PIXEL_HEIGHT: 40,\n    PIXEL_DEPTH: 44,\n    NUMBER_OF_ARRAY_ELEMENTS: 48,\n    NUMBER_OF_FACES: 52,\n    NUMBER_OF_MIPMAP_LEVELS: 56,\n    BYTES_OF_KEY_VALUE_DATA: 60\n};\n/**\n * Byte size of the file header fields in {@code KTX_FIELDS}\n *\n * @ignore\n */\nvar FILE_HEADER_SIZE = 64;\n/**\n * Maps {@link PIXI.TYPES} to the bytes taken per component, excluding those ones that are bit-fields.\n *\n * @ignore\n */\nvar TYPES_TO_BYTES_PER_COMPONENT = (_a$2 = {},\n    _a$2[constants.TYPES.UNSIGNED_BYTE] = 1,\n    _a$2[constants.TYPES.UNSIGNED_SHORT] = 2,\n    _a$2[constants.TYPES.FLOAT] = 4,\n    _a$2[constants.TYPES.HALF_FLOAT] = 8,\n    _a$2);\n/**\n * Number of components in each {@link PIXI.FORMATS}\n *\n * @ignore\n */\nvar FORMATS_TO_COMPONENTS = (_b$1 = {},\n    _b$1[constants.FORMATS.RGBA] = 4,\n    _b$1[constants.FORMATS.RGB] = 3,\n    _b$1[constants.FORMATS.LUMINANCE] = 1,\n    _b$1[constants.FORMATS.LUMINANCE_ALPHA] = 2,\n    _b$1[constants.FORMATS.ALPHA] = 1,\n    _b$1);\n/**\n * Number of bytes per pixel in bit-field types in {@link PIXI.TYPES}\n *\n * @ignore\n */\nvar TYPES_TO_BYTES_PER_PIXEL = (_c = {},\n    _c[constants.TYPES.UNSIGNED_SHORT_4_4_4_4] = 2,\n    _c[constants.TYPES.UNSIGNED_SHORT_5_5_5_1] = 2,\n    _c[constants.TYPES.UNSIGNED_SHORT_5_6_5] = 2,\n    _c);\n/**\n * Loader plugin for handling KTX texture container files.\n *\n * This KTX loader does not currently support the following features:\n * * cube textures\n * * 3D textures\n * * vendor-specific key/value data parsing\n * * endianness conversion for big-endian machines\n * * embedded *.basis files\n *\n * It does supports the following features:\n * * multiple textures per file\n * * mipmapping\n *\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nvar KTXLoader = /** @class */ (function () {\n    function KTXLoader() {\n    }\n    /**\n     * Called after a KTX file is loaded.\n     *\n     * This will parse the KTX file header and add a {@code BaseTexture} to the texture\n     * cache.\n     *\n     * @see PIXI.Loader.loaderMiddleware\n     * @param resource - loader resource that is checked to see if it is a KTX file\n     * @param next - callback Function to call when done\n     */\n    KTXLoader.use = function (resource, next) {\n        if (resource.extension === 'ktx' && resource.data) {\n            try {\n                var url = resource.name || resource.url;\n                Object.assign(resource, registerCompressedTextures(url, KTXLoader.parse(url, resource.data), resource.metadata));\n            }\n            catch (err) {\n                next(err);\n                return;\n            }\n        }\n        next();\n    };\n    /** Parses the KTX file header, generates base-textures, and puts them into the texture cache. */\n    KTXLoader.parse = function (url, arrayBuffer) {\n        var dataView = new DataView(arrayBuffer);\n        if (!KTXLoader.validate(url, dataView)) {\n            return null;\n        }\n        var littleEndian = dataView.getUint32(KTX_FIELDS.ENDIANNESS, true) === ENDIANNESS;\n        var glType = dataView.getUint32(KTX_FIELDS.GL_TYPE, littleEndian);\n        // const glTypeSize = dataView.getUint32(KTX_FIELDS.GL_TYPE_SIZE, littleEndian);\n        var glFormat = dataView.getUint32(KTX_FIELDS.GL_FORMAT, littleEndian);\n        var glInternalFormat = dataView.getUint32(KTX_FIELDS.GL_INTERNAL_FORMAT, littleEndian);\n        var pixelWidth = dataView.getUint32(KTX_FIELDS.PIXEL_WIDTH, littleEndian);\n        var pixelHeight = dataView.getUint32(KTX_FIELDS.PIXEL_HEIGHT, littleEndian) || 1; // \"pixelHeight = 0\" -> \"1\"\n        var pixelDepth = dataView.getUint32(KTX_FIELDS.PIXEL_DEPTH, littleEndian) || 1; // ^^\n        var numberOfArrayElements = dataView.getUint32(KTX_FIELDS.NUMBER_OF_ARRAY_ELEMENTS, littleEndian) || 1; // ^^\n        var numberOfFaces = dataView.getUint32(KTX_FIELDS.NUMBER_OF_FACES, littleEndian);\n        var numberOfMipmapLevels = dataView.getUint32(KTX_FIELDS.NUMBER_OF_MIPMAP_LEVELS, littleEndian);\n        var bytesOfKeyValueData = dataView.getUint32(KTX_FIELDS.BYTES_OF_KEY_VALUE_DATA, littleEndian);\n        // Whether the platform architecture is little endian. If littleEndian !== platformLittleEndian, then the\n        // file contents must be endian-converted!\n        // TODO: Endianness conversion\n        // const platformLittleEndian = new Uint8Array((new Uint32Array([ENDIANNESS])).buffer)[0] === 0x01;\n        if (pixelHeight === 0 || pixelDepth !== 1) {\n            throw new Error('Only 2D textures are supported');\n        }\n        if (numberOfFaces !== 1) {\n            throw new Error('CubeTextures are not supported by KTXLoader yet!');\n        }\n        if (numberOfArrayElements !== 1) {\n            // TODO: Support splitting array-textures into multiple BaseTextures\n            throw new Error('WebGL does not support array textures');\n        }\n        // TODO: 8x4 blocks for 2bpp pvrtc\n        var blockWidth = 4;\n        var blockHeight = 4;\n        var alignedWidth = (pixelWidth + 3) & ~3;\n        var alignedHeight = (pixelHeight + 3) & ~3;\n        var imageBuffers = new Array(numberOfArrayElements);\n        var imagePixels = pixelWidth * pixelHeight;\n        if (glType === 0) {\n            // Align to 16 pixels (4x4 blocks)\n            imagePixels = alignedWidth * alignedHeight;\n        }\n        var imagePixelByteSize;\n        if (glType !== 0) {\n            // Uncompressed texture format\n            if (TYPES_TO_BYTES_PER_COMPONENT[glType]) {\n                imagePixelByteSize = TYPES_TO_BYTES_PER_COMPONENT[glType] * FORMATS_TO_COMPONENTS[glFormat];\n            }\n            else {\n                imagePixelByteSize = TYPES_TO_BYTES_PER_PIXEL[glType];\n            }\n        }\n        else {\n            imagePixelByteSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[glInternalFormat];\n        }\n        if (imagePixelByteSize === undefined) {\n            throw new Error('Unable to resolve the pixel format stored in the *.ktx file!');\n        }\n        var imageByteSize = imagePixels * imagePixelByteSize;\n        var mipByteSize = imageByteSize;\n        var mipWidth = pixelWidth;\n        var mipHeight = pixelHeight;\n        var alignedMipWidth = alignedWidth;\n        var alignedMipHeight = alignedHeight;\n        var imageOffset = FILE_HEADER_SIZE + bytesOfKeyValueData;\n        for (var mipmapLevel = 0; mipmapLevel < numberOfMipmapLevels; mipmapLevel++) {\n            var imageSize = dataView.getUint32(imageOffset, littleEndian);\n            var elementOffset = imageOffset + 4;\n            for (var arrayElement = 0; arrayElement < numberOfArrayElements; arrayElement++) {\n                // TODO: Maybe support 3D textures? :-)\n                // for (let zSlice = 0; zSlice < pixelDepth; zSlice)\n                var mips = imageBuffers[arrayElement];\n                if (!mips) {\n                    mips = imageBuffers[arrayElement] = new Array(numberOfMipmapLevels);\n                }\n                mips[mipmapLevel] = {\n                    levelID: mipmapLevel,\n                    levelWidth: numberOfMipmapLevels > 1 ? mipWidth : alignedMipWidth,\n                    levelHeight: numberOfMipmapLevels > 1 ? mipHeight : alignedMipHeight,\n                    levelBuffer: new Uint8Array(arrayBuffer, elementOffset, mipByteSize)\n                };\n                elementOffset += mipByteSize;\n            }\n            // HINT: Aligns to 4-byte boundary after jumping imageSize (in lieu of mipPadding)\n            imageOffset += imageSize + 4; // (+4 to jump the imageSize field itself)\n            imageOffset = imageOffset % 4 !== 0 ? imageOffset + 4 - (imageOffset % 4) : imageOffset;\n            // Calculate mipWidth, mipHeight for _next_ iteration\n            mipWidth = (mipWidth >> 1) || 1;\n            mipHeight = (mipHeight >> 1) || 1;\n            alignedMipWidth = (mipWidth + blockWidth - 1) & ~(blockWidth - 1);\n            alignedMipHeight = (mipHeight + blockHeight - 1) & ~(blockHeight - 1);\n            // Each mipmap level is 4-times smaller?\n            mipByteSize = alignedMipWidth * alignedMipHeight * imagePixelByteSize;\n        }\n        // We use the levelBuffers feature of CompressedTextureResource b/c texture data is image-major, not level-major.\n        if (glType !== 0) {\n            throw new Error('TODO: Uncompressed');\n        }\n        return imageBuffers.map(function (levelBuffers) { return new CompressedTextureResource(null, {\n            format: glInternalFormat,\n            width: pixelWidth,\n            height: pixelHeight,\n            levels: numberOfMipmapLevels,\n            levelBuffers: levelBuffers,\n        }); });\n    };\n    /** Checks whether the arrayBuffer contains a valid *.ktx file. */\n    KTXLoader.validate = function (url, dataView) {\n        // NOTE: Do not optimize this into 3 32-bit integer comparison because the endianness\n        // of the data is not specified.\n        for (var i = 0; i < FILE_IDENTIFIER.length; i++) {\n            if (dataView.getUint8(i) !== FILE_IDENTIFIER[i]) {\n                console.error(url + \" is not a valid *.ktx file!\");\n                return false;\n            }\n        }\n        return true;\n    };\n    return KTXLoader;\n}());\n\nexports.BlobResource = BlobResource;\nexports.CompressedTextureLoader = CompressedTextureLoader;\nexports.CompressedTextureResource = CompressedTextureResource;\nexports.DDSLoader = DDSLoader;\nexports.FORMATS_TO_COMPONENTS = FORMATS_TO_COMPONENTS;\nexports.INTERNAL_FORMAT_TO_BYTES_PER_PIXEL = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL;\nexports.KTXLoader = KTXLoader;\nexports.TYPES_TO_BYTES_PER_COMPONENT = TYPES_TO_BYTES_PER_COMPONENT;\nexports.TYPES_TO_BYTES_PER_PIXEL = TYPES_TO_BYTES_PER_PIXEL;\n//# sourceMappingURL=compressed-textures.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","verb","n","v","op","f","TypeError","_","y","t","call","label","ops","pop","trys","length","push","sent","g","Symbol","iterator","registerCompressedTextures","url","resources","metadata","textures","texture","map","resource","core","Texture","BaseTexture","assign","mipmap","constants","MIPMAP_MODES","OFF","alphaMode","ALPHA_MODES","NO_PREMULTIPLIED_ALPHA","forEach","i","baseTexture","cacheID","addToCache","defineProperty","loaders","utils","_a","INTERNAL_FORMATS","INTERNAL_FORMAT_TO_BYTES_PER_PIXEL","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_SRGB_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","COMPRESSED_R11_EAC","COMPRESSED_SIGNED_R11_EAC","COMPRESSED_RG11_EAC","COMPRESSED_SIGNED_RG11_EAC","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","COMPRESSED_SRGB8_ETC2","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB_ATC_WEBGL","COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL","COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL","setPrototypeOf","__proto__","Array","p","hasOwnProperty","BlobResource","_super","source","options","width","height","autoLoad","origin","data","Uint8Array","_this","buffer","ViewableBuffer","load","loaded","onBlobLoaded","rawBinaryData","BlobResource.prototype.onBlobLoaded","_data","BlobResource.prototype.load","response","blob","arrayBuffer","fetch","Uint32Array","update","BufferResource","CompressedTextureResource","format","levels","_width","_height","_extension","_formatToExtension","levelBuffers","_levelBuffers","_createLevelBuffers","uint8View","upload","CompressedTextureResource.prototype.upload","renderer","_texture","_glTexture","gl","extension","context","extensions","Error","j","compressedTexImage2D","TEXTURE_2D","levelID","levelWidth","levelHeight","levelBuffer","CompressedTextureResource.prototype.onBlobLoaded","CompressedTextureResource._formatToExtension","CompressedTextureResource._createLevelBuffers","blockWidth","blockHeight","imageWidth","imageHeight","buffers","offset","byteOffset","alignedLevelWidth","alignedLevelHeight","levelSize","CompressedTextureLoader","use","CompressedTextureLoader.use","type","LoaderResource","TYPE","JSON","textureURL","fallbackURL","url_1","src","textureFormats","loadOptions","crossOrigin","imageMetadata","parentResource","resourcePath","replace","loader","baseUrl","add","res","error","_b","CompressedTextureLoader.add","document","canvas","createElement","getContext","s3tc","getExtension","s3tc_sRGB","etc","etc1","pvrtc","atc","astc","textureExtensions","extensionName","getPrototypeOf","console","warn","_a$1","setExtensionXhrType","XHR_RESPONSE_TYPE","BUFFER","DXGI_FORMAT","D3D10_RESOURCE_DIMENSION","FOURCC_TO_FORMAT","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","DXGI_TO_FORMAT","DXGI_FORMAT_BC1_TYPELESS","DXGI_FORMAT_BC1_UNORM","DXGI_FORMAT_BC2_TYPELESS","DXGI_FORMAT_BC2_UNORM","DXGI_FORMAT_BC3_TYPELESS","DXGI_FORMAT_BC3_UNORM","DXGI_FORMAT_BC1_UNORM_SRGB","DXGI_FORMAT_BC2_UNORM_SRGB","DXGI_FORMAT_BC3_UNORM_SRGB","DDSLoader","DDSLoader.use","name","parse","err","DDSLoader.parse","DDS_MAGIC","magicWord","header","DDS_HEADER_SIZE","BYTES_PER_ELEMENT","HEIGHT","WIDTH","mipmapCount","MIPMAP_COUNT","pixelFormat","PIXEL_FORMAT","DDS_HEADER_PF_SIZE","formatFlags","PF_FLAGS","DDPF_FOURCC","fourCC","FOURCC","FOURCC_DX10","internalFormat_1","texData","dataOffset_1","dx10Header","dx10Offset","DDS_HEADER_DX10_SIZE","dxgiFormat","resourceDimension","RESOURCE_DIMENSION","miscFlag","MISC_FLAG","arraySize","ARRAY_SIZE","internalFormat_2","undefined","DDS_RESOURCE_MISC_TEXTURECUBE","DDS_DIMENSION_TEXTURE3D","imageBuffers","dataOffset","pixelSize","imageSize","Math","max","imageOffset","DDPF_RGB","DDPF_YUV","DDPF_LUMINANCE","DDPF_ALPHA","_a$2","_b$1","_c","FILE_IDENTIFIER","TYPES_TO_BYTES_PER_COMPONENT","TYPES","UNSIGNED_BYTE","UNSIGNED_SHORT","FLOAT","HALF_FLOAT","FORMATS_TO_COMPONENTS","FORMATS","RGBA","RGB","LUMINANCE","LUMINANCE_ALPHA","ALPHA","TYPES_TO_BYTES_PER_PIXEL","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","KTXLoader","KTXLoader.use","KTXLoader.parse","dataView","DataView","validate","littleEndian","ENDIANNESS","getUint32","glType","GL_TYPE","glFormat","GL_FORMAT","glInternalFormat","GL_INTERNAL_FORMAT","pixelWidth","PIXEL_WIDTH","pixelHeight","PIXEL_HEIGHT","pixelDepth","PIXEL_DEPTH","numberOfArrayElements","NUMBER_OF_ARRAY_ELEMENTS","numberOfFaces","NUMBER_OF_FACES","numberOfMipmapLevels","NUMBER_OF_MIPMAP_LEVELS","bytesOfKeyValueData","BYTES_OF_KEY_VALUE_DATA","alignedWidth","alignedHeight","imagePixels","imagePixelByteSize","mipByteSize","mipWidth","mipHeight","FILE_HEADER_SIZE","mipmapLevel","elementOffset","arrayElement","mips","alignedMipWidth","alignedMipHeight","KTXLoader.validate","getUint8"]
}
