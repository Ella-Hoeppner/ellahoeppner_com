{
"version":3,
"file":"module$node_modules$$pixi$ticker$dist$cjs$ticker.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/@pixi/ticker/dist/cjs/ticker.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$ticker$dist$cjs$ticker\"] = function(global,require,module,exports) {\n/*!\n * @pixi/ticker - v6.0.4\n * Compiled Tue, 11 May 2021 18:00:23 UTC\n *\n * @pixi/ticker is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar settings = require('@pixi/settings');\n\n/**\n * Target frames per millisecond.\n *\n * @static\n * @name TARGET_FPMS\n * @memberof PIXI.settings\n * @type {number}\n * @default 0.06\n */\nsettings.settings.TARGET_FPMS = 0.06;\n\n/**\n * Represents the update priorities used by internal PIXI classes when registered with\n * the {@link PIXI.Ticker} object. Higher priority items are updated first and lower\n * priority items, such as render, should go later.\n *\n * @static\n * @constant\n * @name UPDATE_PRIORITY\n * @memberof PIXI\n * @enum {number}\n * @property {number} INTERACTION=50 Highest priority, used for {@link PIXI.InteractionManager}\n * @property {number} HIGH=25 High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}\n * @property {number} NORMAL=0 Default priority for ticker events, see {@link PIXI.Ticker#add}.\n * @property {number} LOW=-25 Low priority used for {@link PIXI.Application} rendering.\n * @property {number} UTILITY=-50 Lowest priority used for {@link PIXI.BasePrepare} utility.\n */\n(function (UPDATE_PRIORITY) {\n    UPDATE_PRIORITY[UPDATE_PRIORITY[\"INTERACTION\"] = 50] = \"INTERACTION\";\n    UPDATE_PRIORITY[UPDATE_PRIORITY[\"HIGH\"] = 25] = \"HIGH\";\n    UPDATE_PRIORITY[UPDATE_PRIORITY[\"NORMAL\"] = 0] = \"NORMAL\";\n    UPDATE_PRIORITY[UPDATE_PRIORITY[\"LOW\"] = -25] = \"LOW\";\n    UPDATE_PRIORITY[UPDATE_PRIORITY[\"UTILITY\"] = -50] = \"UTILITY\";\n})(exports.UPDATE_PRIORITY || (exports.UPDATE_PRIORITY = {}));\n\n/**\n * Internal class for handling the priority sorting of ticker handlers.\n *\n * @private\n * @class\n * @memberof PIXI\n */\nvar TickerListener = /** @class */ (function () {\n    /**\n     * Constructor\n     * @private\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param priority - The priority for emitting\n     * @param once - If the handler should fire once\n     */\n    function TickerListener(fn, context, priority, once) {\n        if (context === void 0) { context = null; }\n        if (priority === void 0) { priority = 0; }\n        if (once === void 0) { once = false; }\n        /** The next item in chain. */\n        this.next = null;\n        /** The previous item in chain. */\n        this.previous = null;\n        /** `true` if this listener has been destroyed already. */\n        this._destroyed = false;\n        this.fn = fn;\n        this.context = context;\n        this.priority = priority;\n        this.once = once;\n    }\n    /**\n     * Simple compare function to figure out if a function and context match.\n     * @private\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @return `true` if the listener match the arguments\n     */\n    TickerListener.prototype.match = function (fn, context) {\n        if (context === void 0) { context = null; }\n        return this.fn === fn && this.context === context;\n    };\n    /**\n     * Emit by calling the current function.\n     * @private\n     * @param deltaTime - time since the last emit.\n     * @return Next ticker\n     */\n    TickerListener.prototype.emit = function (deltaTime) {\n        if (this.fn) {\n            if (this.context) {\n                this.fn.call(this.context, deltaTime);\n            }\n            else {\n                this.fn(deltaTime);\n            }\n        }\n        var redirect = this.next;\n        if (this.once) {\n            this.destroy(true);\n        }\n        // Soft-destroying should remove\n        // the next reference\n        if (this._destroyed) {\n            this.next = null;\n        }\n        return redirect;\n    };\n    /**\n     * Connect to the list.\n     * @private\n     * @param previous - Input node, previous listener\n     */\n    TickerListener.prototype.connect = function (previous) {\n        this.previous = previous;\n        if (previous.next) {\n            previous.next.previous = this;\n        }\n        this.next = previous.next;\n        previous.next = this;\n    };\n    /**\n     * Destroy and don't use after this.\n     * @private\n     * @param hard - `true` to remove the `next` reference, this\n     *        is considered a hard destroy. Soft destroy maintains the next reference.\n     * @return The listener to redirect while emitting or removing.\n     */\n    TickerListener.prototype.destroy = function (hard) {\n        if (hard === void 0) { hard = false; }\n        this._destroyed = true;\n        this.fn = null;\n        this.context = null;\n        // Disconnect, hook up next and previous\n        if (this.previous) {\n            this.previous.next = this.next;\n        }\n        if (this.next) {\n            this.next.previous = this.previous;\n        }\n        // Redirect to the next item\n        var redirect = this.next;\n        // Remove references\n        this.next = hard ? null : redirect;\n        this.previous = null;\n        return redirect;\n    };\n    return TickerListener;\n}());\n\n/**\n * A Ticker class that runs an update loop that other objects listen to.\n *\n * This class is composed around listeners meant for execution on the next requested animation frame.\n * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.\n *\n * @class\n * @memberof PIXI\n */\nvar Ticker = /** @class */ (function () {\n    function Ticker() {\n        var _this = this;\n        /**\n         * Whether or not this ticker should invoke the method\n         * {@link PIXI.Ticker#start} automatically\n         * when a listener is added.\n         */\n        this.autoStart = false;\n        /**\n         * Scalar time value from last frame to this frame.\n         * This value is capped by setting {@link PIXI.Ticker#minFPS}\n         * and is scaled with {@link PIXI.Ticker#speed}.\n         * **Note:** The cap may be exceeded by scaling.\n         */\n        this.deltaTime = 1;\n        /**\n         * The last time {@link PIXI.Ticker#update} was invoked.\n         * This value is also reset internally outside of invoking\n         * update, but only when a new animation frame is requested.\n         * If the platform supports DOMHighResTimeStamp,\n         * this value will have a precision of 1 \u00b5s.\n         */\n        this.lastTime = -1;\n        /**\n         * Factor of current {@link PIXI.Ticker#deltaTime}.\n         * @example\n         * // Scales ticker.deltaTime to what would be\n         * // the equivalent of approximately 120 FPS\n         * ticker.speed = 2;\n         */\n        this.speed = 1;\n        /**\n         * Whether or not this ticker has been started.\n         * `true` if {@link PIXI.Ticker#start} has been called.\n         * `false` if {@link PIXI.Ticker#stop} has been called.\n         * While `false`, this value may change to `true` in the\n         * event of {@link PIXI.Ticker#autoStart} being `true`\n         * and a listener is added.\n         */\n        this.started = false;\n        /** Internal current frame request ID */\n        this._requestId = null;\n        /**\n         * Internal value managed by minFPS property setter and getter.\n         * This is the maximum allowed milliseconds between updates.\n         */\n        this._maxElapsedMS = 100;\n        /**\n         * Internal value managed by minFPS property setter and getter.\n         * This is the maximum allowed milliseconds between updates.\n         */\n        this._minElapsedMS = 0;\n        /** If enabled, deleting is disabled.*/\n        this._protected = false;\n        /**\n         * The last time keyframe was executed.\n         * Maintains a relatively fixed interval with the previous value.\n         */\n        this._lastFrame = -1;\n        this._head = new TickerListener(null, null, Infinity);\n        this.deltaMS = 1 / settings.settings.TARGET_FPMS;\n        this.elapsedMS = 1 / settings.settings.TARGET_FPMS;\n        this._tick = function (time) {\n            _this._requestId = null;\n            if (_this.started) {\n                // Invoke listeners now\n                _this.update(time);\n                // Listener side effects may have modified ticker state.\n                if (_this.started && _this._requestId === null && _this._head.next) {\n                    _this._requestId = requestAnimationFrame(_this._tick);\n                }\n            }\n        };\n    }\n    /**\n     * Conditionally requests a new animation frame.\n     * If a frame has not already been requested, and if the internal\n     * emitter has listeners, a new frame is requested.\n     *\n     * @private\n     */\n    Ticker.prototype._requestIfNeeded = function () {\n        if (this._requestId === null && this._head.next) {\n            // ensure callbacks get correct delta\n            this.lastTime = performance.now();\n            this._lastFrame = this.lastTime;\n            this._requestId = requestAnimationFrame(this._tick);\n        }\n    };\n    /**\n     * Conditionally cancels a pending animation frame.\n     * @private\n     */\n    Ticker.prototype._cancelIfNeeded = function () {\n        if (this._requestId !== null) {\n            cancelAnimationFrame(this._requestId);\n            this._requestId = null;\n        }\n    };\n    /**\n     * Conditionally requests a new animation frame.\n     * If the ticker has been started it checks if a frame has not already\n     * been requested, and if the internal emitter has listeners. If these\n     * conditions are met, a new frame is requested. If the ticker has not\n     * been started, but autoStart is `true`, then the ticker starts now,\n     * and continues with the previous conditions to request a new frame.\n     *\n     * @private\n     */\n    Ticker.prototype._startIfPossible = function () {\n        if (this.started) {\n            this._requestIfNeeded();\n        }\n        else if (this.autoStart) {\n            this.start();\n        }\n    };\n    /**\n     * Register a handler for tick events. Calls continuously unless\n     * it is removed or the ticker is stopped.\n     *\n     * @param fn - The listener function to be added for updates\n     * @param context - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */\n    Ticker.prototype.add = function (fn, context, priority) {\n        if (priority === void 0) { priority = exports.UPDATE_PRIORITY.NORMAL; }\n        return this._addListener(new TickerListener(fn, context, priority));\n    };\n    /**\n     * Add a handler for the tick event which is only execute once.\n     *\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */\n    Ticker.prototype.addOnce = function (fn, context, priority) {\n        if (priority === void 0) { priority = exports.UPDATE_PRIORITY.NORMAL; }\n        return this._addListener(new TickerListener(fn, context, priority, true));\n    };\n    /**\n     * Internally adds the event handler so that it can be sorted by priority.\n     * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run\n     * before the rendering.\n     *\n     * @private\n     * @param listener - Current listener being added.\n     * @returns This instance of a ticker\n     */\n    Ticker.prototype._addListener = function (listener) {\n        // For attaching to head\n        var current = this._head.next;\n        var previous = this._head;\n        // Add the first item\n        if (!current) {\n            listener.connect(previous);\n        }\n        else {\n            // Go from highest to lowest priority\n            while (current) {\n                if (listener.priority > current.priority) {\n                    listener.connect(previous);\n                    break;\n                }\n                previous = current;\n                current = current.next;\n            }\n            // Not yet connected\n            if (!listener.previous) {\n                listener.connect(previous);\n            }\n        }\n        this._startIfPossible();\n        return this;\n    };\n    /**\n     * Removes any handlers matching the function and context parameters.\n     * If no handlers are left after removing, then it cancels the animation frame.\n     *\n     * @param fn - The listener function to be removed\n     * @param context - The listener context to be removed\n     * @returns This instance of a ticker\n     */\n    Ticker.prototype.remove = function (fn, context) {\n        var listener = this._head.next;\n        while (listener) {\n            // We found a match, lets remove it\n            // no break to delete all possible matches\n            // incase a listener was added 2+ times\n            if (listener.match(fn, context)) {\n                listener = listener.destroy();\n            }\n            else {\n                listener = listener.next;\n            }\n        }\n        if (!this._head.next) {\n            this._cancelIfNeeded();\n        }\n        return this;\n    };\n    Object.defineProperty(Ticker.prototype, \"count\", {\n        /**\n         * The number of listeners on this ticker, calculated by walking through linked list\n         *\n         * @readonly\n         * @member {number}\n         */\n        get: function () {\n            if (!this._head) {\n                return 0;\n            }\n            var count = 0;\n            var current = this._head;\n            while ((current = current.next)) {\n                count++;\n            }\n            return count;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Starts the ticker. If the ticker has listeners\n     * a new animation frame is requested at this point.\n     */\n    Ticker.prototype.start = function () {\n        if (!this.started) {\n            this.started = true;\n            this._requestIfNeeded();\n        }\n    };\n    /**\n     * Stops the ticker. If the ticker has requested\n     * an animation frame it is canceled at this point.\n     */\n    Ticker.prototype.stop = function () {\n        if (this.started) {\n            this.started = false;\n            this._cancelIfNeeded();\n        }\n    };\n    /**\n     * Destroy the ticker and don't use after this. Calling\n     * this method removes all references to internal events.\n     */\n    Ticker.prototype.destroy = function () {\n        if (!this._protected) {\n            this.stop();\n            var listener = this._head.next;\n            while (listener) {\n                listener = listener.destroy(true);\n            }\n            this._head.destroy();\n            this._head = null;\n        }\n    };\n    /**\n     * Triggers an update. An update entails setting the\n     * current {@link PIXI.Ticker#elapsedMS},\n     * the current {@link PIXI.Ticker#deltaTime},\n     * invoking all listeners with current deltaTime,\n     * and then finally setting {@link PIXI.Ticker#lastTime}\n     * with the value of currentTime that was provided.\n     * This method will be called automatically by animation\n     * frame callbacks if the ticker instance has been started\n     * and listeners are added.\n     *\n     * @param {number} [currentTime=performance.now()] - the current time of execution\n     */\n    Ticker.prototype.update = function (currentTime) {\n        if (currentTime === void 0) { currentTime = performance.now(); }\n        var elapsedMS;\n        // If the difference in time is zero or negative, we ignore most of the work done here.\n        // If there is no valid difference, then should be no reason to let anyone know about it.\n        // A zero delta, is exactly that, nothing should update.\n        //\n        // The difference in time can be negative, and no this does not mean time traveling.\n        // This can be the result of a race condition between when an animation frame is requested\n        // on the current JavaScript engine event loop, and when the ticker's start method is invoked\n        // (which invokes the internal _requestIfNeeded method). If a frame is requested before\n        // _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,\n        // can receive a time argument that can be less than the lastTime value that was set within\n        // _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.\n        //\n        // This check covers this browser engine timing issue, as well as if consumers pass an invalid\n        // currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.\n        if (currentTime > this.lastTime) {\n            // Save uncapped elapsedMS for measurement\n            elapsedMS = this.elapsedMS = currentTime - this.lastTime;\n            // cap the milliseconds elapsed used for deltaTime\n            if (elapsedMS > this._maxElapsedMS) {\n                elapsedMS = this._maxElapsedMS;\n            }\n            elapsedMS *= this.speed;\n            // If not enough time has passed, exit the function.\n            // Get ready for next frame by setting _lastFrame, but based on _minElapsedMS\n            // adjustment to ensure a relatively stable interval.\n            if (this._minElapsedMS) {\n                var delta = currentTime - this._lastFrame | 0;\n                if (delta < this._minElapsedMS) {\n                    return;\n                }\n                this._lastFrame = currentTime - (delta % this._minElapsedMS);\n            }\n            this.deltaMS = elapsedMS;\n            this.deltaTime = this.deltaMS * settings.settings.TARGET_FPMS;\n            // Cache a local reference, in-case ticker is destroyed\n            // during the emit, we can still check for head.next\n            var head = this._head;\n            // Invoke listeners added to internal emitter\n            var listener = head.next;\n            while (listener) {\n                listener = listener.emit(this.deltaTime);\n            }\n            if (!head.next) {\n                this._cancelIfNeeded();\n            }\n        }\n        else {\n            this.deltaTime = this.deltaMS = this.elapsedMS = 0;\n        }\n        this.lastTime = currentTime;\n    };\n    Object.defineProperty(Ticker.prototype, \"FPS\", {\n        /**\n         * The frames per second at which this ticker is running.\n         * The default is approximately 60 in most modern browsers.\n         * **Note:** This does not factor in the value of\n         * {@link PIXI.Ticker#speed}, which is specific\n         * to scaling {@link PIXI.Ticker#deltaTime}.\n         *\n         * @member {number}\n         * @readonly\n         */\n        get: function () {\n            return 1000 / this.elapsedMS;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Ticker.prototype, \"minFPS\", {\n        /**\n         * Manages the maximum amount of milliseconds allowed to\n         * elapse between invoking {@link PIXI.Ticker#update}.\n         * This value is used to cap {@link PIXI.Ticker#deltaTime},\n         * but does not effect the measured value of {@link PIXI.Ticker#FPS}.\n         * When setting this property it is clamped to a value between\n         * `0` and `PIXI.settings.TARGET_FPMS * 1000`.\n         *\n         * @member {number}\n         * @default 10\n         */\n        get: function () {\n            return 1000 / this._maxElapsedMS;\n        },\n        set: function (fps) {\n            // Minimum must be below the maxFPS\n            var minFPS = Math.min(this.maxFPS, fps);\n            // Must be at least 0, but below 1 / settings.TARGET_FPMS\n            var minFPMS = Math.min(Math.max(0, minFPS) / 1000, settings.settings.TARGET_FPMS);\n            this._maxElapsedMS = 1 / minFPMS;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Ticker.prototype, \"maxFPS\", {\n        /**\n         * Manages the minimum amount of milliseconds required to\n         * elapse between invoking {@link PIXI.Ticker#update}.\n         * This will effect the measured value of {@link PIXI.Ticker#FPS}.\n         * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.\n         * Otherwise it will be at least `minFPS`\n         *\n         * @member {number}\n         * @default 0\n         */\n        get: function () {\n            if (this._minElapsedMS) {\n                return Math.round(1000 / this._minElapsedMS);\n            }\n            return 0;\n        },\n        set: function (fps) {\n            if (fps === 0) {\n                this._minElapsedMS = 0;\n            }\n            else {\n                // Max must be at least the minFPS\n                var maxFPS = Math.max(this.minFPS, fps);\n                this._minElapsedMS = 1 / (maxFPS / 1000);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Ticker, \"shared\", {\n        /**\n         * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by\n         * {@link PIXI.VideoResource} to update animation frames / video textures.\n         *\n         * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.\n         *\n         * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n         * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.\n         *\n         * @example\n         * let ticker = PIXI.Ticker.shared;\n         * // Set this to prevent starting this ticker when listeners are added.\n         * // By default this is true only for the PIXI.Ticker.shared instance.\n         * ticker.autoStart = false;\n         * // FYI, call this to ensure the ticker is stopped. It should be stopped\n         * // if you have not attempted to render anything yet.\n         * ticker.stop();\n         * // Call this when you are ready for a running shared ticker.\n         * ticker.start();\n         *\n         * @example\n         * // You may use the shared ticker to render...\n         * let renderer = PIXI.autoDetectRenderer();\n         * let stage = new PIXI.Container();\n         * document.body.appendChild(renderer.view);\n         * ticker.add(function (time) {\n         *     renderer.render(stage);\n         * });\n         *\n         * @example\n         * // Or you can just update it manually.\n         * ticker.autoStart = false;\n         * ticker.stop();\n         * function animate(time) {\n         *     ticker.update(time);\n         *     renderer.render(stage);\n         *     requestAnimationFrame(animate);\n         * }\n         * animate(performance.now());\n         *\n         * @member {PIXI.Ticker}\n         * @static\n         */\n        get: function () {\n            if (!Ticker._shared) {\n                var shared = Ticker._shared = new Ticker();\n                shared.autoStart = true;\n                shared._protected = true;\n            }\n            return Ticker._shared;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Ticker, \"system\", {\n        /**\n         * The system ticker instance used by {@link PIXI.InteractionManager} and by\n         * {@link PIXI.BasePrepare} for core timing functionality that shouldn't usually need to be paused,\n         * unlike the `shared` ticker which drives visual animations and rendering which may want to be paused.\n         *\n         * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n         *\n         * @member {PIXI.Ticker}\n         * @static\n         */\n        get: function () {\n            if (!Ticker._system) {\n                var system = Ticker._system = new Ticker();\n                system.autoStart = true;\n                system._protected = true;\n            }\n            return Ticker._system;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Ticker;\n}());\n\n/**\n * Middleware for for Application Ticker.\n *\n * @example\n * import {TickerPlugin} from '@pixi/ticker';\n * import {Application} from '@pixi/app';\n * Application.registerPlugin(TickerPlugin);\n *\n * @class\n * @memberof PIXI\n */\nvar TickerPlugin = /** @class */ (function () {\n    function TickerPlugin() {\n    }\n    /**\n     * Initialize the plugin with scope of application instance\n     *\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    TickerPlugin.init = function (options) {\n        var _this = this;\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker', {\n            set: function (ticker) {\n                if (this._ticker) {\n                    this._ticker.remove(this.render, this);\n                }\n                this._ticker = ticker;\n                if (ticker) {\n                    ticker.add(this.render, this, exports.UPDATE_PRIORITY.LOW);\n                }\n            },\n            get: function () {\n                return this._ticker;\n            },\n        });\n        /**\n         * Convenience method for stopping the render.\n         *\n         * @method\n         * @memberof PIXI.Application\n         * @instance\n         */\n        this.stop = function () {\n            _this._ticker.stop();\n        };\n        /**\n         * Convenience method for starting the render.\n         *\n         * @method\n         * @memberof PIXI.Application\n         * @instance\n         */\n        this.start = function () {\n            _this._ticker.start();\n        };\n        /**\n         * Internal reference to the ticker.\n         *\n         * @type {PIXI.Ticker}\n         * @name _ticker\n         * @memberof PIXI.Application#\n         * @private\n         */\n        this._ticker = null;\n        /**\n         * Ticker for doing render updates.\n         *\n         * @type {PIXI.Ticker}\n         * @name ticker\n         * @memberof PIXI.Application#\n         * @default PIXI.Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n        // Start the rendering\n        if (options.autoStart) {\n            this.start();\n        }\n    };\n    /**\n     * Clean up the ticker, scoped to application.\n     *\n     * @static\n     * @private\n     */\n    TickerPlugin.destroy = function () {\n        if (this._ticker) {\n            var oldTicker = this._ticker;\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    };\n    return TickerPlugin;\n}());\n\nexports.Ticker = Ticker;\nexports.TickerPlugin = TickerPlugin;\n//# sourceMappingURL=ticker.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","settings","TARGET_FPMS","UPDATE_PRIORITY","TickerListener","fn","context","priority","once","previous","next","_destroyed","prototype","match","TickerListener.prototype.match","emit","TickerListener.prototype.emit","deltaTime","call","redirect","destroy","connect","TickerListener.prototype.connect","TickerListener.prototype.destroy","hard","Ticker","_this","autoStart","lastTime","speed","started","_requestId","_maxElapsedMS","_minElapsedMS","_protected","_lastFrame","_head","Infinity","deltaMS","elapsedMS","_tick","this._tick","time","update","requestAnimationFrame","_requestIfNeeded","Ticker.prototype._requestIfNeeded","performance","now","_cancelIfNeeded","Ticker.prototype._cancelIfNeeded","cancelAnimationFrame","_startIfPossible","Ticker.prototype._startIfPossible","start","add","Ticker.prototype.add","NORMAL","_addListener","addOnce","Ticker.prototype.addOnce","Ticker.prototype._addListener","listener","current","remove","Ticker.prototype.remove","get","count","enumerable","configurable","Ticker.prototype.start","stop","Ticker.prototype.stop","Ticker.prototype.destroy","Ticker.prototype.update","currentTime","delta","head","set","fps","Math","minFPMS","min","max","minFPS","maxFPS","round","_shared","shared","_system","system","TickerPlugin","init","TickerPlugin.init","options","assign","sharedTicker","ticker","_ticker","render","LOW","this.stop","this.start","TickerPlugin.destroy","oldTicker"]
}
