{"version":3,"sources":["ellah/geometry.cljs"],"mappings":";AAGA,AAAKA,AAAGC;AACR,AAAKC,AAAI,AAAA,AAAKF;AAEd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKG;AACL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAEL,AAAA,AAAKC,AAAaF,AAAOC;AAEzB,AAAA,AAAA,AAAAE,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAAcI;AAApB,AACE,AAAA,AAAA,AAAA,AAACC,AAAM,AAACC,AAAMF,AACH,AAACG,AAAMC,AAAE,AAAA,AAACC,AAAQL,AAClB,AAACG,AAAMC,AAAE,AAAA,AAACC,AAAQL;;;AAH/B,AAAA,AAAA,AAAMJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAKA,AAAA,AAAA,AAAAP,AAAMgB;AAAN,AAAA,AAAAf,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAe,AAAAZ;;;AAAA,AAAA,AAAA,AAAA,AAAMY,AAAmBN;AAAzB,AACE,AAAA,AAAA,AAAA,AAACC,AAAM,AAACC,AAAMF,AACH,AAACG,AAAMK,AAAE,AAAA,AAACH,AAAQL,AAClB,AAACG,AAAMK,AAAE,AAAA,AAACH,AAAQL;;;AAH/B,AAAA,AAAA,AAAMM;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAR,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAQ;;;AAAA,AAKA,AAAA,AAAME,AAAaC,AAAEC;AAArB,AACE,AAAMC,AAAS,AAACC,AAAQL,AAAEG;AAA1B,AACMD,AACA,AAAA,AAACI,AAAUF,AACX,AAAA,AAACE,AAAUF;;AAEnB,AAAA,AAAMG,AAAiBL,AAAEM;AAAzB,AACE,AAACC,AAAWP,AAAE,AAAA,AAACD,AAAYO;;AAE7B,AAAA,AAAAE,AAAMG,AAAqBG;AAA3B,AAAA,AAAAL,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAiBG;AAAjB,AAAAF,AAAAD,AAAA,AAAA,AAAqBI;AAArB,AACE,AAAME,AAAI,AAACV,AAAgBS,AAAMF;AAAjC,AACE,AAAK,AAAA,AAAA,AAAA,AAAM,AAAA,AAAA,AAAA,AAAIG,AAAAA,AAAK,AAAA,AAAIF,AACnB,AAAA,AAAA,AAAA,AAAM,AAAA,AAAA,AAAA,AAAIE,AAAAA,AAAK,AAAA,AAAIF;;AAE5B,AAAA,AAAAG,AAAME,AAAwBC;AAA9B,AAAA,AAAAF,AAAAD;AAAA,AAAAN,AAAAO,AAAA,AAAA,AAAoBL;AAApB,AAAAF,AAAAO,AAAA,AAAA,AAAwBJ;AAAxB,AACE,AAAMO,AAAW,AAAAC,AAAK,AAAA,AAAIR;AAATS,AAAe,AAAGH,AAAa,AAAA,AAAIN;AAAnC,AAAA,AAAAQ,AAAAC,AAAAD,AAAAC;;AACXC,AAAY,AAAGH,AAAWD;AADhC,AAAA,AAAA,AAEMK,AAAcJ,AAAcG;AAC5BE,AAAS,AAAClB,AAAWK,AACA,AAAA,AAACb,AAAY,AAACM,AAAgBQ,AAAKW;AAJ9D,AAAA,AAMGC,AAASD;;AAEd,AAAA,AAAAE,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAA,AAAAhB,AAAAiB,AAAA,AAAA,AAAoBf;AAApB,AAAAF,AAAAiB,AAAA,AAAA,AAAwBd;AAAxB,AACE,AAACN,AAAWK,AACA,AAAA,AAACb,AAAYc;;AAE3B,AAAA,AAAMgB,AAAeC;AAArB,AACE,AAAMC,AAAO,AAAA,AAACb,AAAYY;AAA1B,AACE,AAAA,AAACE,AAAM,AAACJ,AAAYG,AACL,AAAA,AAAG,AAAA,AAAI,AAACE,AAAOF;;AAElC,AAAA,AAAAG,AAAME,AAAwBjB;AAA9B,AAAA,AAAAgB,AAAAD;AAAA,AAAAxB,AAAAyB,AAAA,AAAA,AAAoBvB;AAApB,AAAAF,AAAAyB,AAAA,AAAA,AAAwBtB;AAAxB,AACE,AAAMO,AAAW,AAAAiB,AAAK,AAAA,AAAIxB;AAATyB,AAAe,AAAGnB,AAAa,AAAA,AAAIN;AAAnC,AAAA,AAAAwB,AAAAC,AAAAD,AAAAC;;AACXf,AAAY,AAAGH,AAAWD;AADhC,AAAA,AAAA,AAEMK,AAAcJ,AACAG;AACdE,AAAS,AAACpB,AAAgBO,AACA,AAAA,AAACb,AAAY,AAACM,AAAgBmB,AAAUX;AALxE,AAAA,AAOGY,AAASD;;AAEd,AAAA,AAAMe,AAAwBC;AAA9B,AACE,AAAG,AAAA,AAACC,AAAS,AAAA,AAAID,AACd,AAAA,AAACC,AAAS,AAAA,AAAID;;AAEnB,AAAA,AAAME,AAAiBF;AAAvB,AACE,AAACG,AAAU,AAACJ,AAAuBC;;AAErC,AAAA,AAAMI,AAAiBJ;AAAvB,AACE,AAAMK,AAAI,AAACH,AAAgBF;AAA3B,AACE,AAAI,AAAA,AAAOK;AACTL;;AACA,AAACzC,AAAYyC,AACA,AAAA,AAAKK;;;AAExB,AAAA,AAAMC,AAAcC,AAAGC,AAAGC;AAA1B,AACE,AAAC1C,AAAW,AAACR,AAAYiD,AAAGC,AAChB,AAAClD,AAAYgD,AAAG,AAAA,AAAKE;;AAEnC,AAAA,AAAMC,AAAe5D;AAArB,AACE,AAACS,AAAY,AAACQ,AAAWjB,AACZ,AAAA,AAAK,AAAC6D,AAAM7D;;AAE3B,AAAA,AAAM8D,AAAaC;AAAnB,AAAA,AAAA,AAAA,AACM,AAACC,AAASD,AACV,AAACE,AAASF;;AAEhB,AAAA,AAAMG,AAAa1C;AAAnB,AACE,AAAC2C,AAAW,AAAA,AAAI3C,AAAO,AAAA,AAAIA;;AAE7B,AAAA,AAAM4C,AAAe5C,AAAMuC;AAA3B,AACE,AAAAM,AAAoB7C;AAApB6C,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAlE,AAAAoE,AAAAF,AAAAA;AAAA,AAAAG,AAAAH,AAAA,AAAcI;AAAd,AAAAD,AAAAH,AAAA,AAAgBK;AACVC,AAAa,AAAA,AAAK,AAACC,AAAIb,AAAM,AAAA,AAAK9E;AAClC4F,AAAE,AAACb,AAASW;AACZhE,AAAE,AAACsD,AAASU;AAHlB,AAAA,AAAA,AAAA,AAIM,AAAG,AAAGhE,AAAE+D,AAAG,AAAGG,AAAEJ,AAChB,AAAG,AAAG9D,AAAE8D,AAAG,AAAGI,AAAEH;;AAExB,AAAA,AAAMI,AAActD;AAApB,AAAA,AAAA,AAAA,AACM,AAAG,AAAA,AAAIA,AACP,AAAA,AAAIA;;AAEV,AAAA,AAAA,AAAAlC,AAAMyF;AAAN,AAAA,AAAAxF,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwF,AAAA,AAAA,AAAA,AAAArF;;;AAAA,AAAA,AAAA,AAAA,AAAAsF,AAAMD,AAASO;AAAf,AAAA,AAAAL,AAAAD;AAAA,AAAA5D,AAAA6D,AAAA,AAAA,AAAwBM;AAAxB,AACE,AAAClF,AAAK,AAAKmF;AAAL,AACE,AAAMzB,AAAM,AAAGwB,AAAS,AAAG,AAAGrG,AAAIsG,AAAGF;AAArC,AAAA,AAAA,AAAA,AACM,AAACtB,AAASD,AACV,AAACE,AAASF;AAClB,AAAC0B,AAAMH;;;AALf,AAAA,AAAA,AAAMP;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAjF,AAAAgF;AAAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAAA,AAAAF,AAAAD;;;AAAA,AAOA,AAAA,AAAMQ,AAAWC,AAASC,AAAUC,AAAOC,AAAQtE;AAAnD,AACE,AAACuE,AAAO,AAAKzE,AAAI0E;AAAT,AACE,AAACtD,AAAMpB,AACA0E,AACA,AAAMC,AAAS,AAACD,AAAAA,AAAAA,AAAIL,AAAAA;AACdO,AAAS,AAAGD,AAAS,AAACD,AAAAA,AAAAA,AAAIJ,AAAAA;AAC1BO,AAAO,AAACH,AAAAA,AAAAA,AAAIH,AAAAA;AACZO,AAAO,AAAGD,AAAO,AAACH,AAAAA,AAAAA,AAAIF,AAAAA;AAH5B,AAIE,AAACO,AAAYJ,AAASC,AAASC,AAAOC,AAAO,AAACJ,AAAAA,AAAAA,AAAIxE,AAAAA;;AAPrE,AAAA,AAAA,AAAA;;AAWF,AAAA,AAAM8E,AAAqB9E,AAAM+E;AAAjC,AACE,AAACC,AAAgBhF,AACA,AAACiF,AAAK,AAAC7E,AAAYvC,AAAYkH;;AAElD,AAAA,AAAMG,AAAYC,AAAOrF;AAAzB,AACE,AAAG,AAAC2B,AAAuB,AAAClC,AAAgB4F,AAAOrF,AAChD,AAAA,AAAC6B,AAAS,AAAA,AAASwD","names":["ellah.geometry/PI","Math/PI","ellah.geometry/TAU","ellah.geometry/origin","ellah.geometry/unit","ellah.geometry/unit-square","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","ellah.geometry/add-points","seq468870","self__4724__auto__","cljs.core/seq","points","cljs.core.merge","cljs.core/first","cljs.core.apply","cljs.core/+","cljs.core.mapv","ellah.geometry/multiply-points","seq468871","cljs.core/*","ellah.geometry/scale-point","a","s","scale-fn","cljs.core.partial","cljs.core.update","ellah.geometry/subtract-points","b","ellah.geometry.add_points","p__468872","vec__468873","cljs.core.nth","ellah.geometry/in-rect?","pos","size","point","off","p__468876","vec__468877","ellah.geometry/rect-within","aspect-ratio","rect-width","x__4217__auto__","y__4218__auto__","rect-height","rect-size","rect-pos","p__468880","vec__468881","ellah.geometry/rect-center","ellah.geometry/circle-within","rect","square","cljs.core.assoc","cljs.core/second","p__468884","vec__468885","ellah.geometry/rect-around","x__4214__auto__","y__4215__auto__","ellah.geometry/point-square-magnitude","p","Math/pow","ellah.geometry/point-magnitude","Math/sqrt","ellah.geometry/normalize-point","mag","ellah.geometry/tween-points","p1","p2","t","ellah.geometry/average-point","cljs.core/count","ellah.geometry/angle-point","angle","Math/cos","Math/sin","ellah.geometry/point-angle","Math/atan2","ellah.geometry/reflect-point","map__468888","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","x","y","double-angle","cljs.core/mod","c","ellah.geometry/normal-point","ellah.geometry/polygon","p__468892","vec__468893","seq468890","G__468891","cljs.core/next","self__4723__auto__","sides","rotation","i","cljs.core.range","ellah.geometry/map-point","from-pos","from-size","to-pos","to-size","cljs.core.reduce","dim","from-min","from-max","to-min","to-max","ellah.util.map_range","ellah.geometry/adjust-aspect-ratio","ar","ellah.geometry.multiply_points","cljs.core/last","ellah.geometry/in-circle?","circle"],"sourcesContent":["(ns ellah.geometry\n  (:require [ellah.util :as u]))\n\n(def PI Math/PI)\n(def TAU (* 2 PI))\n\n(def origin {:x 0 :y 0})\n(def unit {:x 1 :y 1})\n\n(def unit-square [origin unit])\n\n(defn add-points [& points]\n  (merge (first points)\n         {:x (apply + (mapv :x points))\n          :y (apply + (mapv :y points))}))\n\n(defn multiply-points [& points]\n  (merge (first points)\n         {:x (apply * (mapv :x points))\n          :y (apply * (mapv :y points))}))\n\n(defn scale-point [a s]\n  (let [scale-fn (partial * s)]\n    (-> a\n        (update :x scale-fn)\n        (update :y scale-fn))))\n\n(defn subtract-points [a b]\n  (add-points a (scale-point b -1)))\n\n(defn in-rect? [[pos size] point]\n  (let [off (subtract-points point pos)]\n    (and (<= 0 (:x off) (:x size))\n         (<= 0 (:y off) (:y size)))))\n\n(defn rect-within [[pos size] aspect-ratio]\n  (let [rect-width (min (:x size) (* aspect-ratio (:y size)))\n        rect-height (/ rect-width aspect-ratio)\n        rect-size {:x rect-width :y rect-height}\n        rect-pos (add-points pos\n                             (scale-point (subtract-points size rect-size)\n                                          0.5))]\n    [rect-pos rect-size]))\n\n(defn rect-center [[pos size]]\n  (add-points pos\n              (scale-point size 0.5)))\n\n(defn circle-within [rect]\n  (let [square (rect-within rect 1)]\n    (assoc (rect-center square)\n           :radius (/ (:x (second square)) 2))))\n\n(defn rect-around [[pos size] aspect-ratio]\n  (let [rect-width (max (:x size) (* aspect-ratio (:y size)))\n        rect-height (/ rect-width aspect-ratio)\n        rect-size {:x rect-width\n                   :y rect-height}\n        rect-pos (subtract-points pos\n                                  (scale-point (subtract-points rect-size size)\n                                               0.5))]\n    [rect-pos rect-size]))\n\n(defn point-square-magnitude [p]\n  (+ (Math/pow (:x p) 2)\n     (Math/pow (:y p) 2)))\n\n(defn point-magnitude [p]\n  (Math/sqrt (point-square-magnitude p)))\n\n(defn normalize-point [p]\n  (let [mag (point-magnitude p)]\n    (if (zero? mag)\n      p\n      (scale-point p\n                   (/ 1 mag)))))\n\n(defn tween-points [p1 p2 t]\n  (add-points (scale-point p2 t)\n              (scale-point p1 (- 1 t))))\n\n(defn average-point [points]\n  (scale-point (add-points points)\n               (/ 1 (count points))))\n\n(defn angle-point [angle]\n  {:x (Math/cos angle)\n   :y (Math/sin angle)})\n\n(defn point-angle [point]\n  (Math/atan2 (:x point) (:y point)))\n\n(defn reflect-point [point angle]\n  (let [{:keys [x y]} point\n        double-angle (* 2 (mod angle (* 2 Math/PI)))\n        c (Math/cos double-angle)\n        s (Math/sin double-angle)]\n    {:x (- (* s y) (* c x))\n     :y (+ (* s x) (* c y))}))\n\n(defn normal-point [point]\n  {:x (- (:y point))\n   :y (:x point)})\n\n(defn polygon [sides & [rotation]]\n  (mapv (fn [i]\n          (let [angle (+ rotation (/ (* TAU i) sides))]\n            {:x (Math/cos angle)\n             :y (Math/sin angle)}))\n        (range sides)))\n\n(defn map-point [from-pos from-size to-pos to-size point]\n  (reduce (fn [pos dim]\n            (assoc pos\n                   dim\n                   (let [from-min (dim from-pos)\n                         from-max (+ from-min (dim from-size))\n                         to-min (dim to-pos)\n                         to-max (+ to-min (dim to-size))]\n                     (u/map-range from-min from-max to-min to-max (dim point)))))\n          {}\n          [:x :y]))\n\n(defn adjust-aspect-ratio [point ar]\n  (multiply-points point\n                   (last (rect-within unit-square ar))))\n\n(defn in-circle? [circle pos]\n  (< (point-square-magnitude (subtract-points circle pos))\n     (Math/pow (:radius circle) 2)))"]}