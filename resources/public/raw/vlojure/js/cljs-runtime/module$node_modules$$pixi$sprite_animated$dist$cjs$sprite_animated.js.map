{
"version":3,
"file":"module$node_modules$$pixi$sprite_animated$dist$cjs$sprite_animated.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/@pixi/sprite-animated/dist/cjs/sprite-animated.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$sprite_animated$dist$cjs$sprite_animated\"] = function(global,require,module,exports) {\n/*!\n * @pixi/sprite-animated - v6.1.1\n * Compiled Fri, 06 Aug 2021 03:30:25 UTC\n *\n * @pixi/sprite-animated is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar core = require('@pixi/core');\nvar sprite = require('@pixi/sprite');\nvar ticker = require('@pixi/ticker');\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * An AnimatedSprite is a simple way to display an animation depicted by a list of textures.\n *\n * ```js\n * let alienImages = [\"image_sequence_01.png\",\"image_sequence_02.png\",\"image_sequence_03.png\",\"image_sequence_04.png\"];\n * let textureArray = [];\n *\n * for (let i=0; i < 4; i++)\n * {\n *      let texture = PIXI.Texture.from(alienImages[i]);\n *      textureArray.push(texture);\n * };\n *\n * let animatedSprite = new PIXI.AnimatedSprite(textureArray);\n * ```\n *\n * The more efficient and simpler way to create an animated sprite is using a {@link PIXI.Spritesheet}\n * containing the animation definitions:\n *\n * ```js\n * PIXI.Loader.shared.add(\"assets/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"assets/spritesheet.json\"].spritesheet;\n *   animatedSprite = new PIXI.AnimatedSprite(sheet.animations[\"image_sequence\"]);\n *   ...\n * }\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\nvar AnimatedSprite = /** @class */ (function (_super) {\n    __extends(AnimatedSprite, _super);\n    /**\n     * @param {PIXI.Texture[]|PIXI.AnimatedSprite.FrameObject[]} textures - An array of {@link PIXI.Texture} or frame\n     *  objects that make up the animation.\n     * @param {boolean} [autoUpdate=true] - Whether to use PIXI.Ticker.shared to auto update animation time.\n     */\n    function AnimatedSprite(textures, autoUpdate) {\n        if (autoUpdate === void 0) { autoUpdate = true; }\n        var _this = _super.call(this, textures[0] instanceof core.Texture ? textures[0] : textures[0].texture) || this;\n        /**\n         * @type {PIXI.Texture[]}\n         * @private\n         */\n        _this._textures = null;\n        /**\n         * @type {number[]}\n         * @private\n         */\n        _this._durations = null;\n        /**\n         * `true` uses PIXI.Ticker.shared to auto update animation time.\n         *\n         * @type {boolean}\n         * @default true\n         * @private\n         */\n        _this._autoUpdate = autoUpdate;\n        /**\n         * `true` if the instance is currently connected to PIXI.Ticker.shared to auto update animation time.\n         *\n         * @type {boolean}\n         * @default false\n         * @private\n         */\n        _this._isConnectedToTicker = false;\n        /**\n         * The speed that the AnimatedSprite will play at. Higher is faster, lower is slower.\n         *\n         * @member {number}\n         * @default 1\n         */\n        _this.animationSpeed = 1;\n        /**\n         * Whether or not the animate sprite repeats after playing.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        _this.loop = true;\n        /**\n         * Update anchor to [Texture's defaultAnchor]{@link PIXI.Texture#defaultAnchor} when frame changes.\n         *\n         * Useful with [sprite sheet animations]{@link PIXI.Spritesheet#animations} created with tools.\n         * Changing anchor for each frame allows to pin sprite origin to certain moving feature\n         * of the frame (e.g. left foot).\n         *\n         * Note: Enabling this will override any previously set `anchor` on each frame change.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        _this.updateAnchor = false;\n        /**\n         * User-assigned function to call when an AnimatedSprite finishes playing.\n         *\n         * @example\n         * animation.onComplete = function () {\n         *   // finished!\n         * };\n         * @member {Function}\n         */\n        _this.onComplete = null;\n        /**\n         * User-assigned function to call when an AnimatedSprite changes which texture is being rendered.\n         *\n         * @example\n         * animation.onFrameChange = function () {\n         *   // updated!\n         * };\n         * @member {Function}\n         */\n        _this.onFrameChange = null;\n        /**\n         * User-assigned function to call when `loop` is true, and an AnimatedSprite is played and\n         * loops around to start again.\n         *\n         * @example\n         * animation.onLoop = function () {\n         *   // looped!\n         * };\n         * @member {Function}\n         */\n        _this.onLoop = null;\n        /**\n         * Elapsed time since animation has been started, used internally to display current texture.\n         *\n         * @member {number}\n         * @private\n         */\n        _this._currentTime = 0;\n        _this._playing = false;\n        /**\n         * The texture index that was displayed last time\n         *\n         * @member {number}\n         * @private\n         */\n        _this._previousFrame = null;\n        _this.textures = textures;\n        return _this;\n    }\n    /**\n     * Stops the AnimatedSprite.\n     *\n     */\n    AnimatedSprite.prototype.stop = function () {\n        if (!this._playing) {\n            return;\n        }\n        this._playing = false;\n        if (this._autoUpdate && this._isConnectedToTicker) {\n            ticker.Ticker.shared.remove(this.update, this);\n            this._isConnectedToTicker = false;\n        }\n    };\n    /**\n     * Plays the AnimatedSprite.\n     *\n     */\n    AnimatedSprite.prototype.play = function () {\n        if (this._playing) {\n            return;\n        }\n        this._playing = true;\n        if (this._autoUpdate && !this._isConnectedToTicker) {\n            ticker.Ticker.shared.add(this.update, this, ticker.UPDATE_PRIORITY.HIGH);\n            this._isConnectedToTicker = true;\n        }\n    };\n    /**\n     * Stops the AnimatedSprite and goes to a specific frame.\n     *\n     * @param {number} frameNumber - Frame index to stop at.\n     */\n    AnimatedSprite.prototype.gotoAndStop = function (frameNumber) {\n        this.stop();\n        var previousFrame = this.currentFrame;\n        this._currentTime = frameNumber;\n        if (previousFrame !== this.currentFrame) {\n            this.updateTexture();\n        }\n    };\n    /**\n     * Goes to a specific frame and begins playing the AnimatedSprite.\n     *\n     * @param {number} frameNumber - Frame index to start at.\n     */\n    AnimatedSprite.prototype.gotoAndPlay = function (frameNumber) {\n        var previousFrame = this.currentFrame;\n        this._currentTime = frameNumber;\n        if (previousFrame !== this.currentFrame) {\n            this.updateTexture();\n        }\n        this.play();\n    };\n    /**\n     * Updates the object transform for rendering.\n     *\n     * @param {number} deltaTime - Time since last tick.\n     */\n    AnimatedSprite.prototype.update = function (deltaTime) {\n        if (!this._playing) {\n            return;\n        }\n        var elapsed = this.animationSpeed * deltaTime;\n        var previousFrame = this.currentFrame;\n        if (this._durations !== null) {\n            var lag = this._currentTime % 1 * this._durations[this.currentFrame];\n            lag += elapsed / 60 * 1000;\n            while (lag < 0) {\n                this._currentTime--;\n                lag += this._durations[this.currentFrame];\n            }\n            var sign = Math.sign(this.animationSpeed * deltaTime);\n            this._currentTime = Math.floor(this._currentTime);\n            while (lag >= this._durations[this.currentFrame]) {\n                lag -= this._durations[this.currentFrame] * sign;\n                this._currentTime += sign;\n            }\n            this._currentTime += lag / this._durations[this.currentFrame];\n        }\n        else {\n            this._currentTime += elapsed;\n        }\n        if (this._currentTime < 0 && !this.loop) {\n            this.gotoAndStop(0);\n            if (this.onComplete) {\n                this.onComplete();\n            }\n        }\n        else if (this._currentTime >= this._textures.length && !this.loop) {\n            this.gotoAndStop(this._textures.length - 1);\n            if (this.onComplete) {\n                this.onComplete();\n            }\n        }\n        else if (previousFrame !== this.currentFrame) {\n            if (this.loop && this.onLoop) {\n                if (this.animationSpeed > 0 && this.currentFrame < previousFrame) {\n                    this.onLoop();\n                }\n                else if (this.animationSpeed < 0 && this.currentFrame > previousFrame) {\n                    this.onLoop();\n                }\n            }\n            this.updateTexture();\n        }\n    };\n    /**\n     * Updates the displayed texture to match the current frame index.\n     *\n     * @private\n     */\n    AnimatedSprite.prototype.updateTexture = function () {\n        var currentFrame = this.currentFrame;\n        if (this._previousFrame === currentFrame) {\n            return;\n        }\n        this._previousFrame = currentFrame;\n        this._texture = this._textures[currentFrame];\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this._cachedTint = 0xFFFFFF;\n        this.uvs = this._texture._uvs.uvsFloat32;\n        if (this.updateAnchor) {\n            this._anchor.copyFrom(this._texture.defaultAnchor);\n        }\n        if (this.onFrameChange) {\n            this.onFrameChange(this.currentFrame);\n        }\n    };\n    /**\n     * Stops the AnimatedSprite and destroys it.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value.\n     * @param {boolean} [options.children=false] - If set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well.\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well.\n     */\n    AnimatedSprite.prototype.destroy = function (options) {\n        this.stop();\n        _super.prototype.destroy.call(this, options);\n        this.onComplete = null;\n        this.onFrameChange = null;\n        this.onLoop = null;\n    };\n    /**\n     * A short hand way of creating an AnimatedSprite from an array of frame ids.\n     *\n     * @static\n     * @param {string[]} frames - The array of frames ids the AnimatedSprite will use as its texture frames.\n     * @return {PIXI.AnimatedSprite} The new animated sprite with the specified frames.\n     */\n    AnimatedSprite.fromFrames = function (frames) {\n        var textures = [];\n        for (var i = 0; i < frames.length; ++i) {\n            textures.push(core.Texture.from(frames[i]));\n        }\n        return new AnimatedSprite(textures);\n    };\n    /**\n     * A short hand way of creating an AnimatedSprite from an array of image ids.\n     *\n     * @static\n     * @param {string[]} images - The array of image urls the AnimatedSprite will use as its texture frames.\n     * @return {PIXI.AnimatedSprite} The new animate sprite with the specified images as frames.\n     */\n    AnimatedSprite.fromImages = function (images) {\n        var textures = [];\n        for (var i = 0; i < images.length; ++i) {\n            textures.push(core.Texture.from(images[i]));\n        }\n        return new AnimatedSprite(textures);\n    };\n    Object.defineProperty(AnimatedSprite.prototype, \"totalFrames\", {\n        /**\n         * The total number of frames in the AnimatedSprite. This is the same as number of textures\n         * assigned to the AnimatedSprite.\n         *\n         * @readonly\n         * @member {number}\n         * @default 0\n         */\n        get: function () {\n            return this._textures.length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedSprite.prototype, \"textures\", {\n        /**\n         * The array of textures used for this AnimatedSprite.\n         *\n         * @member {PIXI.Texture[]}\n         */\n        get: function () {\n            return this._textures;\n        },\n        set: function (value) {\n            if (value[0] instanceof core.Texture) {\n                this._textures = value;\n                this._durations = null;\n            }\n            else {\n                this._textures = [];\n                this._durations = [];\n                for (var i = 0; i < value.length; i++) {\n                    this._textures.push(value[i].texture);\n                    this._durations.push(value[i].time);\n                }\n            }\n            this._previousFrame = null;\n            this.gotoAndStop(0);\n            this.updateTexture();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedSprite.prototype, \"currentFrame\", {\n        /**\n        * The AnimatedSprites current frame index.\n        *\n        * @member {number}\n        * @readonly\n        */\n        get: function () {\n            var currentFrame = Math.floor(this._currentTime) % this._textures.length;\n            if (currentFrame < 0) {\n                currentFrame += this._textures.length;\n            }\n            return currentFrame;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedSprite.prototype, \"playing\", {\n        /**\n         * Indicates if the AnimatedSprite is currently playing.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        get: function () {\n            return this._playing;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedSprite.prototype, \"autoUpdate\", {\n        /**\n         * Whether to use PIXI.Ticker.shared to auto update animation time\n         *\n         * @member {boolean}\n         */\n        get: function () {\n            return this._autoUpdate;\n        },\n        set: function (value) {\n            if (value !== this._autoUpdate) {\n                this._autoUpdate = value;\n                if (!this._autoUpdate && this._isConnectedToTicker) {\n                    ticker.Ticker.shared.remove(this.update, this);\n                    this._isConnectedToTicker = false;\n                }\n                else if (this._autoUpdate && !this._isConnectedToTicker && this._playing) {\n                    ticker.Ticker.shared.add(this.update, this);\n                    this._isConnectedToTicker = true;\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return AnimatedSprite;\n}(sprite.Sprite));\n/**\n * @memberof PIXI.AnimatedSprite\n * @typedef {object} FrameObject\n * @type {object}\n * @property {PIXI.Texture} texture - The {@link PIXI.Texture} of the frame\n * @property {number} time - the duration of the frame in ms\n */\n\nexports.AnimatedSprite = AnimatedSprite;\n//# sourceMappingURL=sprite-animated.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","defineProperty","value","core","sprite","ticker","setPrototypeOf","__proto__","Array","p","hasOwnProperty","AnimatedSprite","_super","textures","autoUpdate","_this","call","Texture","texture","_textures","_durations","_autoUpdate","_isConnectedToTicker","animationSpeed","loop","updateAnchor","onComplete","onFrameChange","onLoop","_currentTime","_playing","_previousFrame","stop","AnimatedSprite.prototype.stop","Ticker","shared","remove","update","play","AnimatedSprite.prototype.play","add","UPDATE_PRIORITY","HIGH","gotoAndStop","AnimatedSprite.prototype.gotoAndStop","frameNumber","previousFrame","currentFrame","updateTexture","gotoAndPlay","AnimatedSprite.prototype.gotoAndPlay","AnimatedSprite.prototype.update","deltaTime","elapsed","lag","sign","Math","floor","length","AnimatedSprite.prototype.updateTexture","_texture","_textureTrimmedID","_textureID","_cachedTint","uvs","_uvs","uvsFloat32","_anchor","copyFrom","defaultAnchor","destroy","AnimatedSprite.prototype.destroy","options","fromFrames","AnimatedSprite.fromFrames","frames","i","push","from","fromImages","AnimatedSprite.fromImages","images","get","enumerable","configurable","set","time","Sprite"]
}
