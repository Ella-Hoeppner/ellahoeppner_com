{
"version":3,
"file":"module$node_modules$$pixi$mesh$dist$cjs$mesh.js",
"lineCount":19,
"mappings":"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",
"sources":["node_modules/@pixi/mesh/dist/cjs/mesh.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$mesh$dist$cjs$mesh\"] = function(global,require,module,exports) {\n/*!\n * @pixi/mesh - v6.0.4\n * Compiled Tue, 11 May 2021 18:00:23 UTC\n *\n * @pixi/mesh is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar core = require('@pixi/core');\nvar math = require('@pixi/math');\nvar constants = require('@pixi/constants');\nvar display = require('@pixi/display');\nvar settings = require('@pixi/settings');\nvar utils = require('@pixi/utils');\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.\n *\n * @class\n * @memberof PIXI\n */\nvar MeshBatchUvs = /** @class */ (function () {\n    /**\n     * @param {PIXI.Buffer} uvBuffer - Buffer with normalized uv's\n     * @param {PIXI.TextureMatrix} uvMatrix - Material UV matrix\n     */\n    function MeshBatchUvs(uvBuffer, uvMatrix) {\n        /**\n         * Buffer with normalized UV's\n         * @member {PIXI.Buffer}\n         */\n        this.uvBuffer = uvBuffer;\n        /**\n         * Material UV matrix\n         * @member {PIXI.TextureMatrix}\n         */\n        this.uvMatrix = uvMatrix;\n        /**\n         * UV Buffer data\n         * @member {Float32Array}\n         * @readonly\n         */\n        this.data = null;\n        this._bufferUpdateId = -1;\n        this._textureUpdateId = -1;\n        this._updateID = 0;\n    }\n    /**\n     * updates\n     *\n     * @param {boolean} [forceUpdate] - force the update\n     */\n    MeshBatchUvs.prototype.update = function (forceUpdate) {\n        if (!forceUpdate\n            && this._bufferUpdateId === this.uvBuffer._updateID\n            && this._textureUpdateId === this.uvMatrix._updateID) {\n            return;\n        }\n        this._bufferUpdateId = this.uvBuffer._updateID;\n        this._textureUpdateId = this.uvMatrix._updateID;\n        var data = this.uvBuffer.data;\n        if (!this.data || this.data.length !== data.length) {\n            this.data = new Float32Array(data.length);\n        }\n        this.uvMatrix.multiplyUvs(data, this.data);\n        this._updateID++;\n    };\n    return MeshBatchUvs;\n}());\n\nvar tempPoint = new math.Point();\nvar tempPolygon = new math.Polygon();\n/**\n * Base mesh class.\n *\n * This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.\n * This class assumes a certain level of WebGL knowledge.\n * If you know a bit this should abstract enough away to make you life easier!\n *\n * Pretty much ALL WebGL can be broken down into the following:\n * - Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..\n * - Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)\n * - State - This is the state of WebGL required to render the mesh.\n *\n * Through a combination of the above elements you can render anything you want, 2D or 3D!\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nvar Mesh = /** @class */ (function (_super) {\n    __extends(Mesh, _super);\n    /**\n     * @param {PIXI.Geometry} geometry - the geometry the mesh will use\n     * @param {PIXI.MeshMaterial} shader - the shader the mesh will use\n     * @param {PIXI.State} [state] - the state that the WebGL context is required to be in to render the mesh\n     *        if no state is provided, uses {@link PIXI.State.for2d} to create a 2D state for PixiJS.\n     * @param {number} [drawMode=PIXI.DRAW_MODES.TRIANGLES] - the drawMode, can be any of the PIXI.DRAW_MODES consts\n     */\n    function Mesh(geometry, shader, state, drawMode) {\n        if (drawMode === void 0) { drawMode = constants.DRAW_MODES.TRIANGLES; }\n        var _this = _super.call(this) || this;\n        /**\n         * Includes vertex positions, face indices, normals, colors, UVs, and\n         * custom attributes within buffers, reducing the cost of passing all\n         * this data to the GPU. Can be shared between multiple Mesh objects.\n         * @member {PIXI.Geometry}\n         * @readonly\n         */\n        _this.geometry = geometry;\n        geometry.refCount++;\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Mesh objects.\n         * @member {PIXI.Shader|PIXI.MeshMaterial}\n         */\n        _this.shader = shader;\n        /**\n         * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         * @member {PIXI.State}\n         */\n        _this.state = state || core.State.for2d();\n        /**\n         * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.\n         *\n         * @member {number}\n         * @see PIXI.DRAW_MODES\n         */\n        _this.drawMode = drawMode;\n        /**\n         * Typically the index of the IndexBuffer where to start drawing.\n         * @member {number}\n         * @default 0\n         */\n        _this.start = 0;\n        /**\n         * How much of the geometry to draw, by default `0` renders everything.\n         * @member {number}\n         * @default 0\n         */\n        _this.size = 0;\n        /**\n         * these are used as easy access for batching\n         * @member {Float32Array}\n         * @private\n         */\n        _this.uvs = null;\n        /**\n         * these are used as easy access for batching\n         * @member {Uint16Array}\n         * @private\n         */\n        _this.indices = null;\n        /**\n         * this is the caching layer used by the batcher\n         * @member {Float32Array}\n         * @private\n         */\n        _this.vertexData = new Float32Array(1);\n        /**\n         * If geometry is changed used to decide to re-transform\n         * the vertexData.\n         * @member {number}\n         * @private\n         */\n        _this.vertexDirty = -1;\n        _this._transformID = -1;\n        /**\n         * Internal roundPixels field\n         *\n         * @member {boolean}\n         * @private\n         */\n        _this._roundPixels = settings.settings.ROUND_PIXELS;\n        /**\n         * Batched UV's are cached for atlas textures\n         * @member {PIXI.MeshBatchUvs}\n         * @private\n         */\n        _this.batchUvs = null;\n        return _this;\n    }\n    Object.defineProperty(Mesh.prototype, \"uvBuffer\", {\n        /**\n         * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n         * @member {PIXI.Buffer}\n         * @readonly\n         */\n        get: function () {\n            return this.geometry.buffers[1];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Mesh.prototype, \"verticesBuffer\", {\n        /**\n         * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n         * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n         * @member {PIXI.Buffer}\n         * @readonly\n         */\n        get: function () {\n            return this.geometry.buffers[0];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Mesh.prototype, \"material\", {\n        get: function () {\n            return this.shader;\n        },\n        /**\n         * Alias for {@link PIXI.Mesh#shader}.\n         * @member {PIXI.MeshMaterial}\n         */\n        set: function (value) {\n            this.shader = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Mesh.prototype, \"blendMode\", {\n        get: function () {\n            return this.state.blendMode;\n        },\n        /**\n         * The blend mode to be applied to the Mesh. Apply a value of\n         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL;\n         * @see PIXI.BLEND_MODES\n         */\n        set: function (value) {\n            this.state.blendMode = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Mesh.prototype, \"roundPixels\", {\n        get: function () {\n            return this._roundPixels;\n        },\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n         *\n         * @member {boolean}\n         * @default false\n         */\n        set: function (value) {\n            if (this._roundPixels !== value) {\n                this._transformID = -1;\n            }\n            this._roundPixels = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Mesh.prototype, \"tint\", {\n        /**\n         * The multiply tint applied to the Mesh. This is a hex value. A value of\n         * `0xFFFFFF` will remove any tint effect.\n         *\n         * Null for non-MeshMaterial shaders\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        get: function () {\n            return 'tint' in this.shader ? this.shader.tint : null;\n        },\n        set: function (value) {\n            this.shader.tint = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Mesh.prototype, \"texture\", {\n        /**\n         * The texture that the Mesh uses.\n         *\n         * Null for non-MeshMaterial shaders\n         * @member {PIXI.Texture}\n         */\n        get: function () {\n            return 'texture' in this.shader ? this.shader.texture : null;\n        },\n        set: function (value) {\n            this.shader.texture = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Standard renderer draw.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    Mesh.prototype._render = function (renderer) {\n        // set properties for batching..\n        // TODO could use a different way to grab verts?\n        var vertices = this.geometry.buffers[0].data;\n        var shader = this.shader;\n        // TODO benchmark check for attribute size..\n        if (shader.batchable\n            && this.drawMode === constants.DRAW_MODES.TRIANGLES\n            && vertices.length < Mesh.BATCHABLE_SIZE * 2) {\n            this._renderToBatch(renderer);\n        }\n        else {\n            this._renderDefault(renderer);\n        }\n    };\n    /**\n     * Standard non-batching way of rendering.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    Mesh.prototype._renderDefault = function (renderer) {\n        var shader = this.shader;\n        shader.alpha = this.worldAlpha;\n        if (shader.update) {\n            shader.update();\n        }\n        renderer.batch.flush();\n        if (shader.program.uniformData.translationMatrix) {\n            shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n        }\n        // bind and sync uniforms..\n        renderer.shader.bind(shader);\n        // set state..\n        renderer.state.set(this.state);\n        // bind the geometry...\n        renderer.geometry.bind(this.geometry, shader);\n        // then render it\n        renderer.geometry.draw(this.drawMode, this.size, this.start, this.geometry.instanceCount);\n    };\n    /**\n     * Rendering by using the Batch system.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    Mesh.prototype._renderToBatch = function (renderer) {\n        var geometry = this.geometry;\n        var shader = this.shader;\n        if (shader.uvMatrix) {\n            shader.uvMatrix.update();\n            this.calculateUvs();\n        }\n        // set properties for batching..\n        this.calculateVertices();\n        this.indices = geometry.indexBuffer.data;\n        this._tintRGB = shader._tintRGB;\n        this._texture = shader.texture;\n        var pluginName = this.material.pluginName;\n        renderer.batch.setObjectRenderer(renderer.plugins[pluginName]);\n        renderer.plugins[pluginName].render(this);\n    };\n    /**\n     * Updates vertexData field based on transform and vertices\n     */\n    Mesh.prototype.calculateVertices = function () {\n        var geometry = this.geometry;\n        var verticesBuffer = geometry.buffers[0];\n        var vertices = verticesBuffer.data;\n        var vertexDirtyId = verticesBuffer._updateID;\n        if (vertexDirtyId === this.vertexDirty && this._transformID === this.transform._worldID) {\n            return;\n        }\n        this._transformID = this.transform._worldID;\n        if (this.vertexData.length !== vertices.length) {\n            this.vertexData = new Float32Array(vertices.length);\n        }\n        var wt = this.transform.worldTransform;\n        var a = wt.a;\n        var b = wt.b;\n        var c = wt.c;\n        var d = wt.d;\n        var tx = wt.tx;\n        var ty = wt.ty;\n        var vertexData = this.vertexData;\n        for (var i = 0; i < vertexData.length / 2; i++) {\n            var x = vertices[(i * 2)];\n            var y = vertices[(i * 2) + 1];\n            vertexData[(i * 2)] = (a * x) + (c * y) + tx;\n            vertexData[(i * 2) + 1] = (b * x) + (d * y) + ty;\n        }\n        if (this._roundPixels) {\n            var resolution = settings.settings.RESOLUTION;\n            for (var i = 0; i < vertexData.length; ++i) {\n                vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n            }\n        }\n        this.vertexDirty = vertexDirtyId;\n    };\n    /**\n     * Updates uv field based on from geometry uv's or batchUvs\n     */\n    Mesh.prototype.calculateUvs = function () {\n        var geomUvs = this.geometry.buffers[1];\n        var shader = this.shader;\n        if (!shader.uvMatrix.isSimple) {\n            if (!this.batchUvs) {\n                this.batchUvs = new MeshBatchUvs(geomUvs, shader.uvMatrix);\n            }\n            this.batchUvs.update();\n            this.uvs = this.batchUvs.data;\n        }\n        else {\n            this.uvs = geomUvs.data;\n        }\n    };\n    /**\n     * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n     * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n     *\n     * @protected\n     */\n    Mesh.prototype._calculateBounds = function () {\n        this.calculateVertices();\n        this._bounds.addVertexData(this.vertexData, 0, this.vertexData.length);\n    };\n    /**\n     * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n     *\n     * @param {PIXI.IPointData} point - the point to test\n     * @return {boolean} the result of the test\n     */\n    Mesh.prototype.containsPoint = function (point) {\n        if (!this.getBounds().contains(point.x, point.y)) {\n            return false;\n        }\n        this.worldTransform.applyInverse(point, tempPoint);\n        var vertices = this.geometry.getBuffer('aVertexPosition').data;\n        var points = tempPolygon.points;\n        var indices = this.geometry.getIndex().data;\n        var len = indices.length;\n        var step = this.drawMode === 4 ? 3 : 1;\n        for (var i = 0; i + 2 < len; i += step) {\n            var ind0 = indices[i] * 2;\n            var ind1 = indices[i + 1] * 2;\n            var ind2 = indices[i + 2] * 2;\n            points[0] = vertices[ind0];\n            points[1] = vertices[ind0 + 1];\n            points[2] = vertices[ind1];\n            points[3] = vertices[ind1 + 1];\n            points[4] = vertices[ind2];\n            points[5] = vertices[ind2 + 1];\n            if (tempPolygon.contains(tempPoint.x, tempPoint.y)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Destroys the Mesh object.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     */\n    Mesh.prototype.destroy = function (options) {\n        _super.prototype.destroy.call(this, options);\n        this.geometry.refCount--;\n        if (this.geometry.refCount === 0) {\n            this.geometry.dispose();\n        }\n        if (this._cachedTexture) {\n            this._cachedTexture.destroy();\n            this._cachedTexture = null;\n        }\n        this.geometry = null;\n        this.shader = null;\n        this.state = null;\n        this.uvs = null;\n        this.indices = null;\n        this.vertexData = null;\n    };\n    /**\n     * The maximum number of vertices to consider batchable. Generally, the complexity\n     * of the geometry.\n     * @memberof PIXI.Mesh\n     * @static\n     * @member {number} BATCHABLE_SIZE\n     */\n    Mesh.BATCHABLE_SIZE = 100;\n    return Mesh;\n}(display.Container));\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform vec4 uColor;\\n\\nuniform sampler2D uSampler;\\n\\nvoid main(void)\\n{\\n    gl_FragColor = texture2D(uSampler, vTextureCoord) * uColor;\\n}\\n\";\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 translationMatrix;\\nuniform mat3 uTextureMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = (uTextureMatrix * vec3(aTextureCoord, 1.0)).xy;\\n}\\n\";\n\n/**\n * Slightly opinionated default shader for PixiJS 2D objects.\n * @class\n * @memberof PIXI\n * @extends PIXI.Shader\n */\nvar MeshMaterial = /** @class */ (function (_super) {\n    __extends(MeshMaterial, _super);\n    /**\n     * @param {PIXI.Texture} uSampler - Texture that material uses to render.\n     * @param {object} [options] - Additional options\n     * @param {number} [options.alpha=1] - Default alpha.\n     * @param {number} [options.tint=0xFFFFFF] - Default tint.\n     * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n     * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n     * @param {object} [options.uniforms] - Custom uniforms.\n     */\n    function MeshMaterial(uSampler, options) {\n        var _this = this;\n        var uniforms = {\n            uSampler: uSampler,\n            alpha: 1,\n            uTextureMatrix: math.Matrix.IDENTITY,\n            uColor: new Float32Array([1, 1, 1, 1]),\n        };\n        // Set defaults\n        options = Object.assign({\n            tint: 0xFFFFFF,\n            alpha: 1,\n            pluginName: 'batch',\n        }, options);\n        if (options.uniforms) {\n            Object.assign(uniforms, options.uniforms);\n        }\n        _this = _super.call(this, options.program || core.Program.from(vertex, fragment), uniforms) || this;\n        /**\n         * Only do update if tint or alpha changes.\n         * @member {boolean}\n         * @private\n         * @default false\n         */\n        _this._colorDirty = false;\n        /**\n         * TextureMatrix instance for this Mesh, used to track Texture changes\n         *\n         * @member {PIXI.TextureMatrix}\n         * @readonly\n         */\n        _this.uvMatrix = new core.TextureMatrix(uSampler);\n        /**\n         * `true` if shader can be batch with the renderer's batch system.\n         * @member {boolean}\n         * @default true\n         */\n        _this.batchable = options.program === undefined;\n        /**\n         * Renderer plugin for batching\n         *\n         * @member {string}\n         * @default 'batch'\n         */\n        _this.pluginName = options.pluginName;\n        _this.tint = options.tint;\n        _this.alpha = options.alpha;\n        return _this;\n    }\n    Object.defineProperty(MeshMaterial.prototype, \"texture\", {\n        /**\n         * Reference to the texture being rendered.\n         * @member {PIXI.Texture}\n         */\n        get: function () {\n            return this.uniforms.uSampler;\n        },\n        set: function (value) {\n            if (this.uniforms.uSampler !== value) {\n                this.uniforms.uSampler = value;\n                this.uvMatrix.texture = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MeshMaterial.prototype, \"alpha\", {\n        get: function () {\n            return this._alpha;\n        },\n        /**\n         * This gets automatically set by the object using this.\n         *\n         * @default 1\n         * @member {number}\n         */\n        set: function (value) {\n            if (value === this._alpha)\n                { return; }\n            this._alpha = value;\n            this._colorDirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MeshMaterial.prototype, \"tint\", {\n        get: function () {\n            return this._tint;\n        },\n        /**\n         * Multiply tint for the material.\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        set: function (value) {\n            if (value === this._tint)\n                { return; }\n            this._tint = value;\n            this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n            this._colorDirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets called automatically by the Mesh. Intended to be overridden for custom\n     * MeshMaterial objects.\n     */\n    MeshMaterial.prototype.update = function () {\n        if (this._colorDirty) {\n            this._colorDirty = false;\n            var baseTexture = this.texture.baseTexture;\n            utils.premultiplyTintToRgba(this._tint, this._alpha, this.uniforms.uColor, baseTexture.alphaMode);\n        }\n        if (this.uvMatrix.update()) {\n            this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n        }\n    };\n    return MeshMaterial;\n}(core.Shader));\n\n/**\n * Standard 2D geometry used in PixiJS.\n *\n * Geometry can be defined without passing in a style or data if required.\n *\n * ```js\n * const geometry = new PIXI.Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1], 2);\n * geometry.addIndex([0,1,2,1,3,2]);\n *\n * ```\n * @class\n * @memberof PIXI\n * @extends PIXI.Geometry\n */\nvar MeshGeometry = /** @class */ (function (_super) {\n    __extends(MeshGeometry, _super);\n    /**\n     * @param {Float32Array|number[]} [vertices] - Positional data on geometry.\n     * @param {Float32Array|number[]} [uvs] - Texture UVs.\n     * @param {Uint16Array|number[]} [index] - IndexBuffer\n     */\n    function MeshGeometry(vertices, uvs, index) {\n        var _this = _super.call(this) || this;\n        var verticesBuffer = new core.Buffer(vertices);\n        var uvsBuffer = new core.Buffer(uvs, true);\n        var indexBuffer = new core.Buffer(index, true, true);\n        _this.addAttribute('aVertexPosition', verticesBuffer, 2, false, constants.TYPES.FLOAT)\n            .addAttribute('aTextureCoord', uvsBuffer, 2, false, constants.TYPES.FLOAT)\n            .addIndex(indexBuffer);\n        /**\n         * Dirty flag to limit update calls on Mesh. For example,\n         * limiting updates on a single Mesh instance with a shared Geometry\n         * within the render loop.\n         * @private\n         * @member {number}\n         * @default -1\n         */\n        _this._updateId = -1;\n        return _this;\n    }\n    Object.defineProperty(MeshGeometry.prototype, \"vertexDirtyId\", {\n        /**\n         * If the vertex position is updated.\n         * @member {number}\n         * @readonly\n         * @private\n         */\n        get: function () {\n            return this.buffers[0]._updateID;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return MeshGeometry;\n}(core.Geometry));\n\nexports.Mesh = Mesh;\nexports.MeshBatchUvs = MeshBatchUvs;\nexports.MeshGeometry = MeshGeometry;\nexports.MeshMaterial = MeshMaterial;\n//# sourceMappingURL=mesh.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","defineProperty","value","core","math","constants","display","settings","utils","setPrototypeOf","__proto__","Array","p","hasOwnProperty","MeshBatchUvs","uvBuffer","uvMatrix","data","_textureUpdateId","_bufferUpdateId","_updateID","update","MeshBatchUvs.prototype.update","forceUpdate","length","Float32Array","multiplyUvs","tempPoint","Point","tempPolygon","Polygon","Mesh","_super","geometry","shader","state","drawMode","DRAW_MODES","TRIANGLES","_this","call","refCount","State","for2d","start","size","uvs","indices","vertexData","vertexDirty","_transformID","_roundPixels","ROUND_PIXELS","batchUvs","get","buffers","enumerable","configurable","set","blendMode","tint","texture","_render","Mesh.prototype._render","renderer","vertices","batchable","BATCHABLE_SIZE","_renderToBatch","_renderDefault","Mesh.prototype._renderDefault","alpha","worldAlpha","batch","flush","program","uniformData","translationMatrix","uniforms","transform","worldTransform","toArray","bind","draw","instanceCount","Mesh.prototype._renderToBatch","calculateUvs","calculateVertices","indexBuffer","_tintRGB","_texture","pluginName","material","setObjectRenderer","plugins","render","Mesh.prototype.calculateVertices","verticesBuffer","vertexDirtyId","_worldID","wt","a","c","tx","ty","i","x","y","resolution","RESOLUTION","Math","round","Mesh.prototype.calculateUvs","geomUvs","isSimple","_calculateBounds","Mesh.prototype._calculateBounds","_bounds","addVertexData","containsPoint","Mesh.prototype.containsPoint","point","getBounds","contains","applyInverse","getBuffer","points","getIndex","len","step","ind0","ind1","ind2","destroy","Mesh.prototype.destroy","options","dispose","_cachedTexture","Container","MeshMaterial","uSampler","uTextureMatrix","Matrix","IDENTITY","uColor","assign","Program","from","vertex","fragment","_colorDirty","TextureMatrix","undefined","_alpha","_tint","MeshMaterial.prototype.update","premultiplyTintToRgba","baseTexture","alphaMode","mapCoord","Shader","MeshGeometry","index","Buffer","uvsBuffer","addAttribute","TYPES","FLOAT","addIndex","_updateId","Geometry"]
}
